//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Cruiser??Command
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: getResolution v1.20
//--------------------------------------------------------------------------------------------------
// Variables
int[16][2] lib3_gv_getResolution_PlayerResolution;
int[16][2] lib3_gv_getResolution_PlayerUIResolution;
fixed[16] lib3_gv_getResolution_PlayerScaleValue;
bool lib3_gv_getResolution_FirstRun;
bool[16] lib3_gv_getResolution_CheckResolutionPass;
int[2] lib3_gv_getResolution_Player;
int lib3_gv_getResolution_LimitMouseDialog;
int[5] lib3_gv_getResolution_LimitMouseDialogButtons;
int[16][2] lib3_gv_getResolution_MouseMove;
playergroup[3] lib3_gv_getResolution_PlayerGroup;
bool lib3_gv_getResolution_Debug;

void lib3_InitVariables () {
    int init_i;

    lib3_gv_getResolution_FirstRun = true;
    lib3_gv_getResolution_LimitMouseDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib3_gv_getResolution_LimitMouseDialogButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib3_gv_getResolution_PlayerGroup[init_i] = PlayerGroupEmpty();
    }
}

// Function Declarations
void lib3_gf_CheckResolution (int lp_player);
void lib3_gf_PlayerResolutionUIResolutionScaleValue (int lp_player, bool lp_debug);

// Trigger Declarations
trigger lib3_gt_Waittrigger;

// Functions
void lib3_gf_CheckResolution (int lp_player) {
    // Variable Declarations
    int lv_timer;

    // Variable Initialization

    // Implementation
    lib3_gv_getResolution_MouseMove[lp_player][0] = 0;
    lib3_gv_getResolution_MouseMove[lp_player][1] = 0;
    lib3_gv_getResolution_CheckResolutionPass[lp_player] = false;
    PlayerGroupAdd(lib3_gv_getResolution_PlayerGroup[1], lp_player);
    CameraForceMouseRelative(lp_player, true);
    CameraForceMouseRelative(lp_player, false);
    if ((lib3_gv_getResolution_MouseMove[lp_player][0] > 8) && (lib3_gv_getResolution_MouseMove[lp_player][0] <= 1599) && (lib3_gv_getResolution_MouseMove[lp_player][1] > 8)) {
        PlayerGroupRemove(lib3_gv_getResolution_PlayerGroup[1], lp_player);
        PlayerGroupAdd(lib3_gv_getResolution_PlayerGroup[2], lp_player);
        DialogControlSetVisible(lib3_gv_getResolution_LimitMouseDialogButtons[4], PlayerGroupSingle(lp_player), true);
        DialogControlSetPosition(lib3_gv_getResolution_LimitMouseDialogButtons[4], PlayerGroupSingle(lp_player), c_anchorTopLeft, FixedToInt(((IntToFixed(lib3_gv_getResolution_MouseMove[lp_player][0]) / lib3_gv_getResolution_PlayerScaleValue[lp_player]) - 2.0)), FixedToInt(((IntToFixed(lib3_gv_getResolution_MouseMove[lp_player][1]) / lib3_gv_getResolution_PlayerScaleValue[lp_player]) - 2.0)));
        DialogControlSetSize(lib3_gv_getResolution_LimitMouseDialogButtons[4], PlayerGroupSingle(lp_player), 8, 8);
        DialogSetVisible(lib3_gv_getResolution_LimitMouseDialog, PlayerGroupSingle(lp_player), true);
    }
    else {
    }
    lib3_gv_getResolution_Player[1] = lp_player;
    TriggerExecute(lib3_gt_Waittrigger, false, false);
}

void lib3_gf_PlayerResolutionUIResolutionScaleValue (int lp_player, bool lp_debug) {
    int auto48A40877_ae;
    int auto48A40877_ai;

    // Variable Declarations
    int lv_loopCounter;

    // Variable Initialization

    // Implementation
    if ((lib3_gv_getResolution_FirstRun == true)) {
        lib3_gv_getResolution_FirstRun = false;
        DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
        lib3_gv_getResolution_LimitMouseDialog = DialogLastCreated();
        DialogSetFullscreen(lib3_gv_getResolution_LimitMouseDialog, true);
        DialogSetImageVisible(lib3_gv_getResolution_LimitMouseDialog, false);
        libNtve_gf_CreateDialogItemButton(lib3_gv_getResolution_LimitMouseDialog, 4096, 4096, c_anchorCenter, 2050, 0, StringExternal("Param/Value/lib_3_2FEA3BA7"), StringExternal("Param/Value/lib_3_3A3C0431"), "Assets\\Textures\\yellow.dds");
        lib3_gv_getResolution_LimitMouseDialogButtons[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib3_gv_getResolution_LimitMouseDialog, 4096, 4096, c_anchorCenter, -2050, 0, StringExternal("Param/Value/lib_3_0A1B7B39"), StringExternal("Param/Value/lib_3_8B12E3AD"), "Assets\\Textures\\yellow.dds");
        lib3_gv_getResolution_LimitMouseDialogButtons[1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib3_gv_getResolution_LimitMouseDialog, 4096, 4096, c_anchorCenter, 0, 2050, StringExternal("Param/Value/lib_3_47B5B67C"), StringExternal("Param/Value/lib_3_466D955B"), "Assets\\Textures\\yellow.dds");
        lib3_gv_getResolution_LimitMouseDialogButtons[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib3_gv_getResolution_LimitMouseDialog, 4096, 4096, c_anchorCenter, 0, -2068, StringExternal("Param/Value/lib_3_EDDF8A59"), StringExternal("Param/Value/lib_3_38EEBE9E"), "Assets\\Textures\\yellow.dds");
        lib3_gv_getResolution_LimitMouseDialogButtons[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib3_gv_getResolution_LimitMouseDialog, 8, 4, c_anchorCenter, 0, -6, StringExternal("Param/Value/lib_3_68C92A6A"), StringExternal("Param/Value/lib_3_3DAB7896"), "Assets\\Textures\\yellow.dds");
        lib3_gv_getResolution_LimitMouseDialogButtons[4] = DialogControlLastCreated();
        auto48A40877_ae = 4;
        auto48A40877_ai = 1;
        lv_loopCounter = 0;
        for ( ; ( (auto48A40877_ai >= 0 && lv_loopCounter <= auto48A40877_ae) || (auto48A40877_ai <= 0 && lv_loopCounter >= auto48A40877_ae) ) ; lv_loopCounter += auto48A40877_ai ) {
            libNtve_gf_SetDialogItemRenderPriority(lib3_gv_getResolution_LimitMouseDialogButtons[lv_loopCounter], 8192, PlayerGroupAll());
            DialogControlFadeTransparency(lib3_gv_getResolution_LimitMouseDialogButtons[lv_loopCounter], PlayerGroupAll(), 0.0, 100.0);
        }
        Wait(0.0625, c_timeGame);
    }
    else {
        DialogControlSetVisible(lib3_gv_getResolution_LimitMouseDialogButtons[0], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib3_gv_getResolution_LimitMouseDialogButtons[1], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib3_gv_getResolution_LimitMouseDialogButtons[2], PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib3_gv_getResolution_LimitMouseDialogButtons[3], PlayerGroupSingle(lp_player), true);
        DialogControlSetPosition(lib3_gv_getResolution_LimitMouseDialogButtons[4], PlayerGroupSingle(lp_player), c_anchorCenter, 0, -6);
        DialogControlSetSize(lib3_gv_getResolution_LimitMouseDialogButtons[4], PlayerGroupSingle(lp_player), 8, 4);
        DialogControlSetVisible(lib3_gv_getResolution_LimitMouseDialogButtons[4], PlayerGroupSingle(lp_player), true);
    }
    lib3_gv_getResolution_Debug = lp_debug;
    DialogSetVisible(lib3_gv_getResolution_LimitMouseDialog, PlayerGroupSingle(lp_player), true);
    CameraForceMouseRelative(lp_player, true);
    CameraLockInput(lp_player, true);
    PlayerGroupAdd(lib3_gv_getResolution_PlayerGroup[0], lp_player);
    lib3_gv_getResolution_Player[0] = lp_player;
    TriggerExecute(lib3_gt_Waittrigger, false, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Wait trigger
//--------------------------------------------------------------------------------------------------
bool lib3_gt_Waittrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(lib3_gv_getResolution_PlayerGroup[0], lib3_gv_getResolution_Player[0]) == true)) {
        lv_player = lib3_gv_getResolution_Player[0];
        Wait(1.0, c_timeGame);
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/lib_3_5961FB62"));
    }
    else {
        lv_player = lib3_gv_getResolution_Player[1];
        Wait(2.0, c_timeGame);
        if ((PlayerGroupHasPlayer(lib3_gv_getResolution_PlayerGroup[1], lv_player) == true)) {
            lib3_gf_CheckResolution(lv_player);
        }
        else {
            if ((PlayerGroupHasPlayer(lib3_gv_getResolution_PlayerGroup[2], lv_player) == true)) {
                PlayerGroupRemove(lib3_gv_getResolution_PlayerGroup[2], lv_player);
                if ((lib3_gv_getResolution_CheckResolutionPass[lv_player] == false)) {
                    lib3_gf_PlayerResolutionUIResolutionScaleValue(lv_player, lib3_gv_getResolution_Debug);
                    if ((lib3_gv_getResolution_Debug == true)) {
                        TriggerDebugOutput(1, (PlayerName(lv_player) + StringExternal("Param/Value/lib_3_8C261FEA")), true);
                    }
                    else {
                    }
                }
                else {
                    if ((lib3_gv_getResolution_Debug == true)) {
                        TriggerDebugOutput(1, (PlayerName(lv_player) + StringExternal("Param/Value/lib_3_45B88BAF")), true);
                    }
                    else {
                    }
                }
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib3_gt_Waittrigger_Init () {
    lib3_gt_Waittrigger = TriggerCreate("lib3_gt_Waittrigger_Func");
}

void lib3_InitTriggers () {
    lib3_gt_Waittrigger_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib3_InitLib_completed = false;

void lib3_InitLib () {
    if (lib3_InitLib_completed) {
        return;
    }

    lib3_InitVariables();
    lib3_InitTriggers();

    lib3_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib4_gf_StarcodeStartCode ();
void lib4_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue);
void lib4_gf_StarcodeSetCode (string lp_code);
void lib4_gf_StarcodeSetEncryptionAlphabet (string lp_string);
string lib4_gf_StarcodeGetEncryptionAlphabet ();
string lib4_gf_StarcodeGetCode ();
int lib4_gf_StarcodeGetIntegerValue (int lp_maximumValue);
string lib4_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key);
string lib4_gf_StarcodeCompressString (string lp_toCompress);
string lib4_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel);
string lib4_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel);
bool lib4_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel);
string lib4_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key);
string lib4_gf_StarcodeDecompressString (string lp_toDecompress);

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void lib4_InitCustomScript () {
}

// Functions
void lib4_gf_StarcodeStartCode () {
    // Implementation
        STARCODE_CurrentCode = "0";
}

void lib4_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void lib4_gf_StarcodeSetCode (string lp_code) {
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void lib4_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string lib4_gf_StarcodeGetEncryptionAlphabet () {
    // Implementation
    return STARCODE_Alphabet;
}

string lib4_gf_StarcodeGetCode () {
    // Implementation
    return STARCODE_CurrentCode;
}

int lib4_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string lib4_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string lib4_gf_StarcodeCompressString (string lp_toCompress) {
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string lib4_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string lib4_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool lib4_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string lib4_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string lib4_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib4_InitLib_completed = false;

void lib4_InitLib () {
    if (lib4_InitLib_completed) {
        return;
    }

    lib4_InitCustomScript();

    lib4_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library: HL-Inventory
//--------------------------------------------------------------------------------------------------
// Structures
struct lib2_gs_Item {
    int lv_width;
    int lv_height;
    string lv_image;
    string lv_item;
};

struct lib2_gs_Inventory {
    fixed[21][21] lv_charges;
    int lv_sizeX;
    int lv_sizeY;
    int[21][21] lv_slots;
    int[21][21] lv_buttons;
    int[21][21] lv_labels;
    bool[21][21] lv_usableSlots;
    int lv_loopX;
    int lv_loopY;
    int lv_screen;
    string[21][21] lv_image;
    string[21][21] lv_items;
    unit lv_linkedUnit;
    string lv_inventoryAbility;
};

struct lib2_gs_Equipment {
    int lv_width;
    int lv_height;
    int[21] lv_dIButton;
    int[21] lv_dIImage;
    int lv_screen;
    string[21] lv_image;
    unit[21] lv_items;
    string[21] lv_acceptedItemClasses;
    int lv_slotCounter;
    unit lv_linkedUnit;
    string lv_inventoryAbility;
};

struct lib2_gs_DraggedDialog {
    int lv_dialog;
    int lv_name;
    int lv_info;
    int lv_class;
};

// Variables
bool[25] lib2_gv_doubleclick;
bool[25] lib2_gv_inventoryEquipOrUse;
int lib2_gv_itemClassNameStart;
bool lib2_gv_itemClassNameUsesWord;
lib2_gs_Inventory[25] lib2_gv_inventories;
lib2_gs_Equipment[25] lib2_gv_equipments;
lib2_gs_Item[25] lib2_gv_draggedItem;
lib2_gs_DraggedDialog[25] lib2_gv_draggedItemDialog;
int lib2_gv_lastCreatedSlotButton;
int lib2_gv_lastCreatedSlotLabel;
int[16] lib2_gv_selectedhangarinventory;

void lib2_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;

    lib2_gv_itemClassNameStart = 4;
    for (init_i = 0; init_i <= 24; init_i += 1) {
        for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
                lib2_gv_inventories[init_i].lv_slots[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
                lib2_gv_inventories[init_i].lv_buttons[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
                lib2_gv_inventories[init_i].lv_labels[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        lib2_gv_inventories[init_i].lv_screen = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
            lib2_gv_equipments[init_i].lv_dIButton[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
            lib2_gv_equipments[init_i].lv_dIImage[init_i1] = c_invalidDialogControlId;
        }
        lib2_gv_equipments[init_i].lv_screen = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        lib2_gv_draggedItemDialog[init_i].lv_dialog = c_invalidDialogId;
        lib2_gv_draggedItemDialog[init_i].lv_name = c_invalidDialogControlId;
        lib2_gv_draggedItemDialog[init_i].lv_info = c_invalidDialogControlId;
        lib2_gv_draggedItemDialog[init_i].lv_class = c_invalidDialogControlId;
    }
    lib2_gv_lastCreatedSlotButton = c_invalidDialogControlId;
    lib2_gv_lastCreatedSlotLabel = c_invalidDialogControlId;
}

// Function Declarations
void lib2_gf_CreateInventorySetup (int lp_inventory, int lp_x, int lp_y, unit lp_linkedUnit, string lp_inventoryAbility);
void lib2_gf_CreateEquipmentSetup (int lp_equipment, int lp_width, int lp_height, string lp_backgroundImage, unit lp_linkedUnit, string lp_inventoryAbility);
void lib2_gf_AddEquipmentSlot (int lp_equipment, int lp_x, int lp_y, int lp_width, int lp_height, string lp_itemClass);
void lib2_gf_ShowHideEquipment (bool lp_showHide, int lp_equipmentId, int lp_player);
void lib2_gf_ShowHideDraggedDialog (bool lp_showHide, int lp_draggedId, int lp_player);
void lib2_gf_UpdateDraggedItemPanel (int lp_draggedItemId);
int lib2_gf_EmptyInventorySlot (int lp_dialog, int lp_x, int lp_y);
abilcmd lib2_gf_AbilityCommand (string lp_ability, int lp_index);
bool lib2_gf_AddItemToInventory (int lp_inventoryId, int lp_width, int lp_height, string lp_image, string lp_item, fixed lp_charges);
bool lib2_gf_ItemFitsinInventoryatPosition (int lp_inventory, int lp_positionX, int lp_positionY, int lp_itemWidth, int lp_itemHeight);
bool lib2_gf_PlaceItematPosition (int lp_inventory, int lp_positionX, int lp_positionY, int lp_itemWidth, int lp_itemHeight, string lp_image, string lp_item, fixed lp_charges);
string lib2_gf_RemoveItemfromPosition (int lp_inventory, int lp_positionX, int lp_positionY, int lp_itemWidth, int lp_itemHeight);
void lib2_gf_DisableEnableInventory (int lp_inventoryID, bool lp_desaturate);
int lib2_gf_DetermineCorrectDialogItem (int lp_inventory, int lp_x, int lp_y);
int lib2_gf_GetWidthHeightFromUnit (int lp_widthHeight, string lp_unit);
string lib2_gf_GetItemClass (string lp_unit);
string lib2_gf_GetImageFromUnit (string lp_unit);
string lib2_gf_GetItemTooltip (string lp_unit);
string lib2_gf_GetItemEffect (unit lp_unit);
int lib2_gf_GetInventoryDialog (int lp_inventoryId);
int lib2_gf_GetEquipmentDialog (int lp_equipmentId);
int lib2_gf_GetDraggedItemDialog (int lp_draggedItemId);
string lib2_gf_GetInventoryAbility (int lp_inventory);

// Functions
void lib2_gf_CreateInventorySetup (int lp_inventory, int lp_x, int lp_y, unit lp_linkedUnit, string lp_inventoryAbility) {
    int auto471B5C16_ae;
    int auto471B5C16_ai;
    int auto66C84F3E_ae;
    int auto66C84F3E_ai;

    // Variable Declarations
    int lv_tempX;
    int lv_tempY;
    trigger lv_trigger;

    // Variable Initialization

    // Implementation
    DialogCreate(300, 200, c_anchorCenter, 0, 0, true);
    lib2_gv_draggedItemDialog[lp_inventory].lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 25, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/lib_2_37D79834"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lib2_gv_draggedItemDialog[lp_inventory].lv_name = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 25, c_anchorTopRight, 25, 50, StringExternal("Param/Value/lib_2_60DF6927"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lib2_gv_draggedItemDialog[lp_inventory].lv_class = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 100, c_anchorTopRight, 25, 75, StringExternal("Param/Value/lib_2_F8320B39"), ColorWithAlpha(0,0,0,0), false, 0.0);
    lib2_gv_draggedItemDialog[lp_inventory].lv_info = DialogControlLastCreated();
    DialogCreate((50 * (lp_x + 2)), (50 * (lp_y + 2)), c_anchorTopLeft, 500, 470, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (50 * (lp_x + 1)), (50 * (lp_y + 1)), c_anchorTopLeft, 25, 25, StringExternal("Param/Value/lib_2_E27B48C7"), "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetImageVisible(DialogLastCreated(), false);
    lib2_gv_inventories[lp_inventory].lv_sizeY = lp_y;
    lib2_gv_inventories[lp_inventory].lv_sizeX = lp_x;
    lib2_gv_inventories[lp_inventory].lv_screen = DialogLastCreated();
    lib2_gv_inventories[lp_inventory].lv_linkedUnit = lp_linkedUnit;
    lib2_gv_inventories[lp_inventory].lv_inventoryAbility = lp_inventoryAbility;
    lp_x -= 1;
    lp_y -= 1;
    auto471B5C16_ae = lp_x;
    auto471B5C16_ai = 1;
    lv_tempX = 0;
    for ( ; ( (auto471B5C16_ai >= 0 && lv_tempX <= auto471B5C16_ae) || (auto471B5C16_ai <= 0 && lv_tempX >= auto471B5C16_ae) ) ; lv_tempX += auto471B5C16_ai ) {
        auto66C84F3E_ae = lp_y;
        auto66C84F3E_ai = 1;
        lv_tempY = 0;
        for ( ; ( (auto66C84F3E_ai >= 0 && lv_tempY <= auto66C84F3E_ae) || (auto66C84F3E_ai <= 0 && lv_tempY >= auto66C84F3E_ae) ) ; lv_tempY += auto66C84F3E_ai ) {
            lib2_gv_inventories[lp_inventory].lv_usableSlots[lv_tempX][lv_tempY] = true;
            lib2_gv_inventories[lp_inventory].lv_slots[lv_tempX][lv_tempY] = lib2_gf_EmptyInventorySlot(DialogLastCreated(), lv_tempX, lv_tempY);
            lib2_gv_inventories[lp_inventory].lv_buttons[lv_tempX][lv_tempY] = lib2_gv_lastCreatedSlotButton;
            lib2_gv_inventories[lp_inventory].lv_labels[lv_tempX][lv_tempY] = lib2_gv_lastCreatedSlotLabel;
        }
    }
}

void lib2_gf_CreateEquipmentSetup (int lp_equipment, int lp_width, int lp_height, string lp_backgroundImage, unit lp_linkedUnit, string lp_inventoryAbility) {
    int init_i1;
    int init_j1;

    // Variable Declarations
    int lv_tempX;
    int lv_tempY;
    lib2_gs_Inventory lv_inventory;

    // Variable Initialization
    lv_tempY = FixedToInt(IntToFixed(0));
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
            lv_inventory.lv_slots[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
            lv_inventory.lv_buttons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 20; init_j1 += 1) {
            lv_inventory.lv_labels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    lv_inventory.lv_screen = c_invalidDialogId;

    // Implementation
    DialogCreate(lp_width, lp_height, c_anchorLeft, 0, 0, true);
    if ((lp_backgroundImage != null)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lp_width - 40), (lp_height - 40), c_anchorTopLeft, 25, 25, StringExternal("Param/Value/lib_2_CBC012C8"), lp_backgroundImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else {
    }
    lib2_gv_equipments[lp_equipment].lv_height = lp_height;
    lib2_gv_equipments[lp_equipment].lv_width = lp_width;
    lib2_gv_equipments[lp_equipment].lv_screen = DialogLastCreated();
    lib2_gv_equipments[lp_equipment].lv_linkedUnit = lp_linkedUnit;
    lib2_gv_equipments[lp_equipment].lv_inventoryAbility = lp_inventoryAbility;
}

void lib2_gf_AddEquipmentSlot (int lp_equipment, int lp_x, int lp_y, int lp_width, int lp_height, string lp_itemClass) {
    // Variable Declarations
    int lv_slotCounter;

    // Variable Initialization
    lv_slotCounter = lib2_gv_equipments[lp_equipment].lv_slotCounter;

    // Implementation
    lib2_gv_equipments[lp_equipment].lv_acceptedItemClasses[lv_slotCounter] = lp_itemClass;
    libNtve_gf_CreateDialogItemButton(lib2_gv_equipments[lp_equipment].lv_screen, lp_width, lp_height, c_anchorTopLeft, lp_x, lp_y, StringExternal("Param/Value/lib_2_4F73147D"), StringExternal("Param/Value/lib_2_B937874E"), "transparent.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "transparent.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(lv_slotCounter), PlayerGroupAll());
    lib2_gv_equipments[lp_equipment].lv_dIButton[lv_slotCounter] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lib2_gv_equipments[lp_equipment].lv_screen, lp_width, lp_height, c_anchorTopLeft, lp_x, lp_y, StringExternal("Param/Value/lib_2_42C5CFD9"), "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    lib2_gv_equipments[lp_equipment].lv_dIImage[lv_slotCounter] = DialogControlLastCreated();
    lib2_gv_equipments[lp_equipment].lv_slotCounter = (lv_slotCounter + 1);
}

void lib2_gf_ShowHideEquipment (bool lp_showHide, int lp_equipmentId, int lp_player) {
    // Implementation
    DialogSetVisible(lib2_gv_equipments[lp_equipmentId].lv_screen, PlayerGroupSingle(lp_player), lp_showHide);
}

void lib2_gf_ShowHideDraggedDialog (bool lp_showHide, int lp_draggedId, int lp_player) {
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_2_FA2CF5DA"), true);
    lib2_gf_UpdateDraggedItemPanel(lp_draggedId);
    DialogSetVisible(lib2_gv_draggedItemDialog[lp_draggedId].lv_dialog, PlayerGroupSingle(lp_player), false);
}

void lib2_gf_UpdateDraggedItemPanel (int lp_draggedItemId) {
    // Variable Declarations
    string lv_unit;
    string lv_temp;

    // Variable Initialization
    lv_unit = lib2_gv_draggedItem[lp_draggedItemId].lv_item;
    lv_temp = "";

    // Implementation
    if ((lv_unit == null)) {
        libNtve_gf_SetDialogItemText(lib2_gv_draggedItemDialog[lp_draggedItemId].lv_class, StringExternal("Param/Value/lib_2_4D39B2FD"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib2_gv_draggedItemDialog[lp_draggedItemId].lv_info, StringExternal("Param/Value/lib_2_B78258C1"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(lib2_gv_draggedItemDialog[lp_draggedItemId].lv_name, StringExternal("Param/Value/lib_2_F34D183F"), PlayerGroupAll());
    }
    else {
        lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (lv_unit), "Item", c_playerAny);
        lv_temp = CatalogFieldValueGet(c_gameCatalogItem, lv_temp, "Class", c_playerAny);
        libNtve_gf_SetDialogItemText(lib2_gv_draggedItemDialog[lp_draggedItemId].lv_info, StringExternal(lib2_gf_GetItemTooltip(lv_unit)), PlayerGroupAll());
        lv_temp = StringSub(lv_temp, lib2_gv_itemClassNameStart, StringLength(lv_temp));
        libNtve_gf_SetDialogItemText(lib2_gv_draggedItemDialog[lp_draggedItemId].lv_class, StringToText(lv_temp), PlayerGroupAll());
        lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (lv_unit), "Name", c_playerAny);
        libNtve_gf_SetDialogItemText(lib2_gv_draggedItemDialog[lp_draggedItemId].lv_name, StringExternal(lv_temp), PlayerGroupAll());
    }
}

int lib2_gf_EmptyInventorySlot (int lp_dialog, int lp_x, int lp_y) {
    // Variable Declarations
    int lv_temp;

    // Variable Initialization
    lv_temp = c_invalidDialogControlId;

    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, 50, 50, c_anchorTopLeft, ((lp_x + 1) * 50), ((lp_y + 1) * 50), StringExternal("Param/Value/lib_2_9691E410"), StringExternal("Param/Value/lib_2_87824140"), "transparent.dds");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lib2_gv_lastCreatedSlotButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(lp_dialog, 50, 50, c_anchorTopLeft, (50 * (lp_x + 1)), (50 * (lp_y + 1)), StringExternal("Param/Value/lib_2_C66FE573"), "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_temp = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(lp_dialog, 50, 50, c_anchorTopLeft, (50 * (lp_x + 1)), (50 * (lp_y + 1)), StringExternal("Param/Value/lib_2_024011A3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lib2_gv_lastCreatedSlotLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeNormal, PlayerGroupAll());
    return lv_temp;
}

abilcmd lib2_gf_AbilityCommand (string lp_ability, int lp_index) {
    // Implementation
    return AbilityCommand(lp_ability, lp_index);
}

bool lib2_gf_AddItemToInventory (int lp_inventoryId, int lp_width, int lp_height, string lp_image, string lp_item, fixed lp_charges) {
    int auto24B899DF_ae;
    int auto24B899DF_ai;
    int autoAC1CA8C2_ae;
    int autoAC1CA8C2_ai;

    // Variable Declarations
    int lv_loopX;
    int lv_loopY;
    int lv_tempX;
    int lv_tempY;

    // Variable Initialization

    // Implementation
    lp_width = (lp_width - 1);
    lp_height = (lp_height - 1);
    auto24B899DF_ae = lib2_gv_inventories[lp_inventoryId].lv_sizeX;
    auto24B899DF_ai = 1;
    lv_loopX = 1;
    for ( ; ( (auto24B899DF_ai >= 0 && lv_loopX <= auto24B899DF_ae) || (auto24B899DF_ai <= 0 && lv_loopX >= auto24B899DF_ae) ) ; lv_loopX += auto24B899DF_ai ) {
        autoAC1CA8C2_ae = lib2_gv_inventories[lp_inventoryId].lv_sizeY;
        autoAC1CA8C2_ai = 1;
        lv_loopY = 1;
        for ( ; ( (autoAC1CA8C2_ai >= 0 && lv_loopY <= autoAC1CA8C2_ae) || (autoAC1CA8C2_ai <= 0 && lv_loopY >= autoAC1CA8C2_ae) ) ; lv_loopY += autoAC1CA8C2_ai ) {
            lv_tempX = (lv_loopX - 1);
            lv_tempY = (lv_loopY - 1);
            if ((lib2_gv_inventories[lp_inventoryId].lv_usableSlots[lv_tempX][lv_tempY] == true) && (lib2_gf_ItemFitsinInventoryatPosition(lp_inventoryId, lv_tempX, lv_tempY, lp_width, lp_height) == true)) {
                if ((lib2_gf_PlaceItematPosition(lp_inventoryId, lv_tempX, lv_tempY, lp_width, lp_height, lp_image, lp_item, lp_charges) == true)) {
                    lib2_gv_inventories[lp_inventoryId].lv_charges[lv_tempX][lv_tempY] = lp_charges;
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
            }
        }
    }
    return false;
}

bool lib2_gf_ItemFitsinInventoryatPosition (int lp_inventory, int lp_positionX, int lp_positionY, int lp_itemWidth, int lp_itemHeight) {
    int auto149ECED0_ae;
    int auto149ECED0_ai;
    int autoCF502C28_ae;
    int autoCF502C28_ai;

    // Variable Declarations
    int lv_tempX;
    int lv_tempY;

    // Variable Initialization

    // Implementation
    auto149ECED0_ae = (lp_positionX + lp_itemWidth);
    auto149ECED0_ai = 1;
    lv_tempX = lp_positionX;
    for ( ; ( (auto149ECED0_ai >= 0 && lv_tempX <= auto149ECED0_ae) || (auto149ECED0_ai <= 0 && lv_tempX >= auto149ECED0_ae) ) ; lv_tempX += auto149ECED0_ai ) {
        autoCF502C28_ae = (lp_positionY + lp_itemHeight);
        autoCF502C28_ai = 1;
        lv_tempY = lp_positionY;
        for ( ; ( (autoCF502C28_ai >= 0 && lv_tempY <= autoCF502C28_ae) || (autoCF502C28_ai <= 0 && lv_tempY >= autoCF502C28_ae) ) ; lv_tempY += autoCF502C28_ai ) {
            if ((lib2_gv_inventories[lp_inventory].lv_usableSlots[lv_tempX][lv_tempY] == false)) {
                return false;
            }
            else {
            }
        }
    }
    return true;
}

bool lib2_gf_PlaceItematPosition (int lp_inventory, int lp_positionX, int lp_positionY, int lp_itemWidth, int lp_itemHeight, string lp_image, string lp_item, fixed lp_charges) {
    int auto1B73FEE1_ae;
    int auto1B73FEE1_ai;
    int auto1A1A13AC_ae;
    int auto1A1A13AC_ai;

    // Variable Declarations
    int lv_tempX;
    int lv_tempY;
    fixed lv_charges;

    // Variable Initialization

    // Implementation
    auto1B73FEE1_ae = (lp_positionX + lp_itemWidth);
    auto1B73FEE1_ai = 1;
    lv_tempX = lp_positionX;
    for ( ; ( (auto1B73FEE1_ai >= 0 && lv_tempX <= auto1B73FEE1_ae) || (auto1B73FEE1_ai <= 0 && lv_tempX >= auto1B73FEE1_ae) ) ; lv_tempX += auto1B73FEE1_ai ) {
        auto1A1A13AC_ae = (lp_positionY + lp_itemHeight);
        auto1A1A13AC_ai = 1;
        lv_tempY = lp_positionY;
        for ( ; ( (auto1A1A13AC_ai >= 0 && lv_tempY <= auto1A1A13AC_ae) || (auto1A1A13AC_ai <= 0 && lv_tempY >= auto1A1A13AC_ae) ) ; lv_tempY += auto1A1A13AC_ai ) {
            lib2_gv_inventories[lp_inventory].lv_usableSlots[lv_tempX][lv_tempY] = false;
            if (((lv_tempX != lp_positionX) || (lv_tempY != lp_positionY))) {
                DialogControlSetVisible(lib2_gv_inventories[lp_inventory].lv_slots[lv_tempX][lv_tempY], PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemTooltip(lib2_gv_inventories[lp_inventory].lv_buttons[lv_tempX][lv_tempY], StringExternal(lib2_gf_GetItemTooltip(lp_item)), PlayerGroupAll());
            }
            else {
            }
        }
    }
    lib2_gv_inventories[lp_inventory].lv_image[lp_positionX][lp_positionY] = lp_image;
    lib2_gv_inventories[lp_inventory].lv_items[lp_positionX][lp_positionY] = lp_item;
    lib2_gv_inventories[lp_inventory].lv_items[lp_positionX][lp_positionY] = lp_item;
    lib2_gv_inventories[lp_inventory].lv_charges[lp_positionX][lp_positionY] = lp_charges;
    libNtve_gf_SetDialogItemTooltip(lib2_gv_inventories[lp_inventory].lv_buttons[lp_positionX][lp_positionY], StringExternal(lib2_gf_GetItemTooltip(lp_item)), PlayerGroupAll());
    if ((lib2_gv_inventories[lp_inventory].lv_charges[lp_positionX][lp_positionY] != 0.0)) {
        libNtve_gf_SetDialogItemText(lib2_gv_inventories[lp_inventory].lv_labels[lp_positionX][lp_positionY], FixedToText(lib2_gv_inventories[lp_inventory].lv_charges[lp_positionX][lp_positionY], c_fixedPrecisionAny), PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_SetDialogItemImage(lib2_gv_inventories[lp_inventory].lv_slots[lp_positionX][lp_positionY], lp_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lib2_gv_inventories[lp_inventory].lv_slots[lp_positionX][lp_positionY], lp_image, PlayerGroupAll());
    DialogControlSetSize(lib2_gv_inventories[lp_inventory].lv_slots[lp_positionX][lp_positionY], PlayerGroupAll(), ((lp_itemWidth + 1) * 50), ((lp_itemHeight + 1) * 50));
    return true;
}

string lib2_gf_RemoveItemfromPosition (int lp_inventory, int lp_positionX, int lp_positionY, int lp_itemWidth, int lp_itemHeight) {
    int auto2F17B6D6_ae;
    int auto2F17B6D6_ai;
    int autoC43A3696_ae;
    int autoC43A3696_ai;

    // Variable Declarations
    string lv_item;
    int lv_tempX;
    int lv_tempY;
    bool lv_showscreen;

    // Variable Initialization

    // Implementation
    auto2F17B6D6_ae = (lp_positionX + (lp_itemWidth - 1));
    auto2F17B6D6_ai = 1;
    lv_tempX = lp_positionX;
    for ( ; ( (auto2F17B6D6_ai >= 0 && lv_tempX <= auto2F17B6D6_ae) || (auto2F17B6D6_ai <= 0 && lv_tempX >= auto2F17B6D6_ae) ) ; lv_tempX += auto2F17B6D6_ai ) {
        autoC43A3696_ae = (lp_positionY + (lp_itemHeight - 1));
        autoC43A3696_ai = 1;
        lv_tempY = lp_positionY;
        for ( ; ( (autoC43A3696_ai >= 0 && lv_tempY <= autoC43A3696_ae) || (autoC43A3696_ai <= 0 && lv_tempY >= autoC43A3696_ae) ) ; lv_tempY += autoC43A3696_ai ) {
            lib2_gv_inventories[lp_inventory].lv_usableSlots[lv_tempX][lv_tempY] = true;
            if ((lib2_gv_inventories[lp_inventory].lv_buttons[lv_tempX][lv_tempY] != c_invalidDialogControlId)) {
                libNtve_gf_SetDialogItemText(lib2_gv_inventories[lp_inventory].lv_labels[lv_tempX][lv_tempY], StringExternal("Param/Value/lib_2_7ADB452C"), PlayerGroupAll());
                if (((lv_tempX != lp_positionX) || (lv_tempY != lp_positionY))) {
                    DialogControlSetVisible(lib2_gv_inventories[lp_inventory].lv_slots[lv_tempX][lv_tempY], PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemTooltip(lib2_gv_inventories[lp_inventory].lv_buttons[lv_tempX][lv_tempY], StringExternal("Param/Value/lib_2_5EE91B0F"), PlayerGroupAll());
                }
                else {
                }
            }
            else {
            }
        }
    }
    lib2_gv_inventories[lp_inventory].lv_image[lp_positionX][lp_positionY] = null;
    if ((DialogIsVisible(lib2_gv_inventories[lp_inventory].lv_screen, EventPlayer()) == true)) {
        lv_showscreen = true;
    }
    else {
    }
    libNtve_gf_SetDialogItemImage(lib2_gv_inventories[lp_inventory].lv_slots[lp_positionX][lp_positionY], "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(lib2_gv_inventories[lp_inventory].lv_slots[lp_positionX][lp_positionY], "Assets\\Textures\\btn-border-queue-trainingslot01-disabled.dds", PlayerGroupAll());
    DialogControlSetSize(lib2_gv_inventories[lp_inventory].lv_slots[lp_positionX][lp_positionY], PlayerGroupAll(), 50, 50);
    libNtve_gf_SetDialogItemTooltip(lib2_gv_inventories[lp_inventory].lv_buttons[lp_positionX][lp_positionY], StringExternal("Param/Value/lib_2_4B89CA29"), PlayerGroupAll());
    if ((lv_showscreen == true)) {
        DialogSetVisible(lib2_gv_inventories[lp_inventory].lv_screen, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
    }
    lv_item = lib2_gv_inventories[lp_inventory].lv_items[lp_positionX][lp_positionY];
    lib2_gv_inventories[lp_inventory].lv_items[lp_positionX][lp_positionY] = null;
    return lv_item;
}

void lib2_gf_DisableEnableInventory (int lp_inventoryID, bool lp_desaturate) {
    int autoFF7EEE65_ae;
    int autoFF7EEE65_ai;
    int autoA2452BE5_ae;
    int autoA2452BE5_ai;

    // Variable Declarations
    int lv_loopX;
    int lv_loopY;

    // Variable Initialization

    // Implementation
    autoFF7EEE65_ae = lib2_gv_inventories[lp_inventoryID].lv_sizeX;
    autoFF7EEE65_ai = 1;
    lv_loopX = 0;
    for ( ; ( (autoFF7EEE65_ai >= 0 && lv_loopX <= autoFF7EEE65_ae) || (autoFF7EEE65_ai <= 0 && lv_loopX >= autoFF7EEE65_ae) ) ; lv_loopX += autoFF7EEE65_ai ) {
        autoA2452BE5_ae = lib2_gv_inventories[lp_inventoryID].lv_sizeY;
        autoA2452BE5_ai = 1;
        lv_loopY = 0;
        for ( ; ( (autoA2452BE5_ai >= 0 && lv_loopY <= autoA2452BE5_ae) || (autoA2452BE5_ai <= 0 && lv_loopY >= autoA2452BE5_ae) ) ; lv_loopY += autoA2452BE5_ai ) {
            if ((lib2_gv_inventories[lp_inventoryID].lv_slots[lv_loopX][lv_loopY] != c_invalidDialogControlId)) {
                libNtve_gf_SetDialogItemDesaturated(lib2_gv_inventories[lp_inventoryID].lv_slots[lv_loopX][lv_loopY], lp_desaturate, PlayerGroupAll());
            }
            else {
            }
        }
    }
}

int lib2_gf_DetermineCorrectDialogItem (int lp_inventory, int lp_x, int lp_y) {
    int auto991FCFDA_ae;
    int auto991FCFDA_ai;
    int auto45622238_ae;
    int auto45622238_ai;

    // Variable Declarations
    int lv_checkX;
    int lv_checkY;
    int lv_checkWidth;
    int lv_checkHeight;
    int lv_tempX;
    int lv_tempY;

    // Variable Initialization

    // Implementation
    lv_tempX = lp_x;
    while ((lv_tempX >= 0)) {
        lv_tempY = lp_y;
        while ((lv_tempY >= 0)) {
            if ((lib2_gv_inventories[lp_inventory].lv_usableSlots[lv_tempX][lv_tempY] == false) && (lib2_gv_inventories[lp_inventory].lv_image[lv_tempX][lv_tempY] != null)) {
                lv_checkWidth = (DialogControlGetWidth(lib2_gv_inventories[lp_inventory].lv_slots[lv_tempX][lv_tempY], lp_inventory) / 50);
                lv_checkHeight = (DialogControlGetHeight(lib2_gv_inventories[lp_inventory].lv_slots[lv_tempX][lv_tempY], lp_inventory) / 50);
                lv_checkWidth -= 1;
                lv_checkHeight -= 1;
                auto991FCFDA_ae = (lv_tempX + lv_checkWidth);
                auto991FCFDA_ai = 1;
                lv_checkX = lv_tempX;
                for ( ; ( (auto991FCFDA_ai >= 0 && lv_checkX <= auto991FCFDA_ae) || (auto991FCFDA_ai <= 0 && lv_checkX >= auto991FCFDA_ae) ) ; lv_checkX += auto991FCFDA_ai ) {
                    auto45622238_ae = (lv_tempY + lv_checkHeight);
                    auto45622238_ai = 1;
                    lv_checkY = lv_tempY;
                    for ( ; ( (auto45622238_ai >= 0 && lv_checkY <= auto45622238_ae) || (auto45622238_ai <= 0 && lv_checkY >= auto45622238_ae) ) ; lv_checkY += auto45622238_ai ) {
                        if ((lv_checkX == lp_x) && (lv_checkY == lp_y)) {
                            return lib2_gv_inventories[lp_inventory].lv_slots[lv_tempX][lv_tempY];
                        }
                        else {
                        }
                    }
                }
            }
            else {
            }
            lv_tempY -= 1;
        }
        lv_tempX -= 1;
    }
    return lib2_gv_inventories[lp_inventory].lv_slots[lp_x][lp_y];
}

int lib2_gf_GetWidthHeightFromUnit (int lp_widthHeight, string lp_unit) {
    // Variable Declarations
    string lv_temp;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (lp_unit), "Item", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogItem, lv_temp, "Class", c_playerAny);
    if ((lp_widthHeight == 0)) {
        lv_temp = StringSub(lv_temp, 1, 1);
    }
    else {
        lv_temp = StringSub(lv_temp, 3, 3);
    }
    return StringToInt(lv_temp);
}

string lib2_gf_GetItemClass (string lp_unit) {
    // Variable Declarations
    string lv_temp;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (lp_unit), "Item", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogItem, lv_temp, "Class", c_playerAny);
    return lv_temp;
}

string lib2_gf_GetImageFromUnit (string lp_unit) {
    // Variable Declarations
    string lv_temp;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (lp_unit), "Item", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogItem, lv_temp, "Face", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogButton, lv_temp, "Icon", c_playerAny);
    return lv_temp;
}

string lib2_gf_GetItemTooltip (string lp_unit) {
    // Variable Declarations
    string lv_temp;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (lp_unit), "Item", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogItem, lv_temp, "Face", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogButton, lv_temp, "Tooltip", c_playerAny);
    return lv_temp;
}

string lib2_gf_GetItemEffect (unit lp_unit) {
    // Variable Declarations
    string lv_temp;

    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lp_unit)), "Item", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogItem, lv_temp, "Effect.Effect", c_playerAny);
    lv_temp = CatalogFieldValueGet(c_gameCatalogEffect, lv_temp, "parent", c_playerAny);
    return lv_temp;
}

int lib2_gf_GetInventoryDialog (int lp_inventoryId) {
    // Implementation
    return lib2_gv_inventories[lp_inventoryId].lv_screen;
}

int lib2_gf_GetEquipmentDialog (int lp_equipmentId) {
    // Implementation
    return lib2_gv_equipments[lp_equipmentId].lv_screen;
}

int lib2_gf_GetDraggedItemDialog (int lp_draggedItemId) {
    // Implementation
    return lib2_gv_draggedItemDialog[lp_draggedItemId].lv_dialog;
}

string lib2_gf_GetInventoryAbility (int lp_inventory) {
    // Implementation
    return lib2_gv_inventories[lp_inventory].lv_inventoryAbility;
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;

void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }

    lib2_InitVariables();

    lib2_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library: Item Utility Library
//--------------------------------------------------------------------------------------------------
// Function Declarations
order lib1_gf_OrderUseItemTargetingRelativePoint (abilcmd lp_cmd, unit lp_item, point lp_tgt);
order lib1_gf_OrderUseItemTargetingPoint (abilcmd lp_cmd, unit lp_item, point lp_tgt);
order lib1_gf_OrderUseItemTargetingUnit (abilcmd lp_cmd, unit lp_item, unit lp_tgt);
order lib1_gf_OrderUseItemInstant (abilcmd lp_cmd, unit lp_item);
unitgroup lib1_gf_UnitsInGroupOfType (unitgroup lp_group, string lp_type);
string lib1_gf_ItemTypeChargeLink (string lp_itemId);
fixed lib1_gf_ItemTypeMaxCharges (string lp_itemId);
void lib1_gf_ItemSetChargesRemaining (unit lp_tgt, fixed lp_charges);
void lib1_gf_ItemAddCharges (unit lp_item, fixed lp_numCharges);
void lib1_gf_ItemRemoveCharges (unit lp_item, fixed lp_numCharges);
int lib1_gf_InventoryCountItemsOfType (unit lp_tgt, string lp_type);
unitgroup lib1_gf_InventoryGetItemsOfType (unit lp_tgt, string lp_type);
bool lib1_gf_InventoryHasItemOfType (unit lp_tgt, string lp_type);
unit lib1_gf_InventoryGetRandomItemOfType (unit lp_tgt, string lp_type);
fixed lib1_gf_ItemGetChargesUsed (unit lp_tgt);
fixed lib1_gf_ItemGetChargesRemaining (unit lp_tgt);
fixed lib1_gf_InventoryTotalChargesOfItemType (unit lp_tgt, string lp_type);
void lib1_gf_InventoryRemoveItemChargesOfType (unit lp_tgt, string lp_type, fixed lp_numCharges);
void lib1_gf_InventoryStackItemsOfType (unit lp_tgt, string lp_type);

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Custom Script
//--------------------------------------------------------------------------------------------------
unitgroup UnitsInGroupOfType(unitgroup group, string type)
{
    unitgroup matchingUnits = UnitGroupEmpty();
    int numUnits = UnitGroupCount(group, c_unitCountAll);
    unit curUnit;
    int i = 1;
 
    while(i <= numUnits)
    {
        curUnit = UnitGroupUnit(group, i);
        if(UnitGetType(curUnit) == type)
        {
            UnitGroupAdd(matchingUnits, curUnit);
        }
        i += 1;
    }
 
    return matchingUnits;
}
 
unitgroup InventoryGetItemsOfType(unit tgt, string type)
{
    return UnitsInGroupOfType(UnitInventoryGroup(tgt), type);
}
 
int InventoryCountItemsOfType(unit tgt, string type)
{
    return UnitGroupCount(InventoryGetItemsOfType(tgt, type), c_unitCountAll);
}
 
bool InventoryHasItemOfType(unit tgt, string type)
{
    return InventoryCountItemsOfType(tgt, type) > 0;
}
 
unit InventoryGetRandomItemOfType(unit tgt, string type)
{
    unitgroup items = InventoryGetItemsOfType(tgt, type);
 
    if(UnitGroupCount(items, c_unitCountAll) <= 0)
    {
        return null;
    }
 
    return UnitGroupUnit(items, 0);
}
 
string ItemTypeChargeLink(string itemId)
{
    string itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, itemId, "Item", -1);
    return CatalogFieldValueGet(c_gameCatalogItem, itemLinkId, "EffectCost.Charge.Link", -1);
}
 
fixed ItemTypeMaxCharges(string itemId)
{
    string itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, itemId, "Item", -1);
    return StringToFixed(CatalogFieldValueGet(c_gameCatalogItem, itemLinkId, "EffectCost.Charge.CountMax", -1));
}
 
fixed ItemGetChargesUsed(unit tgt)
{
    string chargeLinkName = ItemTypeChargeLink(UnitGetType(tgt));
    return UnitGetChargeUsed(tgt, chargeLinkName);
}
 
fixed ItemGetChargesRemaining(unit tgt)
{
    string itemId = UnitGetType(tgt);
    string chargeLinkName = ItemTypeChargeLink(itemId);
    return ItemTypeMaxCharges(itemId) - UnitGetChargeUsed(tgt, chargeLinkName);
}
 
void ItemRemoveCharges(unit tgt, fixed amnt)
{
    string itemId = UnitGetType(tgt);
    string chargeLinkName = ItemTypeChargeLink(itemId);
 
    UnitAddChargeUsed(tgt, chargeLinkName, amnt);
 
    if(ItemGetChargesRemaining(tgt) <= 0)
    {
        UnitRemove(tgt);
    }
}
 
void ItemAddCharges(unit tgt, fixed amnt)
{
    string itemId = UnitGetType(tgt);
    string chargeLinkName = ItemTypeChargeLink(itemId);
    UnitAddChargeUsed(tgt, chargeLinkName, -amnt);
}
 
void ItemSetChargesRemaining(unit tgt, fixed charges)
{
    string chargeLinkName = ItemTypeChargeLink(UnitGetType(tgt));
    fixed curCharges = ItemGetChargesRemaining(tgt);
    if(curCharges != charges)
    {
        UnitAddChargeUsed(tgt, chargeLinkName, (curCharges - charges));
    }
}
 
fixed InventoryTotalChargesOfItemType(unit tgt, string type)
{
    unitgroup items = InventoryGetItemsOfType(tgt, type);
    fixed chargeCount = 0;
    int numItems = UnitGroupCount(items, c_unitCountAll);
    int i = 1;
 
    while(i <= numItems)
    {
        chargeCount += ItemGetChargesRemaining(UnitGroupUnit(items, i));
        i += 1;
    }
    return chargeCount;
}
 
void InventoryRemoveItemChargesOfType(unit tgt, string type, fixed numCharges)
{
    fixed chargeCount = InventoryTotalChargesOfItemType(tgt, type) - numCharges;
    fixed maxCharges = ItemTypeMaxCharges(type);
    unitgroup items = InventoryGetItemsOfType(tgt, type);
    int i = UnitGroupCount(items, c_unitCountAlive);
    unit curUnit;
 
    while(i > 0)
    {
        curUnit = UnitGroupUnit(items, i);
        if(chargeCount > maxCharges)
        {
            ItemSetChargesRemaining(curUnit, maxCharges);
            chargeCount -= maxCharges;
        }
        else if(chargeCount > 0)
        {
            ItemSetChargesRemaining(curUnit, chargeCount);
            chargeCount = 0;
        }
        else
        {
            UnitRemove(curUnit);
        }
        i -= 1;
    }
}
 
void InventoryStackItemsOfType(unit tgt, string type)
{
    InventoryRemoveItemChargesOfType(tgt, type, 0);
    return;
}
 
order OrderUseItemTargetingPoint(abilcmd cmd, unit item, point tgt)
{
    order ord = OrderTargetingPoint(cmd, tgt);
    OrderSetTargetItem(ord, item);
    return ord;
}
 
order OrderUseItemTargetingRelativePoint(abilcmd cmd, unit item, point tgt)
{
    order ord = OrderTargetingRelativePoint(cmd, tgt);
    OrderSetTargetItem(ord, item);
    return ord;
}
 
order OrderUseItemTargetingUnit(abilcmd cmd, unit item, unit tgt)
{
    order ord = OrderTargetingUnit(cmd, tgt);
    OrderSetTargetItem(ord, item);
    return ord;
}
 
order OrderUseItemInstant(abilcmd cmd, unit item)
{
    return OrderTargetingItem(cmd, item);
}

void lib1_InitCustomScript () {
}

// Functions
order lib1_gf_OrderUseItemTargetingRelativePoint (abilcmd lp_cmd, unit lp_item, point lp_tgt) {
    // Variable Declarations
    order lv_ord;

    // Variable Initialization
    lv_ord = OrderTargetingRelativePoint(lp_cmd, lp_tgt);

    // Implementation
    OrderSetTargetItem(lv_ord, lp_item);
    return lv_ord;
}

order lib1_gf_OrderUseItemTargetingPoint (abilcmd lp_cmd, unit lp_item, point lp_tgt) {
    // Variable Declarations
    order lv_ord;

    // Variable Initialization
    lv_ord = OrderTargetingPoint(lp_cmd, lp_tgt);

    // Implementation
    OrderSetTargetItem(lv_ord, lp_item);
    return lv_ord;
}

order lib1_gf_OrderUseItemTargetingUnit (abilcmd lp_cmd, unit lp_item, unit lp_tgt) {
    // Variable Declarations
    order lv_ord;

    // Variable Initialization
    lv_ord = OrderTargetingUnit(lp_cmd, lp_tgt);

    // Implementation
    OrderSetTargetItem(lv_ord, lp_item);
    return lv_ord;
}

order lib1_gf_OrderUseItemInstant (abilcmd lp_cmd, unit lp_item) {
    // Implementation
    return OrderTargetingItem(lp_cmd, lp_item);
}

unitgroup lib1_gf_UnitsInGroupOfType (unitgroup lp_group, string lp_type) {
    // Variable Declarations
    int lv_numUnits;
    unitgroup lv_matchingUnits;
    unit lv_curUnit;
    int lv_i;

    // Variable Initialization
    lv_numUnits = UnitGroupCount(lp_group, c_unitCountAll);
    lv_matchingUnits = UnitGroupEmpty();
    lv_i = 1;

    // Implementation
    while ((lv_i <= lv_numUnits)) {
        lv_curUnit = UnitGroupUnit(lp_group, lv_i);
        if ((UnitGetType(lv_curUnit) == lp_type)) {
            UnitGroupAdd(lv_matchingUnits, lv_curUnit);
        }
        else {
        }
        lv_i += 1;
    }
    return lv_matchingUnits;
}

string lib1_gf_ItemTypeChargeLink (string lp_itemId) {
    // Variable Declarations
    string lv_itemLinkId;

    // Variable Initialization
    lv_itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, lp_itemId, "Item", c_playerAny);

    // Implementation
    return CatalogFieldValueGet(c_gameCatalogItem, lv_itemLinkId, "EffectCost.Charge.Link", c_playerAny);
}

fixed lib1_gf_ItemTypeMaxCharges (string lp_itemId) {
    // Variable Declarations
    string lv_itemLinkId;

    // Variable Initialization
    lv_itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, lp_itemId, "Item", c_playerAny);

    // Implementation
    return StringToFixed(CatalogFieldValueGet(c_gameCatalogItem, lv_itemLinkId, "EffectCost.Charge.CountMax", c_playerAny));
}

void lib1_gf_ItemSetChargesRemaining (unit lp_tgt, fixed lp_charges) {
    // Variable Declarations
    string lv_chargeLinkName;
    fixed lv_curCharges;

    // Variable Initialization
    lv_chargeLinkName = lib1_gf_ItemTypeChargeLink((UnitGetType(lp_tgt)));
    lv_curCharges = lib1_gf_ItemGetChargesRemaining(lp_tgt);

    // Implementation
    if ((lv_curCharges != lp_charges)) {
        UnitAddChargeUsed(lp_tgt, lv_chargeLinkName, (lv_curCharges - lp_charges));
    }
    else {
    }
}

void lib1_gf_ItemAddCharges (unit lp_item, fixed lp_numCharges) {
    // Variable Declarations
    string lv_itemId;
    string lv_chargeLinkName;

    // Variable Initialization
    lv_itemId = UnitGetType(lp_item);
    lv_chargeLinkName = lib1_gf_ItemTypeChargeLink((lv_itemId));

    // Implementation
    UnitAddChargeUsed(lp_item, lv_chargeLinkName, (0.0 - lp_numCharges));
}

void lib1_gf_ItemRemoveCharges (unit lp_item, fixed lp_numCharges) {
    // Variable Declarations
    string lv_itemId;
    string lv_chargeLinkName;
    fixed lv_curCharges;

    // Variable Initialization
    lv_itemId = UnitGetType(lp_item);
    lv_chargeLinkName = lib1_gf_ItemTypeChargeLink((lv_itemId));
    lv_curCharges = lib1_gf_ItemGetChargesRemaining(lp_item);

    // Implementation
    UnitAddChargeUsed(lp_item, lv_chargeLinkName, (lv_curCharges - lp_numCharges));
}

int lib1_gf_InventoryCountItemsOfType (unit lp_tgt, string lp_type) {
    // Implementation
    return UnitGroupCount(lib1_gf_InventoryGetItemsOfType(lp_tgt, lp_type), c_unitCountAll);
}

unitgroup lib1_gf_InventoryGetItemsOfType (unit lp_tgt, string lp_type) {
    // Implementation
    if ((UnitInventoryGroup(lp_tgt) != null)) {
        return lib1_gf_UnitsInGroupOfType(UnitInventoryGroup(lp_tgt), lp_type);
    }
    else {
        return UnitGroupEmpty();
    }
}

bool lib1_gf_InventoryHasItemOfType (unit lp_tgt, string lp_type) {
    // Implementation
    return (lib1_gf_InventoryCountItemsOfType(lp_tgt, lp_type) > 0);
}

unit lib1_gf_InventoryGetRandomItemOfType (unit lp_tgt, string lp_type) {
    // Variable Declarations
    unitgroup lv_items;

    // Variable Initialization
    lv_items = lib1_gf_InventoryGetItemsOfType(lp_tgt, lp_type);

    // Implementation
    if ((UnitGroupCount(lv_items, c_unitCountAll) <= 0)) {
        return null;
    }
    else {
    }
    return UnitGroupRandomUnit(lv_items, c_unitCountAll);
}

fixed lib1_gf_ItemGetChargesUsed (unit lp_tgt) {
    // Variable Declarations
    string lv_chargeLinkName;

    // Variable Initialization
    lv_chargeLinkName = lib1_gf_ItemTypeChargeLink((UnitGetType(lp_tgt)));

    // Implementation
    return UnitGetChargeUsed(lp_tgt, lv_chargeLinkName);
}

fixed lib1_gf_ItemGetChargesRemaining (unit lp_tgt) {
    // Variable Declarations
    string lv_itemId;
    string lv_chargeLinkName;
    fixed lv_return;

    // Variable Initialization
    lv_itemId = (UnitGetType(lp_tgt));
    lv_chargeLinkName = lib1_gf_ItemTypeChargeLink((UnitGetType(lp_tgt)));

    // Implementation
    lv_return = (lib1_gf_ItemTypeMaxCharges(lv_itemId) - UnitGetChargeUsed(lp_tgt, lv_chargeLinkName));
    return MaxF(lv_return, 1.0);
}

fixed lib1_gf_InventoryTotalChargesOfItemType (unit lp_tgt, string lp_type) {
    // Variable Declarations
    unitgroup lv_items;
    fixed lv_chargeCount;
    int lv_numItems;
    int lv_i;

    // Variable Initialization
    lv_items = lib1_gf_InventoryGetItemsOfType(lp_tgt, lp_type);
    lv_numItems = UnitGroupCount(lv_items, c_unitCountAll);
    lv_i = 1;

    // Implementation
    while ((lv_i <= lv_numItems)) {
        lv_chargeCount += lib1_gf_ItemGetChargesRemaining(UnitGroupUnit(lv_items, lv_i));
        lv_i += 1;
    }
    return lv_chargeCount;
}

void lib1_gf_InventoryRemoveItemChargesOfType (unit lp_tgt, string lp_type, fixed lp_numCharges) {
    // Variable Declarations
    fixed lv_chargeCount;
    string lv_typeString;
    fixed lv_maxCharges;
    unitgroup lv_items;
    int lv_i;
    unit lv_curUnit;

    // Variable Initialization
    lv_chargeCount = lib1_gf_InventoryTotalChargesOfItemType(lp_tgt, lp_type);
    lv_typeString = (lp_type);
    lv_maxCharges = lib1_gf_ItemTypeMaxCharges(lv_typeString);
    lv_items = lib1_gf_InventoryGetItemsOfType(lp_tgt, lp_type);
    lv_i = UnitGroupCount(lv_items, c_unitCountAll);

    // Implementation
    lv_chargeCount -= lp_numCharges;
    while ((lv_i > 0)) {
        lv_curUnit = UnitGroupUnit(lv_items, lv_i);
        if ((lv_chargeCount > lv_maxCharges)) {
            lv_chargeCount -= lv_maxCharges;
            lib1_gf_ItemSetChargesRemaining(lv_curUnit, lv_maxCharges);
        }
        else if ((lv_chargeCount > 0.0)) {
            lib1_gf_ItemSetChargesRemaining(lv_curUnit, lv_chargeCount);
            lv_chargeCount = 0.0;
        }
        else if ((StringExternal("Param/Value/lib_1_CF081194") != null)) {
            UnitRemove(lv_curUnit);
        }
        lv_i -= 1;
    }
}

void lib1_gf_InventoryStackItemsOfType (unit lp_tgt, string lp_type) {
    // Implementation
    lib1_gf_InventoryRemoveItemChargesOfType(lp_tgt, lp_type, 0.0);
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitCustomScript();

    lib1_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library: Donation
//--------------------------------------------------------------------------------------------------
// Variables
int[3] lib5_gv_donate;
int lib5_gv_donating;
string[3] lib5_gv_donateinfo;

void lib5_InitVariables () {
    int init_i;

    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib5_gv_donate[init_i] = c_invalidDialogControlId;
    }
    lib5_gv_donating = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib5_gv_donateinfo[init_i] = "";
    }
}

// Function Declarations
void lib5_gf_DonateButton (string lp_yourPaypalmailadress, int lp_dialog, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, string lp_mapsName, string lp_currency, text lp_buttonText, text lp_tooltip);

// Trigger Declarations
trigger lib5_gt_Donate;

// Functions
void lib5_gf_DonateButton (string lp_yourPaypalmailadress, int lp_dialog, int lp_width, int lp_height, int lp_offsetX, int lp_offsetY, string lp_mapsName, string lp_currency, text lp_buttonText, text lp_tooltip) {
    // Implementation
    libNtve_gf_CreateDialogItemButton(lp_dialog, lp_width, lp_height, c_anchorCenter, lp_offsetX, lp_offsetY, lp_tooltip, lp_buttonText, "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_orange_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    lib5_gv_donate[0] = DialogControlLastCreated();
    lib5_gv_donateinfo[0] = StringReplaceWord(lp_yourPaypalmailadress, " ", "+", c_stringReplaceAll, c_stringCase);
    lib5_gv_donateinfo[1] = StringReplaceWord(lp_mapsName, " ", "+", c_stringReplaceAll, c_stringCase);
    lib5_gv_donateinfo[2] = StringReplaceWord(lp_currency, " ", "+", c_stringReplaceAll, c_stringCase);
    DialogCreate(600, 180, c_anchorCenter, 0, 0, true);
    lib5_gv_donating = DialogLastCreated();
    DialogSetImage(lib5_gv_donating, "Assets\\Textures\\ui_ingame_leaderboard_frame.dds");
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 100, 20, StringExternal("Param/Value/lib_5_669CA965"), ColorWithAlpha(0,0,0,0), false, 0.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_5_8FE06C91"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 540, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 30, 70);
    lib5_gv_donate[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lib5_gv_donating, 200, 70, c_anchorTopLeft, 200, 110, StringExternal("Param/Value/lib_5_3AF589AC"), StringExternal("Param/Value/lib_5_11BA1025"), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glue_navbuttons_blue_normaloverpressedover.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeEndCap, PlayerGroupAll());
    lib5_gv_donate[2] = DialogControlLastCreated();
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Donate
//--------------------------------------------------------------------------------------------------
bool lib5_gt_Donate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib5_gv_donate[0])) {
        DialogSetVisible(lib5_gv_donating, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemEditorValue(lib5_gv_donate[1], ("https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=" + "" + lib5_gv_donateinfo[0] + "&item_number=" + lib5_gv_donateinfo[1] + "++" + PlayerHandle(EventPlayer()) + "&currency_code=" + lib5_gv_donateinfo[2]), PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((EventDialogControl() == lib5_gv_donate[2])) {
            DialogSetVisible(lib5_gv_donating, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib5_gt_Donate_Init () {
    lib5_gt_Donate = TriggerCreate("lib5_gt_Donate_Func");
    TriggerAddEventDialogControl(lib5_gt_Donate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void lib5_InitTriggers () {
    lib5_gt_Donate_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib5_InitLib_completed = false;

void lib5_InitLib () {
    if (lib5_InitLib_completed) {
        return;
    }

    lib5_InitVariables();
    lib5_InitTriggers();

    lib5_InitLib_completed = true;
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib3_InitLib();
    lib4_InitLib();
    lib2_InitLib();
    lib1_InitLib();
    lib5_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_reward_size = 120;
const int gv_reward_gap = 3;
const int gv_reward_model_gap = 15;
const int gv_reward_start_y = -115;
const int gv_reward_start_x = 440;
const int gv_reward_amount_x = 4;
const int gv_reward_amount = 15;
const int gv_configureoptions = 3;
const int gv_rEWARD_TYPES = 3;
const int gv_droneSize = 15;
const int gv_missileAmount = 30;
const int gv_hangarrows = 2;
const int gv_hangarPurchaserows = 2;
const int gv_hangarcolumns = 6;
const int gv_hangarPurchasecolumns = 5;
const int gv_hangarbuttonpurchaseoffsetX = 90;
const int gv_hangarbuttonoffsetX = 50;
const int gv_hangarbuttonoffsetY = 50;
const int gv_hangarbuttonsize = 65;
const int gv_hangarInspacebuttonsize = 20;
const fixed gv_spacebuttonoffsetmultiplier = 1.7;
const int gv_hangarbuttongapX = 10;
const int gv_hangarbuttongapY = 10;
const int gv_mainWidth = 1200;
const int gv_mainHeight = 800;
const int gv_mainOffsetX = 450;
const int gv_mainOffsetY = 100;
const int gv_changePowerButtonWidth = 50;
const int gv_changePowerButtonHeight = 50;
const int gv_voteKick_PlayerButtons_StartOffset_X = 62;
const int gv_voteKick_PlayerButtons_StartOffset_Y = 90;
const int gv_voteKick_PlayerButtons_Size_X = 200;
const int gv_voteKick_PlayerButtons_Size_Y = 50;
const int gv_voteKick_PlayerButtons_Gap = 15;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Reward {
    fixed lv_requiredreputation;
    string lv_unitmodel;
    int lv_sizex;
    int lv_sizey;
    int lv_offsetx;
    int lv_offsety;
    text lv_name;
    int lv_dialogitem;
    string lv_camera;
    string lv_model;
    string lv_image;
    string lv_background;
    string lv_iD;
    string lv_requirement;
    string lv_diffuseTexture;
    string lv_emissiveTexture;
    string lv_specularTexture;
    fixed lv_scale;
};

struct gs_Drone {
    text lv_name;
    bool[5] lv_mineMineral;
    int lv_status;
    int lv_currentOrder;
    unit lv_avatar;
    unit lv_ship;
    unit lv_target;
    int lv_targetspace;
    bool lv_respawning;
    int lv_weaponprio;
    point lv_oldEnemyLocation;
    bool lv_fireMissiles;
    bool lv_armYamato;
    bool lv_purgeCore;
    unit lv_currentConsole;
};

struct gs_Room {
    int[13] lv_doors;
    int lv_nrDoors;
    int lv_background;
    bool lv_vented;
    int lv_floor;
    int lv_name;
};

struct gs_Door {
    int lv_picture;
    int lv_button;
    bool lv_locked;
    int lv_floor;
};

struct gs_Vents {
    int lv_picture;
    int lv_button;
    int lv_floor;
};

struct gs_Missile {
    string lv_itemType;
    string lv_missileType;
    string lv_picture;
    abilcmd lv_ability;
    text lv_name;
    fixed lv_hull_Damage;
    fixed lv_shield_Damage;
    fixed lv_debris_chance;
    fixed lv_fire_chance;
    fixed lv_duration;
    fixed lv_speed;
};

struct gs_Item {
    string lv_image;
    string lv_name;
    string lv_type;
    bool lv_stackable;
};

struct gs_ItemStorage {
    int lv_itemid;
    int lv_amount;
};

struct gs_Ship {
    string lv_buttonImage;
    string lv_image;
    text lv_description;
    int lv_chalcoriumcost;
    int lv_pyromanitecost;
    int lv_velditecost;
    int lv_kermiculitecost;
    string lv_unittype;
    int lv_inventorySizeX;
    int lv_inventorySizeY;
    int lv_respawntime;
};

struct gs_ShipList {
    int lv_status;
    int lv_shipType;
    int lv_currentRespawn;
};

struct gs_Power_Stations {
    string lv_name;
    int lv_x;
    int lv_y;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_tutorialenabled;
text[26] gv_tutorialText;
int[16] gv_currentTutorialText;
int gv_closeTutorialText1;
int gv_closeTutorialText2;
int gv_closeTutorialText3;
int gv_closeTutorialText4;
int gv_closeTutorialText5;
int gv_closeTutorialText6;
bool[16] gv_tutorial_FirstTimeThroughTeleporters;
bool[16] gv_tutorial_FirstTimeShipLaunching;
bool[16] gv_tutorial_FirstTimeReturnMessage;
bool[16] gv_tutorial_FirstTimeExcessEnergyMessage;
bool[16] gv_tutorial_FirstTimeTakingDamage;
int[16][3] gv_tutorial_TeleporterPing;
int[16][7] gv_tutorial_HangarPing;
playergroup gv_newplayers;
int gv_pickTutorialDialog;
int gv_miningButton;
int gv_tutorialIntroductionButton;
int gv_introductionDialog;
int gv_introductionLabel;
int gv_introductionNextButton;
int gv_introductionCloseButton;
int gv_disableTutorialDialog;
int gv_disableTutorialYes;
int gv_disableTutorialNo;
bool gv_gameover;
playergroup gv_winningplayers;
playergroup gv_losingplayers;
int gv_leavegamebutton;
playergroup gv_debugplayers;
bool gv_inDebug;
bool[16] gv_windowopen;
bool gv_debug;
int gv_startDialog;
int[16] gv_ready_Image;
int gv_ready_Button;
int[3][5] gv_reward_Main_Border;
int[17] gv_reward_Border;
int[17] gv_reward_Button;
int[17][3][gv_rEWARD_TYPES + 1] gv_reward_Model;
int[17][3][gv_rEWARD_TYPES + 1] gv_reward_Image;
int[17] gv_special_Reward_Model;
int gv_reward_ChangeAcquireType;
int gv_reward_ChangeRewardType;
int[gv_configureoptions + 1] gv_configurelabels;
int[gv_configureoptions + 1] gv_configureboxes;
int gv_starttimer;
bool gv_gamestarted;
bool[16] gv_playerready;
int gv_configuringplayer;
bool gv_rainbowasteroids;
bool gv_disableweapons;
bool gv_asteroidshower;
string[16] gv_firstCCTournamentModelReward;
string[16] gv_hellionTestReward;
string[16] gv_firstCCtournamentSkinReward;
string[16] gv_caladbolgspecialmodel;
string[16] gv_donatormodel;
gs_Reward[16][3][gv_rEWARD_TYPES + 1] gv_modelRewards;
gs_Reward[16] gv_specialModelRewards;
string[16][gv_rEWARD_TYPES + 1] gv_selectedReward;
int[16][gv_rEWARD_TYPES + 1] gv_selectedBorder;
actor[17] gv_player_background;
bank[16] gv_playerBanks;
fixed[16] gv_reputation;
fixed[16] gv_realReputation;
int[16] gv_kills;
int[16] gv_deaths;
int gv_switchViewButton;
int gv_switchView;
int gv_shipStatusMaxmin;
int gv_shipStatusMaxminimage;
int gv_headerShipStatus;
int gv_shipStatus;
int gv_selectConsoleButton;
int gv_selectConsole;
int[15] gv_view;
playergroup gv_consolePlayers;
int gv_hull_label;
int gv_shield_label;
int gv_missiles_label;
int gv_energy_label;
int gv_weapon_energy_label;
int gv_speed_label;
int gv_core_label;
int gv_tier1_label;
int gv_tier2_label;
int gv_tier3_label;
int[16] gv_afkTextTag;
playergroup[3] gv_afkplayers;
point[16] gv_direction;
point[3][11] gv_directionLocations;
int gv_directionsdialog;
int[11] gv_directionsdialogbuttons;
int gv_closeDirections;
int gv_openDirections;
int gv_openDirectionsdialog;
int gv_droneDialog;
int gv_issueOrderButton;
int gv_returnHomeButton;
int[5] gv_asteroidCheckbox;
int gv_weaponDropDown;
int gv_orderTypeDropdown;
int gv_droneDropdown;
int gv_orderStatus;
int gv_miningOrderInfo;
int gv_gunneryOrderInfo;
int gv_scienceOrderInfo;
int gv_missileLabel;
int gv_missileDistributeCheckbox;
int gv_fireMissileCheckbox;
int gv_armYamatoCheckbox;
int gv_purgeCorePlasmaCheckbox;
int gv_droneCostLabel;
int gv_purchaseDrone;
int gv_purchaseDroneButton;
int[3][3] gv_droneCost;
gs_Drone[3][gv_droneSize + 1] gv_drones;
fixed gv_lastDroneLoop;
gs_Room[21] gv_rooms;
int gv_roomAmount;
gs_Door[21] gv_doors;
gs_Vents[13] gv_ventRecords;
int gv_doorAmount;
int gv_ventWarning;
int gv_ventWarningYes;
int gv_ventWarningNo;
bool[13] gv_showVentWarning;
int gv_showVentWarningCheckbox;
int gv_hideDC;
int gv_floor1;
int gv_floor2;
int gv_floorLabel;
int gv_floor;
int[13] gv_ventRoom;
int gv_dC_MainDialog;
int gv_dC_LockButton;
int gv_dC_LockButtonImage;
int gv_doorLocked;
int gv_energyDialog;
int gv_energyDialog2;
int gv_energyEngine;
int gv_energyShields;
int gv_energyShieldsCapacitor;
int gv_energyWeapons;
int gv_energyCapacitor;
int gv_energyWeaponsCapacitor;
int gv_energyDrain;
int gv_energyProduction;
int gv_energyConnectedships;
int gv_energyBackground;
int gv_energyCoreOutput;
int gv_energyCoreStability;
int[16] gv_coreChanges;
int gv_hackingdialog;
int gv_sabotagebutton;
int gv_hackbutton;
unit[16] gv_hacking_device;
int[16] gv_hack_x;
int[16] gv_hack_xe;
int[16] gv_hack_y;
int[16] gv_hack_ye;
int[16] gv_hack_dir;
string[50][50][16] gv_hack_grid;
int[51][16] gv_hack_stack;
int[16] gv_hack_register;
int[16] gv_hack_sp;
int[16] gv_hack_level;
int[16][21] gv_hack_order_ids;
bool[16][21] gv_hack_order_discovered;
string[6][11] gv_hack_code;
int[16] gv_hack_console_type;
bool[16] gv_hack_break;
int gv_gridWindow;
int gv_stackWindow;
int gv_stackWindowBackground;
int gv_outputWindow;
int gv_outputWindowBackground;
int gv_outputWindowLabel1;
int gv_outputWindowLabel2;
int gv_outputWindowLabel3;
int[8] gv_recentOutputLabel;
int[11] gv_outputsLabel;
int gv_outputExtraInfo;
int[50] gv_uIStack;
int[51][51] gv_uIGrid;
int gv_uIThread;
int gv_uIPointer;
string[16] gv_missileTypes;
int[11] gv_launchMissileButton;
int[11] gv_launchMissileImage;
int gv_launchMissileDialog;
string[11][3] gv_launchMissileUnit;
bool[11][3] gv_preloading;
region[11][3] gv_missileBays;
region[11][3] gv_missileConveyors;
playergroup gv_laserPlayers;
int[3] gv_loadedMissiles;
gs_Missile[gv_missileAmount + 1] gv_missiles;
unitgroup gv_preloadingmissiles;
int gv_navigationDialog;
int gv_navigationRow1;
int gv_navigationRow2;
int gv_navigationRow3;
int gv_navigationRow4;
int[16] gv_navigationUI;
int[16] gv_navigationUIRealBar;
int[16] gv_navigationUISetBar;
int[16] gv_navigationUIText;
bool[16] gv_blockNavigationZoom;
bool[16] gv_board;
int[3] gv_storageDialog;
int[3][31] gv_storagelist;
int[3][31] gv_storageicons;
int[3][31] gv_storagewithdraw1;
int[3][31] gv_storagewithdraw5;
int[3][31] gv_storagewithdraw10;
gs_Item[31] gv_items;
gs_ItemStorage[3][31] gv_itemStorage;
int gv_itemArraySize;
int gv_itemStorageArraySize;
abilcmd[3] gv_latestUpgrade;
bool[13] gv_withdrawItemBlock;
int gv_closeHangar;
int gv_closePurchaseShip;
int gv_openPurchaseShip;
int gv_selectedShipImage;
int gv_selectedPurchaseShipImage;
int[21] gv_shipListButtons;
int[16] gv_shipListImages;
int[16] gv_shipListImagesInspace;
int[16] gv_shipListRespawnLabel;
int[16] gv_shipPurchaseButtons;
int gv_hangarDialog;
int gv_shipInfoDialog;
int gv_shipPurchaseDialog;
int gv_purchaseship;
int gv_purchaseCost;
int gv_purchaseDescription;
int gv_purchaseName;
int gv_hangarDescription;
int gv_hangarName;
int gv_depositItemButton;
int gv_depositItemImage;
int gv_salvageItemButton;
int gv_salvageItemImage;
int gv_salvageConfirmDialog;
int gv_salvageConfirmText;
int gv_salvageConfirmYes;
int gv_salvageConfirmNo;
int gv_withdrawItemsButton;
int gv_withdrawItemsImage;
int gv_launchShipButton;
int gv_launchShipImage;
int gv_inventoryLabel;
int gv_hangarbuttonimageshrink;
int gv_hangarActionButtons;
bool[3] gv_buildingMiner;
bool[3] gv_buildingWraith;
fixed gv_emergencyminertime;
fixed gv_emergencyWraithtime;
int[16] gv_selectedShip;
int[16] gv_selectedShipPurchase;
bool[16] gv_playerRespawning;
gs_Ship[21] gv_shiptypes;
gs_ShipList[3][25] gv_shipList;
bool[16] gv_dockBlock;
fixed gv_respawntime;
playergroup gv_tractorbeampg;
unitgroup gv_tractorbeamreturningmissiles;
fixed[3] gv_lockValue;
int[3][16] gv_oldMousePos;
unit gv_tractor_u;
actor[16] gv_lastBeam;
unit[3] gv_tractor_locks;
fixed[3] gv_pullPush;
timer[3] gv_yamatoTimer;
bool gv_waitingForSpawn;
unitgroup gv_kermGroup;
int gv_kermiculitePing;
timer gv_kermiculiteTimer;
string[7] gv_asteroidTypes;
fixed[16] gv_lastMiningTime;
string gv_battlecruiserType;
unit[3] gv_battlecruisers;
unit[21] gv_pilots;
int[21] gv_pilottexttags;
int[3][21] gv_aItexttags;
point[3] gv_constructionsite;
point[3] gv_mineraldropoff;
region[3] gv_conveyorBelt;
region[3] gv_processingarea;
region[3][3][6] gv_bCareas;
region[3] gv_battlecruiserArea;
point[3] gv_startLocations;
region[3] gv_refiningdrops;
revealer[3][16] gv_playerVisibilityRevealer;
int gv_power_MainDialog;
gs_Power_Stations[13] gv_power_Stations;
int gv_station_Amount;
int gv_changePowerImageShrink;
int gv_changePowerImageGap;
fixed[16] gv_playersCameraDistance;
fixed[16] gv_playersCameraFieldOfView;
playergroup[3] gv_players_inside;
int[3] gv_energy_weapons;
int[3] gv_energy_core_output;
fixed[3] gv_energy_core_stability;
int[3] gv_energy_weapons_capacitor;
int[24] gv_energy_shields;
int[24] gv_energy_engine;
int[16] gv_powerdownoverlay;
bool[3] gv_poweredDown;
int[3] gv_charges;
unitgroup gv_collisiongroup;
unitgroup gv_collisiongroup_mines;
fixed gv_lastCollisionDetection;
region[24] gv_nav_navigator_regions;
unit[24] gv_nav_navigators;
unit[24] gv_nav_ships;
fixed[24] gv_nav_angles;
fixed[24] gv_nav_targets;
fixed[24] gv_nav_speed;
int[24] gv_nav_acceleration;
unit[24] gv_nav_camera_offset;
timer gv_edgeDisableTimer;
bool gv_loopturnedoff;
bool[17] gv_soundOn;
playergroup gv_disconnectedplayers;
bool gv_infmis;
unitgroup gv_guidedMissiles;
unitgroup gv_physicgroup;
unitgroup gv_physiccolliders;
unitgroup gv_physicasteroids;
fixed gv_lastPhysics;
int[3][6][13] gv_voteKick_Players;
int[16] gv_voteKick_VotesInitiated;
timer[3] gv_voteKick_Timeout;
timer[16] gv_voteKick_Cooldown;
int[16] gv_voteKick_CooldownWindow;
int[3] gv_voteKick_NoVotes;
int[3] gv_voteKick_YesVotes;
int[3] gv_voteKick_TotalVotes;
int[3] gv_voteKick_KickPlayer;
int[3] gv_voteKick_InitiatingPlayer;
bool[13] gv_votekick_Block;
int gv_voteKick_OpenButton;
int gv_voteKickPick_Dialog;
int[6] gv_voteKick_PlayerButtons;
int gv_voteKick_YesButton;
int gv_voteKick_NoButton;
int gv_voteKick_VoteDialog;
int gv_voteKick_VoteDialogText;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;

    gv_closeTutorialText1 = 3;
    gv_closeTutorialText2 = 5;
    gv_closeTutorialText3 = 7;
    gv_closeTutorialText4 = 8;
    gv_closeTutorialText5 = 9;
    gv_closeTutorialText6 = 10;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_tutorial_FirstTimeThroughTeleporters[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_tutorial_FirstTimeShipLaunching[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_tutorial_FirstTimeReturnMessage[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_tutorial_FirstTimeExcessEnergyMessage[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_tutorial_FirstTimeTakingDamage[init_i] = true;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_tutorial_TeleporterPing[init_i][init_j] = c_invalidPingId;
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            gv_tutorial_HangarPing[init_i][init_j] = c_invalidPingId;
        }
    }
    gv_newplayers = PlayerGroupEmpty();
    gv_pickTutorialDialog = c_invalidDialogId;
    gv_miningButton = c_invalidDialogControlId;
    gv_tutorialIntroductionButton = c_invalidDialogControlId;
    gv_introductionDialog = c_invalidDialogId;
    gv_introductionLabel = c_invalidDialogControlId;
    gv_introductionNextButton = c_invalidDialogControlId;
    gv_introductionCloseButton = c_invalidDialogControlId;
    gv_disableTutorialDialog = c_invalidDialogId;
    gv_disableTutorialYes = c_invalidDialogControlId;
    gv_disableTutorialNo = c_invalidDialogControlId;
    gv_winningplayers = PlayerGroupEmpty();
    gv_losingplayers = PlayerGroupEmpty();
    gv_leavegamebutton = c_invalidDialogControlId;
    gv_debugplayers = PlayerGroupEmpty();
    gv_startDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_ready_Image[init_i] = c_invalidDialogControlId;
    }
    gv_ready_Button = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_reward_Main_Border[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_reward_Border[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_reward_Button[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            for (init_k = 0; init_k <= gv_rEWARD_TYPES; init_k += 1) {
                gv_reward_Model[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            for (init_k = 0; init_k <= gv_rEWARD_TYPES; init_k += 1) {
                gv_reward_Image[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_special_Reward_Model[init_i] = c_invalidDialogControlId;
    }
    gv_reward_ChangeAcquireType = c_invalidDialogControlId;
    gv_reward_ChangeRewardType = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_configureoptions; init_i += 1) {
        gv_configurelabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_configureoptions; init_i += 1) {
        gv_configureboxes[init_i] = c_invalidDialogControlId;
    }
    gv_starttimer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_firstCCTournamentModelReward[init_i] = "#";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_hellionTestReward[init_i] = "#";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_firstCCtournamentSkinReward[init_i] = "#";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_caladbolgspecialmodel[init_i] = "#";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_donatormodel[init_i] = "#";
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            for (init_k = 0; init_k <= gv_rEWARD_TYPES; init_k += 1) {
                gv_modelRewards[init_i][init_j][init_k].lv_dialogitem = c_invalidDialogControlId;
                gv_modelRewards[init_i][init_j][init_k].lv_camera = "Star2CameraHigher01";
                gv_modelRewards[init_i][init_j][init_k].lv_iD = "";
                gv_modelRewards[init_i][init_j][init_k].lv_requirement = "";
            }
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_specialModelRewards[init_i].lv_dialogitem = c_invalidDialogControlId;
        gv_specialModelRewards[init_i].lv_camera = "Star2CameraHigher01";
        gv_specialModelRewards[init_i].lv_iD = "";
        gv_specialModelRewards[init_i].lv_requirement = "";
    }
    gv_switchViewButton = c_invalidDialogControlId;
    gv_switchView = c_invalidDialogId;
    gv_shipStatusMaxmin = c_invalidDialogControlId;
    gv_shipStatusMaxminimage = c_invalidDialogControlId;
    gv_headerShipStatus = c_invalidDialogId;
    gv_shipStatus = c_invalidDialogId;
    gv_selectConsoleButton = c_invalidDialogControlId;
    gv_selectConsole = c_invalidDialogId;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_view[init_i] = 1;
    }
    gv_consolePlayers = PlayerGroupEmpty();
    gv_hull_label = c_invalidDialogControlId;
    gv_shield_label = c_invalidDialogControlId;
    gv_missiles_label = c_invalidDialogControlId;
    gv_energy_label = c_invalidDialogControlId;
    gv_weapon_energy_label = c_invalidDialogControlId;
    gv_speed_label = c_invalidDialogControlId;
    gv_core_label = c_invalidDialogControlId;
    gv_tier1_label = c_invalidDialogControlId;
    gv_tier2_label = c_invalidDialogControlId;
    gv_tier3_label = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_afkTextTag[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_afkplayers[init_i] = PlayerGroupEmpty();
    }
    gv_directionsdialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_directionsdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_closeDirections = c_invalidDialogControlId;
    gv_openDirections = c_invalidDialogControlId;
    gv_openDirectionsdialog = c_invalidDialogId;
    gv_droneDialog = c_invalidDialogId;
    gv_issueOrderButton = c_invalidDialogControlId;
    gv_returnHomeButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_asteroidCheckbox[init_i] = c_invalidDialogControlId;
    }
    gv_weaponDropDown = c_invalidDialogControlId;
    gv_orderTypeDropdown = c_invalidDialogControlId;
    gv_droneDropdown = c_invalidDialogControlId;
    gv_orderStatus = c_invalidDialogControlId;
    gv_miningOrderInfo = c_invalidDialogControlId;
    gv_gunneryOrderInfo = c_invalidDialogControlId;
    gv_scienceOrderInfo = c_invalidDialogControlId;
    gv_missileLabel = c_invalidDialogControlId;
    gv_missileDistributeCheckbox = c_invalidDialogControlId;
    gv_fireMissileCheckbox = c_invalidDialogControlId;
    gv_armYamatoCheckbox = c_invalidDialogControlId;
    gv_purgeCorePlasmaCheckbox = c_invalidDialogControlId;
    gv_droneCostLabel = c_invalidDialogControlId;
    gv_purchaseDrone = c_invalidDialogId;
    gv_purchaseDroneButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_rooms[init_i].lv_background = c_invalidDialogControlId;
        gv_rooms[init_i].lv_floor = 1;
    }
    gv_roomAmount = 12;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_doors[init_i].lv_picture = c_invalidDialogControlId;
        gv_doors[init_i].lv_button = c_invalidDialogControlId;
        gv_doors[init_i].lv_floor = 1;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_ventRecords[init_i].lv_picture = c_invalidDialogControlId;
        gv_ventRecords[init_i].lv_button = c_invalidDialogControlId;
        gv_ventRecords[init_i].lv_floor = 1;
    }
    gv_doorAmount = 10;
    gv_ventWarning = c_invalidDialogId;
    gv_ventWarningYes = c_invalidDialogControlId;
    gv_ventWarningNo = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_showVentWarning[init_i] = true;
    }
    gv_showVentWarningCheckbox = c_invalidDialogControlId;
    gv_hideDC = c_invalidDialogControlId;
    gv_floor1 = c_invalidDialogControlId;
    gv_floor2 = c_invalidDialogControlId;
    gv_floorLabel = c_invalidDialogControlId;
    gv_floor = 1;
    gv_dC_MainDialog = c_invalidDialogId;
    gv_dC_LockButton = c_invalidDialogControlId;
    gv_dC_LockButtonImage = c_invalidDialogControlId;
    gv_energyDialog = c_invalidDialogId;
    gv_energyDialog2 = c_invalidDialogId;
    gv_energyEngine = c_invalidDialogControlId;
    gv_energyShields = c_invalidDialogControlId;
    gv_energyShieldsCapacitor = c_invalidDialogControlId;
    gv_energyWeapons = c_invalidDialogControlId;
    gv_energyCapacitor = c_invalidDialogControlId;
    gv_energyWeaponsCapacitor = c_invalidDialogControlId;
    gv_energyDrain = c_invalidDialogControlId;
    gv_energyProduction = c_invalidDialogControlId;
    gv_energyConnectedships = c_invalidDialogControlId;
    gv_energyBackground = c_invalidDialogControlId;
    gv_energyCoreOutput = c_invalidDialogControlId;
    gv_energyCoreStability = c_invalidDialogControlId;
    gv_hackingdialog = c_invalidDialogId;
    gv_sabotagebutton = c_invalidDialogControlId;
    gv_hackbutton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 49; init_i += 1) {
        for (init_j = 0; init_j <= 49; init_j += 1) {
            for (init_k = 0; init_k <= 15; init_k += 1) {
                gv_hack_grid[init_i][init_j][init_k] = "";
            }
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_hack_register[init_i] = 999;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            gv_hack_order_ids[init_i][init_j] = -1;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_hack_code[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_hack_console_type[init_i] = -1;
    }
    gv_gridWindow = c_invalidDialogId;
    gv_stackWindow = c_invalidDialogId;
    gv_stackWindowBackground = c_invalidDialogControlId;
    gv_outputWindow = c_invalidDialogId;
    gv_outputWindowBackground = c_invalidDialogControlId;
    gv_outputWindowLabel1 = c_invalidDialogControlId;
    gv_outputWindowLabel2 = c_invalidDialogControlId;
    gv_outputWindowLabel3 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_recentOutputLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_outputsLabel[init_i] = c_invalidDialogControlId;
    }
    gv_outputExtraInfo = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 49; init_i += 1) {
        gv_uIStack[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 50; init_i += 1) {
        for (init_j = 0; init_j <= 50; init_j += 1) {
            gv_uIGrid[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_uIThread = c_invalidDialogControlId;
    gv_uIPointer = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_launchMissileButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_launchMissileImage[init_i] = c_invalidDialogControlId;
    }
    gv_launchMissileDialog = c_invalidDialogId;
    gv_laserPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= gv_missileAmount; init_i += 1) {
        gv_missiles[init_i].lv_shield_Damage = -1.0;
        gv_missiles[init_i].lv_debris_chance = 0.1;
        gv_missiles[init_i].lv_fire_chance = 0.1;
        gv_missiles[init_i].lv_duration = 5.0;
        gv_missiles[init_i].lv_speed = 22.0;
    }
    gv_preloadingmissiles = UnitGroupEmpty();
    gv_navigationDialog = c_invalidDialogId;
    gv_navigationRow1 = c_invalidDialogControlId;
    gv_navigationRow2 = c_invalidDialogControlId;
    gv_navigationRow3 = c_invalidDialogControlId;
    gv_navigationRow4 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_navigationUI[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_navigationUIRealBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_navigationUISetBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_navigationUIText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_storageDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 30; init_j += 1) {
            gv_storagelist[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 30; init_j += 1) {
            gv_storageicons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 30; init_j += 1) {
            gv_storagewithdraw1[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 30; init_j += 1) {
            gv_storagewithdraw5[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 30; init_j += 1) {
            gv_storagewithdraw10[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_items[init_i].lv_name = "";
    }
    gv_itemArraySize = 30;
    gv_itemStorageArraySize = 30;
    gv_closeHangar = c_invalidDialogControlId;
    gv_closePurchaseShip = c_invalidDialogControlId;
    gv_openPurchaseShip = c_invalidDialogControlId;
    gv_selectedShipImage = c_invalidDialogControlId;
    gv_selectedPurchaseShipImage = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_shipListButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_shipListImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_shipListImagesInspace[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_shipListRespawnLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_shipPurchaseButtons[init_i] = c_invalidDialogControlId;
    }
    gv_hangarDialog = c_invalidDialogId;
    gv_shipInfoDialog = c_invalidDialogId;
    gv_shipPurchaseDialog = c_invalidDialogId;
    gv_purchaseship = c_invalidDialogControlId;
    gv_purchaseCost = c_invalidDialogControlId;
    gv_purchaseDescription = c_invalidDialogControlId;
    gv_purchaseName = c_invalidDialogControlId;
    gv_hangarDescription = c_invalidDialogControlId;
    gv_hangarName = c_invalidDialogControlId;
    gv_depositItemButton = c_invalidDialogControlId;
    gv_depositItemImage = c_invalidDialogControlId;
    gv_salvageItemButton = c_invalidDialogControlId;
    gv_salvageItemImage = c_invalidDialogControlId;
    gv_salvageConfirmDialog = c_invalidDialogId;
    gv_salvageConfirmText = c_invalidDialogControlId;
    gv_salvageConfirmYes = c_invalidDialogControlId;
    gv_salvageConfirmNo = c_invalidDialogControlId;
    gv_withdrawItemsButton = c_invalidDialogControlId;
    gv_withdrawItemsImage = c_invalidDialogControlId;
    gv_launchShipButton = c_invalidDialogControlId;
    gv_launchShipImage = c_invalidDialogControlId;
    gv_inventoryLabel = c_invalidDialogControlId;
    gv_hangarbuttonimageshrink = 12;
    gv_hangarActionButtons = 5;
    gv_emergencyminertime = 30.0;
    gv_emergencyWraithtime = 120.0;
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_shiptypes[init_i].lv_inventorySizeX = 3;
        gv_shiptypes[init_i].lv_inventorySizeY = 2;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 24; init_j += 1) {
            gv_shipList[init_i][init_j].lv_shipType = 20;
        }
    }
    gv_respawntime = 12.0;
    gv_tractorbeampg = PlayerGroupEmpty();
    gv_tractorbeamreturningmissiles = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_yamatoTimer[init_i] = TimerCreate();
    }
    gv_kermGroup = UnitGroupEmpty();
    gv_kermiculitePing = c_invalidPingId;
    gv_kermiculiteTimer = TimerCreate();
    gv_battlecruiserType = "Battlecruiser";
    for (init_i = 0; init_i <= 20; init_i += 1) {
        gv_pilottexttags[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            gv_aItexttags[init_i][init_j] = c_textTagNone;
        }
    }
    gv_power_MainDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_power_Stations[init_i].lv_name = "";
    }
    gv_station_Amount = 2;
    gv_changePowerImageShrink = 10;
    gv_changePowerImageGap = 10;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playersCameraDistance[init_i] = 34.07;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_playersCameraFieldOfView[init_i] = 27.8;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_players_inside[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energy_weapons[init_i] = 20;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energy_core_output[init_i] = 100;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energy_core_stability[init_i] = 100.0;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_energy_weapons_capacitor[init_i] = 10000;
    }
    for (init_i = 0; init_i <= 23; init_i += 1) {
        gv_energy_shields[init_i] = 20;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_powerdownoverlay[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_charges[init_i] = 1;
    }
    gv_collisiongroup = UnitGroupEmpty();
    gv_collisiongroup_mines = UnitGroupEmpty();
    for (init_i = 0; init_i <= 23; init_i += 1) {
        gv_nav_acceleration[init_i] = 1;
    }
    gv_edgeDisableTimer = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_soundOn[init_i] = true;
    }
    gv_disconnectedplayers = PlayerGroupEmpty();
    gv_guidedMissiles = UnitGroupEmpty();
    gv_physicgroup = UnitGroupEmpty();
    gv_physiccolliders = UnitGroupEmpty();
    gv_physicasteroids = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_voteKick_Timeout[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_voteKick_Cooldown[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_voteKick_CooldownWindow[init_i] = c_timerWindowNone;
    }
    gv_voteKick_OpenButton = c_invalidDialogControlId;
    gv_voteKickPick_Dialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_voteKick_PlayerButtons[init_i] = c_invalidDialogControlId;
    }
    gv_voteKick_YesButton = c_invalidDialogControlId;
    gv_voteKick_NoButton = c_invalidDialogControlId;
    gv_voteKick_VoteDialog = c_invalidDialogId;
    gv_voteKick_VoteDialogText = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TutorialTransmission (string lp_model, soundlink lp_sound, soundlink lp_sound2, fixed lp_cutSound, fixed lp_splitSound, fixed lp_skipSound, fixed lp_skipSound2, fixed lp_duration, text lp_message, text lp_name, int lp_pos, fixed lp_splitwait);
void gf_Tipintroduction (int lp_p);
void gf_InitIntroduction ();
void gf_TipHangar (int lp_p);
void gf_TipShip (int lp_p);
void gf_TipReturn (int lp_p);
void gf_TipAcceleratemining (int lp_p);
void gf_TipDamage (int lp_p);
void gf_Endgame (int lp_winningteam, int lp_type);
void gf_Inittemporarydebugstuff ();
void gf_Generatemap ();
unitgroup gf_GenerateAsteroidField (int lp_mineraltype, int lp_size, point lp_p, bool lp_mirror, bool lp_disperse);
void gf_InitStartScreen ();
void gf_Startmanualtimer ();
void gf_destroyobjectives ();
void gf_InitConfiguration ();
void gf_Initrewards ();
bool gf_SpecialRewardavailableforplayer (int lp_p, string lp_iD);
int gf_GetRewardBorder (int lp_button);
int gf_GetSelectedBorder (string lp_model, int lp_p);
void gf_InitBanks ();
string gf_encrypt (string lp_str, string lp_key, int lp_p);
string gf_random_str (int lp_length);
string gf_getData (int lp_player, string lp_key, string lp_section, string lp_cryptkey);
void gf_BankSave (int lp_p, string lp_key, string lp_section, string lp_value);
void gf_InitGeneralSystems ();
void gf_LeaveConsole (int lp_trigPlayer, unit lp_trigUnit);
unit gf_getClosestConsoleMarine (point lp_p);
void gf_SpaceView (int lp_player, unit lp_ship);
void gf_ShipView (int lp_player, unit lp_ship);
region gf_GetUnitFloor (unit lp_u);
region gf_GetOppositeUnitFloor (unit lp_u);
void gf_InitDrones ();
string gf_idToAsteroidName (int lp_id);
color gf_idToAsteroidColor (int lp_id);
text gf_statusToText (int lp_id);
text gf_orderToText (int lp_id, int lp_team, int lp_index);
int gf_shipToDroneIndex (unit lp_ship, int lp_team);
unit gf_shipToAvatar (unit lp_ship, int lp_team);
int gf_avatarToIndex (unit lp_avatar, int lp_team);
unit gf_closestUnitMatchingAsteroidType (point lp_point, unitgroup lp_unitGroup, int lp_droneID, int lp_team);
unit gf_highestHealthUnitInUG (unitgroup lp_ug);
unitgroup gf_UnrefinedMineralsInRegion (unitgroup lp_ug, int lp_team);
unitgroup gf_MissilesInRegion (region lp_region);
unitgroup gf_UnitGroupMatchingAsteroidType (unitgroup lp_unitGroup, int lp_droneID, int lp_team);
unitgroup gf_getNonOccupiedConsoles (unitgroup lp_unitGroup);
int gf_getNewDroneID (int lp_team);
int gf_getNewDroneIDOLD (int lp_team);
int gf_closestUnloadedMissileBay (unit lp_unit);
unit gf_getBestMissile (unitgroup lp_u_group);
int gf_Numberofmissilescarried (unit lp_u);
int gf_Numberofmineralscarried (unit lp_u);
void gf_AddAI (int lp_team, text lp_name);
void gf_ChangeDroneStatus (int lp_id, int lp_team, string lp_status);
bool gf_Unitisinfront (fixed lp_width, unit lp_u, point lp_origin, fixed lp_facing, int lp_detail, fixed lp_distance);
void gf_FixOrderLayout (int lp_p);
fixed gf_ClosestAngleBetweenPoints (point lp_p1, point lp_p2);
point gf_CalculateGoodRepairPoint (unit lp_u);
unitgroup gf_VisibleSpaceUnitinRange (unit lp_u, fixed lp_range);
void gf_InitDamageControl ();
void gf_LockDoor (int lp_doorID, int lp_trigplayer);
void gf_VentRoom (int lp_roomID, int lp_trigplayer);
void gf_InitEnergyControl ();
text gf_StabilityToText (fixed lp_stability);
void gf_UpdateEnergyConsole (int lp_p);
void gf_OpenEnergy (int lp_player, unit lp_unit);
void gf_InitBoarding ();
void gf_Hack (int lp_player, fixed lp_delay, string lp_code);
void gf_StartHack (int lp_p, unit lp_console);
void gf_HackOutput (int lp_output, int lp_p);
string gf_getRandomCode (int lp_difficulty);
void gf_setOrderId (int lp_p, int lp_id, int lp_max);
void gf_LoadGrid (int lp_player, string lp_code);
void gf_RedrawGrid (int lp_player);
void gf_RedrawStack (int lp_player);
int gf_StringToInteger (string lp_string);
bool gf_UnitHasItem (unit lp_target_u, string lp_item);
void gf_InitHacking ();
int gf_getHackLevel (unit lp_u);
void gf_InitMissileControl ();
bool gf_bayIsLoaded (int lp_bay, int lp_team);
bool gf_isAnyBayLoaded (int lp_team);
void gf_LoadMissile (int lp_slot, int lp_team, unit lp_missileitem);
void gf_PreloadMissile (int lp_slot, int lp_team, unit lp_missileitem);
void gf_MoveMissiles (unit lp_u);
void gf_Firemissile (int lp_p, int lp_bay);
int gf_GetMissileidMissile (string lp_type);
int gf_GetMissileidItem (string lp_type);
bool gf_UnitTypeIsMissile (string lp_type);
void gf_C4countdown (unit lp_u);
void gf_CloseNavigation (int lp_player);
void gf_CloseNavigationIndex (int lp_player, int lp_index);
void gf_EnterNavigation (int lp_player, unit lp_ship);
void gf_InitNavigationControl ();
void gf_InitConstruction ();
void gf_UpdateStorageList (int lp_team);
bool gf_getItemStackable (string lp_type);
int gf_getItemID (string lp_type);
void gf_MoveRefiningMinerals (unit lp_u);
void gf_InitHangar ();
unit gf_Launchship (int lp_trigPlayer, int lp_shipID, unit lp_avatar, int lp_team);
void gf_Closehangar (int lp_player);
int gf_getHangarInventory (int lp_player);
int gf_getHangarInventory2 (int lp_slot, int lp_team);
int gf_getShipID (string lp_type);
int gf_countShips (int lp_team, string lp_type);
int gf_firstEmptySlot (int lp_team);
text gf_CreateSalvageTooltip (int lp_shipID, int lp_p);
void gf_ReconstructShip (int lp_shipID, int lp_team);
void gf_createMiner (int lp_team);
void gf_createWraith (int lp_team);
void gf_createShip (int lp_team, int lp_type, int lp_slot);
void gf_removeShip (int lp_team, int lp_slot);
void gf_destroyShip (int lp_team, int lp_slot);
int gf_findShip (int lp_team, string lp_unit_type);
int gf_GetShipPrice (int lp_p, int lp_shiptype, int lp_mineraltype);
void gf_ShowHideInventory (bool lp_showHide, int lp_player);
void gf_RemoveInventory (int lp_slot, int lp_team);
void gf_Unexploreafterdelay (fixed lp_delay, int lp_p);
void gf_Returntractorbeam (unit lp_u, fixed lp_time);
void gf_InitSensors ();
void gf_createKermiculite (point lp_p);
string gf_IntToMineralName (int lp_id);
void gf_AttachDialogToUnitWithAutohideOutOfScreen (int lp_argDialog, unit lp_argUnit, int lp_argHeightOffset);
bool gf_IsDialogInsideScreenForPlayer (int lp_argDialog, unit lp_argUnit, int lp_argPlayer);
int gf_GetHighestReputationPlayer ();
color gf_MineralColor (int lp_type);
int gf_GetPlayerTeam (int lp_player);
int gf_GetPlayerTeamAI (int lp_player);
point gf_PointBetweenPoints (point lp_p1, point lp_p2);
void gf_DisplayDirectiveMessage (text lp_message, playergroup lp_players, fixed lp_time);
int gf_getRandomPlayerFromPG (playergroup lp_p_group);
playergroup gf_getActivePlayersOnTeam (int lp_team);
unitgroup gf_getEnemyUnitsInUG (unitgroup lp_group, int lp_player);
unitgroup gf_getActiveConsolesInUG (unitgroup lp_group);
region gf_getShipRegion (unit lp_u);
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show);
void gf_DestroyActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_immediate);
void gf_CustomFadeInOut (int lp_player, fixed lp_time, fixed lp_start, fixed lp_stop, soundlink lp_sound);
void gf_TimedLife (unit lp_unit, fixed lp_delay);
void gf_TimedActorLife (actor lp_actor, fixed lp_delay);
int gf_GetPilotOwner (unit lp_u);
unitgroup gf_ItemsNotEquipped (unit lp_carryingunit);
text gf_ColorRealRedGreenWhite (fixed lp_r);
bool gf_IsReal (string lp_str);
fixed gf_MapXofPoint (point lp_p);
fixed gf_MapYofPoint (point lp_p);
fixed gf_DistanceBetweenPointsCustom (point lp_p1, point lp_p2);
text gf_ConvertPointToText (point lp_point);
int gf_MiddleWeightedRandom (int lp_in, int lp_range);
fixed gf_Minus (fixed lp_a);
fixed gf_AngleBetweenAngles (fixed lp_x, fixed lp_y);
bool gf_useEnergy (fixed lp_amount, unit lp_ship);
bool gf_useWeaponEnergy (int lp_amount, unit lp_ship);
void gf_RandomPowerSurge (int lp_team);
void gf_Blackout (playergroup lp_players, fixed lp_time);
void gf_SplitScorpionLightMissile (unit lp_u, int lp_p);
void gf_Rushtowardspoint (unit lp_u, unit lp_nav, point lp_p);
void gf_RegisterCollision (unit lp_u);
void gf_UnregisterCollision (unit lp_u);
void gf_RegisterShipNavigation (unit lp_ship);
void gf_UnregisterShipNavigation (unit lp_ship);
void gf_InitNavigation ();
int gf_shipToIndex (unit lp_ship);
region gf_shipToRegion (unit lp_spaceship);
unit gf_shipToNavigator (unit lp_spaceship);
unit gf_navigatorToShip (unit lp_navigator);
int gf_navigatorToIndex (unit lp_navigator);
int gf_PlayerToIndex (int lp_player, bool lp_supress);
int gf_getSpeedCost (unit lp_unit);
string gf_getSpeedBuff (unit lp_unit);
void gf_PhysicsSetMass (unit lp_unit, fixed lp_mass);
fixed gf_PhysicsGetMass (unit lp_unit);
fixed gf_PhysicsGetSpeed (unit lp_unit);
fixed gf_PhysicsGetSpeed2 (unit lp_unit);
fixed gf_PhysicsGetDirection (unit lp_unit);
void gf_PhysicsSetFriction (unit lp_unit, fixed lp_friction);
fixed gf_PhysicsGetFriction (unit lp_unit);
fixed gf_PhysicsGetDefaultMass (unit lp_unit);
fixed gf_PhysicsGetDefaultFriction (unit lp_unit);
void gf_RegisterPhysics (unit lp_u);
void gf_UnregisterPhysics (unit lp_u);
fixed gf_PhysicsDistance3D (unit lp_unit1, unit lp_unit2);
fixed gf_VectorMagnitude (fixed lp_vectorX, fixed lp_vectorY);
fixed gf_DotProduct (fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2);
void gf_PhysicsCollision (unit lp_object1, unit lp_object2);
void gf_PhysicsCollisionBounce (unit lp_object1, unit lp_object2);
void gf_PhysicsApplyForceCartesian (unit lp_unit, fixed lp_forceX, fixed lp_forceY);
void gf_PhysicsApplyForcePolar (unit lp_unit, fixed lp_force, fixed lp_angle);
void gf_PhysicsSeparateUnits (unit lp_unit1, unit lp_unit2);
void gf_PhysicsRemoveAsteroid (unit lp_unit);
void gf_InitVoteKick ();
void gf_Finalizevotes (int lp_team);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Texttags;
trigger gt_Starttutorial;
trigger gt_StartTutorialIntroduction;
trigger gt_Disabletips;
trigger gt_Enabletips;
trigger gt_NextIntroductiontext;
trigger gt_Disabletutorial;
trigger gt_Disabletutorialconfirmation;
trigger gt_Shiptakesalotofdamage;
trigger gt_BCdies;
trigger gt_BCtargetedDebug;
trigger gt_Leavegame;
trigger gt_UntitledTrigger016;
trigger gt_UntitledTrigger017;
trigger gt_UntitledTrigger027;
trigger gt_CreateBlackHole2;
trigger gt_setRep;
trigger gt_setWins;
trigger gt_setLosses;
trigger gt_setKills;
trigger gt_setDeaths;
trigger gt_getPlayerName;
trigger gt_Teaminfo;
trigger gt_getHandle;
trigger gt_physdebug;
trigger gt_getCharges;
trigger gt_showradius;
trigger gt_changeowner;
trigger gt_hide;
trigger gt_changeowner2;
trigger gt_killselectedunit;
trigger gt_gettimeremaining;
trigger gt_getNrAsteroids;
trigger gt_Opentriggerdebug;
trigger gt_Toggledebug;
trigger gt_StartScreenReady;
trigger gt_Mapinit;
trigger gt_Start;
trigger gt_DistributeConfiguration;
trigger gt_DefaultConfiguration;
trigger gt_Applyconfigurations;
trigger gt_Mouseovermodel;
trigger gt_ChangeRewardType;
trigger gt_Direction;
trigger gt_Cleardirection;
trigger gt_Closedirection;
trigger gt_Opendirection;
trigger gt_ShipStatusupdate;
trigger gt_ShipstatusMinimizeMaximize;
trigger gt_Selectconsole;
trigger gt_ShowSelectConsole;
trigger gt_LeaveConsole;
trigger gt_DisconnectConsole;
trigger gt_Clearafk;
trigger gt_LeaveConsoleMovement;
trigger gt_Teleportlefttop;
trigger gt_Teleportleftbottom;
trigger gt_Teleportrighttop;
trigger gt_Teleportrightbottom;
trigger gt_Applyupgrades;
trigger gt_SwitchView;
trigger gt_ConveyorBelt;
trigger gt_RepairkitRemoveitem;
trigger gt_Hullrepairs;
trigger gt_DroneLoop;
trigger gt_IssueOrder;
trigger gt_Returnhome;
trigger gt_SwitchSelectedDrone;
trigger gt_SwitchSelectedOrder;
trigger gt_Changemineraltypes;
trigger gt_Changeweaponprio;
trigger gt_EnterDroneControl;
trigger gt_PurchaseDrone;
trigger gt_Showstatus;
trigger gt_Orderdrones;
trigger gt_VentQuestion;
trigger gt_ChangeFloor;
trigger gt_LockVent;
trigger gt_LeaveDC;
trigger gt_OpenEnergyControl;
trigger gt_IncreaseCoreOutput;
trigger gt_IncreaseEngine;
trigger gt_IncreaseShields;
trigger gt_IncreaseWeapons;
trigger gt_DecreaseCoreOutput;
trigger gt_DecreaseEngine;
trigger gt_DecreaseShields;
trigger gt_DecreaseWeapons;
trigger gt_HackLeft;
trigger gt_HackRight;
trigger gt_HackDown;
trigger gt_HackUp;
trigger gt_HackHack;
trigger gt_HackLeave;
trigger gt_Enterhacking;
trigger gt_Hackingactorvisual;
trigger gt_fakelevel;
trigger gt_Hack;
trigger gt_LoadMissile;
trigger gt_AutomaticMissileReloading;
trigger gt_Firemissile;
trigger gt_EnterMC;
trigger gt_TrackingBeaconDestroyed;
trigger gt_UnlockCamera;
trigger gt_LockCamera;
trigger gt_C4created;
trigger gt_LeaveNavigation;
trigger gt_OpenNavigation;
trigger gt_EnterConstruction;
trigger gt_EnterUpgrades;
trigger gt_PurchaseItem;
trigger gt_Preventupgradequeue;
trigger gt_TrackLatestUpgrade;
trigger gt_Processing;
trigger gt_ChangeSelectedShip;
trigger gt_CloseHangar;
trigger gt_OpenHangar;
trigger gt_ClosePurchaseShip;
trigger gt_OpenPurchaseShip;
trigger gt_PurchaseShip;
trigger gt_DockShip;
trigger gt_LaunchShip;
trigger gt_DepositHangarItem;
trigger gt_WithdrawAllHangaritems;
trigger gt_Respawn;
trigger gt_Withdrawhangaritem;
trigger gt_SalvageshipOpenconfirm;
trigger gt_SalvageshipOpenconfirm2;
trigger gt_SalvageshipForreal;
trigger gt_LaunchInfiltrator;
trigger gt_LaunchInfiltratorFail;
trigger gt_PurchaseMassReplicator;
trigger gt_OpenMassReplicator;
trigger gt_CreateVeldite;
trigger gt_CreateChalcorium;
trigger gt_CreatePyromanite;
trigger gt_CreateKermiculite;
trigger gt_OpenTractorBeamConsole;
trigger gt_InitTractorBeam;
trigger gt_CancelTractorBeam;
trigger gt_BreakLock;
trigger gt_TractorBeamEffect;
trigger gt_Increasepull;
trigger gt_Increasepush;
trigger gt_FireYamatoCannon;
trigger gt_LoadYamatoCannon;
trigger gt_Yamatochangeanimation;
trigger gt_OpenScience;
trigger gt_PurgeCorePlasma;
trigger gt_PowerTransfer;
trigger gt_KermiculiteSpawn;
trigger gt_MiningPeriodic;
trigger gt_Startmining;
trigger gt_MiningRemoveBehavior;
trigger gt_ReturnmineralsDummy;
trigger gt_ScanAsteroids;
trigger gt_DockCargoDrone;
trigger gt_Miningblock;
trigger gt_InitStations;
trigger gt_Enter;
trigger gt_Leave;
trigger gt_Energy;
trigger gt_CutEngines;
trigger gt_DecoyFlares;
trigger gt_FireMissileSmallship;
trigger gt_DecoyFlaresHotkey;
trigger gt_FireLaser;
trigger gt_TripleBurstCharges;
trigger gt_FireKineticWeapon;
trigger gt_FireBroadside;
trigger gt_ScorpionLightMissilesplit;
trigger gt_InertialNullifierField;
trigger gt_Radarping;
trigger gt_ShieldBoost;
trigger gt_IronCurtain;
trigger gt_EmergencyShieldEnergizer;
trigger gt_EmergencyShieldEnergizerTurnOff;
trigger gt_EngineBoost;
trigger gt_Burst;
trigger gt_ChangeWeaponry;
trigger gt_PlasmaCannon;
trigger gt_EMP;
trigger gt_MinerPing;
trigger gt_Boost;
trigger gt_CloakingFieldOn;
trigger gt_CloakingFieldOff;
trigger gt_Returncargo;
trigger gt_AccelerateMiningBeam;
trigger gt_TurboJump;
trigger gt_MineralVent;
trigger gt_PhotonBarrage;
trigger gt_ReflectiveShield;
trigger gt_PhotonRush;
trigger gt_QuantumBombardment;
trigger gt_ChronitonTorpedoes;
trigger gt_OpposerProximityMine;
trigger gt_EMPMine;
trigger gt_DistressBeacon;
trigger gt_MineTarget;
trigger gt_MineTargetCollision;
trigger gt_NanoHullSpray;
trigger gt_ShieldRecharger;
trigger gt_MagneticPull;
trigger gt_PhaseShift;
trigger gt_QuantumSurge;
trigger gt_ForcePrism;
trigger gt_ForcePrismOff;
trigger gt_PlasmaAutomaton;
trigger gt_PlasmaAutomatonFiring;
trigger gt_PlasmaAutomatonRegisterCollision;
trigger gt_CollisionDetection;
trigger gt_Asteroidcollision;
trigger gt_DecoyFlarecollision;
trigger gt_checkcolgroup;
trigger gt_startRotate;
trigger gt_SpaceLoopDisable;
trigger gt_SpaceLoopLeft;
trigger gt_SpaceLoopRight;
trigger gt_SpaceLoopUp;
trigger gt_SpaceLoopDown;
trigger gt_Movement;
trigger gt_Speed;
trigger gt_Goto;
trigger gt_Acceleration;
trigger gt_Deceleration;
trigger gt_OpeninventoryMarine;
trigger gt_OpeninventoryShip;
trigger gt_OpeninventoryChomper;
trigger gt_OpeninventoryWraith;
trigger gt_FrequencyNullifierEquipFix;
trigger gt_FrequencyNullifierEquipFix2;
trigger gt_BlackHole;
trigger gt_music;
trigger gt_Revive;
trigger gt_Revivefinal;
trigger gt_Faint;
trigger gt_Pickupitems;
trigger gt_MapVision;
trigger gt_Infinitemissiles;
trigger gt_resources;
trigger gt_PlayerLeaves;
trigger gt_Evenoutminerals;
trigger gt_reset;
trigger gt_unstuck;
trigger gt_Checksystems;
trigger gt_OffensiveTierCreateWraith;
trigger gt_EconomyTierFixpricesandrevealasteroids;
trigger gt_Upgradetier1;
trigger gt_Upgradetier2;
trigger gt_Upgradetier3;
trigger gt_Physics;
trigger gt_OpenVoteKick;
trigger gt_StartVoteKick;
trigger gt_Vote;
trigger gt_Votingtimeout;
trigger gt_VotingCooldown;

//--------------------------------------------------------------------------------------------------
// Custom Script: Item Stacking
//--------------------------------------------------------------------------------------------------
//Consumable stacking
string[50] ConsumableId;    //no constants for array indexes in galaxy,
fixed[50] maxCharges;     // take the number of the consumables in your map for the array size
void ConsumableAdd(string id, int maxCharge);
void ConsumableDatabase(){
    //add all consumables, which should stack here
    ConsumableAdd("VelditeOre", 100);
    ConsumableAdd("PyromaniteOre", 100);
    ConsumableAdd("KermiculiteOre", 100);
    ConsumableAdd("ChalcoriumOre", 100);
}
//config end
int ConsumableCount=0;
void Print(string s){
    TriggerDebugOutput(1, StringToText(s), true);
}
void ConsumableAdd(string id, int maxCharge){
    ConsumableCount+=1;
    ConsumableId[ConsumableCount]=id;
    maxCharges[ConsumableCount]=maxCharge;
    DataTableSetBool(true,id,true);
}
bool IsConsumable(unit item){
    return DataTableGetBool(true,UnitGetType(item));
}
string ConsumableGetLink(unit item){
    return "Item/"+UnitGetType(item);
}
int ConsumableGetIndex(unit item){
    string id = UnitGetType(item);
    int i=0;
    while (i<ConsumableCount){
        i+=1;
        if(id == ConsumableId[i]){
            return i;
        }
    }
    return -1;
}
bool ConsumableStacking (bool a, bool b) {
    unit caster = EventUnit();
    unit item = EventUnitInventoryItem();
    unit u;
    string id = UnitGetType(item);
    string s;
    unitgroup g = UnitInventoryGroup(caster);
    int j = UnitGroupCount(g, c_unitCountAlive);
    int i = 0;
    fixed val1;
    fixed val2;
    fixed val3;
    fixed MAX_CHARGES;
    //print("max: " + FixedToString(MAX_CHARGES, 2));
    if(ConsumableGetIndex(item) == -1){ return false;}
    MAX_CHARGES = maxCharges[ConsumableGetIndex(item)];
    
    if (IsConsumable(item)){
        s = ConsumableGetLink(item);
        while (i<j){
            i += 1;
            u = UnitGroupUnit(g, i);
            if (id == UnitGetType(u) && u != item){
                val1 = MAX_CHARGES - UnitGetChargeUsed(item, s);
                //Print("Charges on new acquired item: " + FixedToString(val1, 2));
                val2=MAX_CHARGES-UnitGetChargeUsed(u, s);
                //Print("Charges on present item: " + FixedToString(val2, 2));
                if(val1+val2<=MAX_CHARGES){
                    UnitAddChargeUsed(u, s, -val1);
                    UnitRemove(item);
                    val2=MAX_CHARGES - UnitGetChargeUsed(u, s);
                    //Print("Charges after stacking: " + FixedToString(val2, 2));
                    break;
                }else{
                    val3 = val2 - MAX_CHARGES;
                    UnitAddChargeUsed(u, s, -MAX_CHARGES);
                    UnitAddChargeUsed(item, s, -val3);
                }     
            }
        }
    }
    return true;
}
void ConsumableStacking_Init() {
    trigger t=TriggerCreate("ConsumableStacking");   
    TriggerAddEventUnitInventoryChange(t, null, c_unitInventoryChangeGains, null);
    ConsumableDatabase();
}

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    ConsumableStacking_Init();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_TutorialTransmission (string lp_model, soundlink lp_sound, soundlink lp_sound2, fixed lp_cutSound, fixed lp_splitSound, fixed lp_skipSound, fixed lp_skipSound2, fixed lp_duration, text lp_message, text lp_name, int lp_pos, fixed lp_splitwait) {
    // Implementation
    if ((lp_sound != null)) {
        SoundPlay(lp_sound, PlayerGroupAll(), 100.0, lp_skipSound);
    }
    else {
    }
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel(lp_model), libNtve_gf_CinematicPortrait(lp_pos), "Talk", SoundLink("TValerian01BriefingMarine00017", -1), lp_name, lp_message, lp_duration, c_transmissionDurationAdd, false);
    if ((lp_splitSound == 0.0)) {
        Wait(lp_cutSound, c_timeGame);
        SoundStop(SoundLastPlayed(), true);
        Wait((lp_duration - lp_cutSound), c_timeGame);
    }
    else {
        Wait(lp_splitSound, c_timeGame);
        SoundStop(SoundLastPlayed(), true);
        Wait(lp_splitwait, c_timeGame);
        SoundPlay(lp_sound2, PlayerGroupAll(), 100.0, lp_skipSound2);
        Wait(lp_cutSound, c_timeGame);
        SoundStop(SoundLastPlayed(), true);
        Wait((lp_duration - lp_cutSound), c_timeGame);
    }
}

trigger auto_gf_Tipintroduction_Trigger = null;
int auto_gf_Tipintroduction_lp_p;

void gf_Tipintroduction (int lp_p) {
    auto_gf_Tipintroduction_lp_p = lp_p;

    if (auto_gf_Tipintroduction_Trigger == null) {
        auto_gf_Tipintroduction_Trigger = TriggerCreate("auto_gf_Tipintroduction_TriggerFunc");
    }

    TriggerExecute(auto_gf_Tipintroduction_Trigger, false, false);
}

bool auto_gf_Tipintroduction_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_Tipintroduction_lp_p;

    // Implementation
    Wait(2.0, c_timeGame);
    DialogSetVisible(gv_introductionDialog, gv_newplayers, true);
    return true;
}

void gf_InitIntroduction () {
    // Variable Declarations
    const int lv_xsize = 500;
    const int lv_ysize = 400;
    const int lv_blackoffset = 10;

    // Variable Initialization

    // Implementation
    gv_tutorialText[0] = StringExternal("Param/Value/5FD394C9");
    gv_tutorialText[1] = StringExternal("Param/Value/C96CE7E2");
    gv_tutorialText[2] = StringExternal("Param/Value/5FE44538");
    gv_tutorialText[3] = StringExternal("Param/Value/00D8ED0A");
    gv_tutorialText[4] = StringExternal("Param/Value/DB341521");
    gv_tutorialText[5] = StringExternal("Param/Value/806590D3");
    gv_tutorialText[6] = StringExternal("Param/Value/7DA3F8DF");
    gv_tutorialText[7] = StringExternal("Param/Value/A16D93EE");
    gv_tutorialText[8] = StringExternal("Param/Value/7B1A66EA");
    gv_tutorialText[9] = StringExternal("Param/Value/B059E9DF");
    gv_tutorialText[10] = StringExternal("Param/Value/9989C096");
    DialogCreate(lv_xsize, lv_ysize, c_anchorCenter, -350, -200, true);
    gv_introductionDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_xsize - (2 * lv_blackoffset)), (lv_ysize - (lv_blackoffset * 2)), c_anchorTopLeft, lv_blackoffset, lv_blackoffset, StringExternal("Param/Value/52FE6019"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_xsize, lv_ysize, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/FB97D42C"), "Assets\\Textures\\ui_options_selectonbutton_anim_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_xsize - 100), (lv_ysize - 100), c_anchorTopLeft, 50, 50, gv_tutorialText[0], ColorWithAlpha(0,0,0,0), true, 2.0);
    gv_introductionLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomRight, 50, 50, StringExternal("Param/Value/FB3AA5EE"), StringExternal("Param/Value/D742A6DA"), "");
    gv_introductionNextButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/1DECD209"), StringExternal("Param/Value/0154F5D9"), "");
    gv_introductionCloseButton = DialogControlLastCreated();
    DialogCreate(450, 150, c_anchorCenter, 0, 0, true);
    gv_disableTutorialDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/5E4C222D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomRight, 100, 25, StringExternal("Param/Value/7862BA9C"), StringExternal("Param/Value/A8909DBF"), "");
    gv_disableTutorialYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomLeft, 100, 25, StringExternal("Param/Value/8192458B"), StringExternal("Param/Value/EC8FE73A"), "");
    gv_disableTutorialNo = DialogControlLastCreated();
}

trigger auto_gf_TipHangar_Trigger = null;
int auto_gf_TipHangar_lp_p;

void gf_TipHangar (int lp_p) {
    auto_gf_TipHangar_lp_p = lp_p;

    if (auto_gf_TipHangar_Trigger == null) {
        auto_gf_TipHangar_Trigger = TriggerCreate("auto_gf_TipHangar_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipHangar_Trigger, false, false);
}

bool auto_gf_TipHangar_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_TipHangar_lp_p;

    // Implementation
    gv_tutorial_FirstTimeThroughTeleporters[lp_p] = false;
    DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_introductionNextButton, StringExternal("Param/Value/4779EEB6"), PlayerGroupSingle(EventPlayer()));
    PingDestroy(gv_tutorial_TeleporterPing[lp_p][0]);
    PingDestroy(gv_tutorial_TeleporterPing[lp_p][1]);
    return true;
}

trigger auto_gf_TipShip_Trigger = null;
int auto_gf_TipShip_lp_p;

void gf_TipShip (int lp_p) {
    auto_gf_TipShip_lp_p = lp_p;

    if (auto_gf_TipShip_Trigger == null) {
        auto_gf_TipShip_Trigger = TriggerCreate("auto_gf_TipShip_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipShip_Trigger, false, false);
}

bool auto_gf_TipShip_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_TipShip_lp_p;

    // Implementation
    gv_tutorial_FirstTimeShipLaunching[lp_p] = false;
    DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemText(gv_introductionNextButton, StringExternal("Param/Value/B275A0B7"), PlayerGroupSingle(EventPlayer()));
    PingDestroy(gv_tutorial_HangarPing[lp_p][0]);
    PingDestroy(gv_tutorial_HangarPing[lp_p][1]);
    PingDestroy(gv_tutorial_HangarPing[lp_p][2]);
    PingDestroy(gv_tutorial_HangarPing[lp_p][3]);
    PingDestroy(gv_tutorial_HangarPing[lp_p][4]);
    PingDestroy(gv_tutorial_HangarPing[lp_p][5]);
    UISetButtonHighlighted(PlayerGroupSingle(lp_p), AbilityCommand("CutEngines", 0), true);
    return true;
}

trigger auto_gf_TipReturn_Trigger = null;
int auto_gf_TipReturn_lp_p;

void gf_TipReturn (int lp_p) {
    auto_gf_TipReturn_lp_p = lp_p;

    if (auto_gf_TipReturn_Trigger == null) {
        auto_gf_TipReturn_Trigger = TriggerCreate("auto_gf_TipReturn_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipReturn_Trigger, false, false);
}

bool auto_gf_TipReturn_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_TipReturn_lp_p;

    // Implementation
    gv_tutorial_FirstTimeReturnMessage[lp_p] = false;
    DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(lp_p), true);
    gv_currentTutorialText[lp_p] = 8;
    libNtve_gf_SetDialogItemText(gv_introductionLabel, gv_tutorialText[gv_currentTutorialText[lp_p]], PlayerGroupSingle(lp_p));
    UISetButtonHighlighted(PlayerGroupSingle(lp_p), AbilityCommand("ReturnMineralsDummy", 0), true);
    return true;
}

trigger auto_gf_TipAcceleratemining_Trigger = null;
int auto_gf_TipAcceleratemining_lp_p;

void gf_TipAcceleratemining (int lp_p) {
    auto_gf_TipAcceleratemining_lp_p = lp_p;

    if (auto_gf_TipAcceleratemining_Trigger == null) {
        auto_gf_TipAcceleratemining_Trigger = TriggerCreate("auto_gf_TipAcceleratemining_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipAcceleratemining_Trigger, false, false);
}

bool auto_gf_TipAcceleratemining_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_TipAcceleratemining_lp_p;

    // Implementation
    gv_tutorial_FirstTimeExcessEnergyMessage[lp_p] = false;
    DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(lp_p), true);
    gv_currentTutorialText[lp_p] = 9;
    libNtve_gf_SetDialogItemText(gv_introductionLabel, gv_tutorialText[gv_currentTutorialText[lp_p]], PlayerGroupSingle(lp_p));
    UISetButtonHighlighted(PlayerGroupSingle(lp_p), AbilityCommand("AccelerateMiningBeam", 0), true);
    return true;
}

trigger auto_gf_TipDamage_Trigger = null;
int auto_gf_TipDamage_lp_p;

void gf_TipDamage (int lp_p) {
    auto_gf_TipDamage_lp_p = lp_p;

    if (auto_gf_TipDamage_Trigger == null) {
        auto_gf_TipDamage_Trigger = TriggerCreate("auto_gf_TipDamage_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipDamage_Trigger, false, false);
}

bool auto_gf_TipDamage_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_TipDamage_lp_p;

    // Implementation
    gv_tutorial_FirstTimeTakingDamage[lp_p] = false;
    DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(lp_p), true);
    gv_currentTutorialText[lp_p] = 10;
    libNtve_gf_SetDialogItemText(gv_introductionLabel, gv_tutorialText[gv_currentTutorialText[lp_p]], PlayerGroupSingle(lp_p));
    UISetButtonHighlighted(PlayerGroupSingle(lp_p), AbilityCommand("Dock", 0), true);
    return true;
}

void gf_Endgame (int lp_winningteam, int lp_type) {
    int autoE89494E7_ae;
    int autoE89494E7_ai;

    // Variable Declarations
    text lv_rep;
    unit lv_losingbc;
    point lv_p;
    int lv_a;

    // Variable Initialization

    // Implementation
    if ((gv_gameover == false)) {
        TriggerEnable(gt_BCdies, false);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                if ((gv_inDebug == false)) {
                    gf_BankSave(PlayerGroupLoopCurrent(), "disconnect", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(PlayerGroupLoopCurrent(), "disconnect", "stuff", "")) - 1)), "", PlayerGroupLoopCurrent()));
                }
                else {
                }
                if ((gf_GetPlayerTeam(PlayerGroupLoopCurrent()) == lp_winningteam)) {
                    if ((gv_inDebug == false)) {
                        gf_BankSave(PlayerGroupLoopCurrent(), "win", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(PlayerGroupLoopCurrent(), "win", "stuff", "")) + 1)), "", PlayerGroupLoopCurrent()));
                        gf_BankSave(PlayerGroupLoopCurrent(), "loss", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(PlayerGroupLoopCurrent(), "loss", "stuff", "")) - 1)), "", PlayerGroupLoopCurrent()));
                    }
                    else {
                    }
                }
                else {
                }
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        lv_losingbc = gv_battlecruisers[(3 - lp_winningteam)];
        lv_p = UnitGetPosition(lv_losingbc);
        gv_gameover = true;
        autoE89494E7_ae = 15;
        autoE89494E7_ai = 1;
        lv_a = 1;
        for ( ; ( (autoE89494E7_ai >= 0 && lv_a <= autoE89494E7_ae) || (autoE89494E7_ai <= 0 && lv_a >= autoE89494E7_ae) ) ; lv_a += autoE89494E7_ai ) {
            if ((gv_powerdownoverlay[lv_a] != c_invalidDialogId)) {
                DialogSetVisible(gv_powerdownoverlay[lv_a], PlayerGroupAll(), false);
            }
            else {
            }
        }
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        TriggerEnable(gt_ShipStatusupdate, false);
        TriggerEnable(gt_PlayerLeaves, false);
        DialogSetVisible(gv_shipStatus, PlayerGroupAll(), false);
        DialogSetVisible(gv_headerShipStatus, PlayerGroupAll(), false);
        DialogSetVisible(gv_dC_MainDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_launchMissileDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_dC_MainDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_hangarDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_energyDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_energyDialog2, PlayerGroupAll(), false);
        DialogSetVisible(gv_droneDialog, PlayerGroupAll(), false);
        DialogSetVisible(gv_storageDialog[1], PlayerGroupAll(), false);
        DialogSetVisible(gv_storageDialog[2], PlayerGroupAll(), false);
        DialogSetVisible(gv_purchaseDrone, PlayerGroupAll(), false);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                if ((gv_inDebug == false)) {
                    if ((gf_GetPlayerTeam(PlayerGroupLoopCurrent()) == lp_winningteam)) {
                        gv_realReputation[PlayerGroupLoopCurrent()] += 4.0;
                    }
                    else {
                        gv_realReputation[PlayerGroupLoopCurrent()] += 3.0;
                    }
                    if ((gv_realReputation[PlayerGroupLoopCurrent()] > 0.0)) {
                        lv_rep = TextWithColor(FixedToText(gv_realReputation[PlayerGroupLoopCurrent()], 1), Color(0.00, 100.00, 0.00));
                    }
                    else {
                        if ((gv_realReputation[PlayerGroupLoopCurrent()] < 0.0)) {
                            lv_rep = TextWithColor(FixedToText(gv_realReputation[PlayerGroupLoopCurrent()], 1), Color(100.00, 0.00, 0.00));
                        }
                        else {
                            lv_rep = StringExternal("Param/Value/BF1D6BAC");
                        }
                    }
                    if ((gf_GetPlayerTeam(PlayerGroupLoopCurrent()) == lp_winningteam)) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (TextWithColor(StringExternal("Param/Value/CB96755B"), Color(100.00, 100.00, 50.20)) + lv_rep + TextWithColor(StringExternal("Param/Value/2021CF61"), Color(100.00, 100.00, 50.20))));
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, (TextWithColor(StringExternal("Param/Value/73F85250"), Color(100.00, 100.00, 50.20)) + lv_rep + TextWithColor(StringExternal("Param/Value/03930FA0"), Color(100.00, 100.00, 50.20))));
                    }
                    gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt(FixedToString(gv_realReputation[PlayerGroupLoopCurrent()], 1), "", PlayerGroupLoopCurrent()));
                    CatalogFieldValueSet(c_gameCatalogAbil, "GhostCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", EventPlayer(), IntToString((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "GhostCloak", "Cost[" + IntToString(0) + "].Vital[" + IntToString(0) + "]", EventPlayer()) + 25)));
                }
                else {
                }
                VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(1), 32767.0, false);
                CameraFollowUnitGroup(PlayerGroupLoopCurrent(), UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
                CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromId(1), true);
                CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(lv_losingbc), 0.0, -1, 10, false);
                CameraSetValue(PlayerGroupLoopCurrent(), c_cameraValueYaw, 180.0, 10.0, -1, 10);
                CameraSetData(PlayerGroupSingle(PlayerGroupLoopCurrent()), "Dflt");
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        Wait(0.6, c_timeGame);
        if ((lp_type == 1)) {
            UnitCreateEffectUnit(lv_losingbc, "BattlecruiserCoreExplosion", lv_losingbc);
        }
        else {
            libNtve_gf_CreateActorAtPoint("BattlecruiserDeathNuke", lv_p);
        }
        Wait(0.2, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (TextWithColor((StringExternal("Param/Value/98AA79AB") + IntToText(lp_winningteam) + StringExternal("Param/Value/CE2CBBF6")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex((12 + lp_winningteam), false)))));
        if ((lp_type == 1)) {
            UnitKill(lv_losingbc);
        }
        else {
        }
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                if ((gf_GetPlayerTeam(PlayerGroupLoopCurrent()) == lp_winningteam)) {
                    PlayerGroupAdd(gv_winningplayers, PlayerGroupLoopCurrent());
                }
                else {
                    PlayerGroupAdd(gv_losingplayers, PlayerGroupLoopCurrent());
                }
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        DialogCreate(400, 100, c_anchorCenter, 0, 325, true);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/5C9C2674"), StringExternal("Param/Value/5793314B"), "");
        gv_leavegamebutton = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }
    else {
    }
}

void gf_Inittemporarydebugstuff () {
    int auto33F6E42B_ae;
    int auto33F6E42B_ai;

    // Variable Declarations
    int lv_buttonid;
    int lv_a;

    // Variable Initialization

    // Implementation
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectuncontrolable", "1");
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/197922E6"));
    gv_emergencyminertime = 5.0;
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(1, c_playerPropTerrazine, c_playerPropOperSetTo, 1000);
    PlayerModifyPropertyInt(1, c_playerPropCustom, c_playerPropOperSetTo, 1000);
    PlayerSetAlliance(13, c_allianceIdControl, 1, true);
    gv_respawntime = 3.0;
    TriggerEnable(gt_Infinitemissiles, true);
    TriggerEnable(gt_changeowner, true);
    TriggerEnable(gt_changeowner2, true);
    TriggerEnable(gt_hide, true);
    TriggerEnable(gt_resources, true);
    TriggerEnable(gt_CreateBlackHole2, true);
    TriggerEnable(gt_Orderdrones, true);
    TriggerEnable(gt_killselectedunit, true);
    gv_shipList[1][0].lv_shipType = 0;
    gv_shipList[1][1].lv_shipType = 1;
    gv_shipList[1][2].lv_shipType = 2;
    gv_shipList[1][3].lv_shipType = 3;
    gv_shipList[1][4].lv_shipType = 5;
    auto33F6E42B_ae = (gv_hangarrows - 1);
    auto33F6E42B_ai = 1;
    lv_a = 0;
    for ( ; ( (auto33F6E42B_ai >= 0 && lv_a <= auto33F6E42B_ae) || (auto33F6E42B_ai <= 0 && lv_a >= auto33F6E42B_ae) ) ; lv_a += auto33F6E42B_ai ) {
        IntLoopBegin(0, (gv_hangarcolumns - 1));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_buttonid = ((gv_hangarcolumns * lv_a) + IntLoopCurrent());
            libNtve_gf_SetDialogItemImage(gv_shipListImages[lv_buttonid], gv_shiptypes[gv_shipList[1][lv_buttonid].lv_shipType].lv_buttonImage, GameAttributePlayersForTeam(1));
            libNtve_gf_SetDialogItemImage(gv_shipListImages[lv_buttonid], gv_shiptypes[gv_shipList[2][lv_buttonid].lv_shipType].lv_buttonImage, GameAttributePlayersForTeam(2));
            if ((gv_shiptypes[gv_shipList[1][lv_buttonid].lv_shipType].lv_buttonImage == null)) {
                DialogControlSetVisible(gv_shipListImages[lv_buttonid], GameAttributePlayersForTeam(1), false);
            }
            else {
            }
            if ((gv_shiptypes[gv_shipList[2][lv_buttonid].lv_shipType].lv_buttonImage == null)) {
                DialogControlSetVisible(gv_shipListImages[lv_buttonid], GameAttributePlayersForTeam(2), false);
            }
            else {
            }
        }
        IntLoopEnd();
    }
}

void gf_Generatemap () {
    int auto845803E3_ae;
    int auto845803E3_ai;
    int autoDE1A901E_n;
    int autoDE1A901E_i;
    int autoC75E8B5E_ae;
    int autoC75E8B5E_ai;
    int auto258ADB4F_n;
    int auto258ADB4F_i;

    // Variable Declarations
    int lv_a;
    region lv_spaceHalf;
    string[4] lv_nebulas;
    int lv_type;
    point lv_p;
    int lv_i;
    fixed lv_oldAngle;

    // Variable Initialization
    lv_oldAngle = libNtve_gf_RandomAngle();

    // Implementation
    lv_nebulas[0] = "NebulaPurple";
    lv_nebulas[1] = "NebulaRed";
    lv_nebulas[2] = "NebulaYellow";
    lv_spaceHalf = RegionRect(8.0, 140.0, 120.0, 248.0);
    auto845803E3_ae = 3;
    auto845803E3_ai = 1;
    lv_a = 1;
    for ( ; ( (auto845803E3_ai >= 0 && lv_a <= auto845803E3_ae) || (auto845803E3_ai <= 0 && lv_a >= auto845803E3_ae) ) ; lv_a += auto845803E3_ai ) {
        gf_GenerateAsteroidField(1, (ModI(lv_a, 3) + 1), RegionRandomPoint(lv_spaceHalf), true, false);
        gf_GenerateAsteroidField(2, (ModI(lv_a, 3) + 1), RegionRandomPoint(lv_spaceHalf), true, false);
        gf_GenerateAsteroidField(3, (ModI(lv_a, 3) + 1), RegionRandomPoint(lv_spaceHalf), true, false);
    }
    gf_GenerateAsteroidField(1, 2, RegionRandomPoint(lv_spaceHalf), true, false);
    gf_GenerateAsteroidField(2, 2, RegionRandomPoint(lv_spaceHalf), true, false);
    gf_GenerateAsteroidField(3, 2, RegionRandomPoint(lv_spaceHalf), true, false);
    autoDE1A901E_n = 12;
    for (autoDE1A901E_i = 1; autoDE1A901E_i <= autoDE1A901E_n; autoDE1A901E_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_asteroidTypes[2], 0, 0, RegionRandomPoint(RegionFromId(1)));
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForcePolar(UnitLastCreated(), 750.0, libNtve_gf_RandomAngle());
        gf_PhysicsSetFriction(UnitLastCreated(), 1.0);
        UnitSetCustomValue(UnitLastCreated(), 0, 4.0);
    }
    autoC75E8B5E_ae = 30;
    autoC75E8B5E_ai = 1;
    lv_i = 0;
    for ( ; ( (autoC75E8B5E_ai >= 0 && lv_i <= autoC75E8B5E_ae) || (autoC75E8B5E_ai <= 0 && lv_i >= autoC75E8B5E_ae) ) ; lv_i += autoC75E8B5E_ai ) {
        lv_type = ModI(lv_i, 3);
        lv_p = RegionRandomPoint(RegionFromId(1));
        libNtve_gf_CreateActorAtPoint(lv_nebulas[lv_type], lv_p);
        auto258ADB4F_n = RandomInt(8, 18);
        for (auto258ADB4F_i = 1; auto258ADB4F_i <= auto258ADB4F_n; auto258ADB4F_i += 1) {
            lv_p = PointWithOffsetPolar(lv_p, 3.0, lv_oldAngle);
            lv_oldAngle = (lv_oldAngle + RandomInt(-90, 90));
            libNtve_gf_CreateActorAtPoint(lv_nebulas[lv_type], lv_p);
        }
    }
}

unitgroup gf_GenerateAsteroidField (int lp_mineraltype, int lp_size, point lp_p, bool lp_mirror, bool lp_disperse) {
    // Variable Declarations
    int lv_asteroids;
    int lv_count;
    point lv_randPoint;
    int lv_resource;
    int lv_extraChance;
    region lv_reg;
    unitgroup lv_asteroid_group;
    int lv_size;
    int lv_disperse_modifier;

    // Variable Initialization
    lv_count = 1;
    lv_reg = RegionFromId(1);
    lv_asteroid_group = UnitGroupEmpty();

    // Implementation
    if ((lp_mirror == true)) {
        lv_reg = RegionRect(8.0, 140.0, 120.0, 248.0);
    }
    else {
    }
    lv_asteroids = RandomInt(lp_size*4,lp_size*4+3);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_asteroidTypes[RandomInt(0, 5)], c_unitCreateIgnorePlacement, 0, lp_p);
    UnitGroupAdd(lv_asteroid_group,UnitLastCreated());
    gf_RegisterPhysics(UnitLastCreated());
    UnitSetCustomValue(UnitLastCreated(),0,lp_mineraltype);
    while(lv_count<lv_asteroids+3){
        lv_randPoint = (Point(0.0,0.0));
        while (((DistanceBetweenPoints(lv_randPoint, UnitGetPosition(gv_battlecruisers[1])) < 3.0) || (RegionContainsPoint(lv_reg, lv_randPoint) == false) || (DistanceBetweenPoints(lv_randPoint, UnitGetPosition(gv_battlecruisers[2])) < 3.0))) {
            if(lp_disperse == true){
                lv_disperse_modifier = RandomInt(0,30);
            }
            if (gv_asteroidshower == true) {
                lv_disperse_modifier = RandomInt(0,3);
            }
            lv_randPoint = PointWithOffsetPolar(lp_p,RandomInt(1,lp_size*3+3+lv_disperse_modifier),libNtve_gf_RandomAngle());
        }
        lv_size = RandomInt(0, 5);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_asteroidTypes[lv_size], c_unitCreateIgnorePlacement, 0, lv_randPoint);
        UnitGroupAdd(lv_asteroid_group,UnitLastCreated());
        gf_RegisterPhysics(UnitLastCreated());
        lv_count += 1;
        if(gv_rainbowasteroids == false) {
            if(lp_mineraltype < 4){
                lv_resource = RandomInt(1,3);
                lv_extraChance = RandomInt(1,5);
                if(lv_extraChance <= 2){
                    UnitSetCustomValue(UnitLastCreated(),0,lv_resource);
                } else {
                    UnitSetCustomValue(UnitLastCreated(),0,lp_mineraltype);
                }
            } else {
                UnitSetCustomValue(UnitLastCreated(),0,4);
            }
        } else {
            lv_resource = RandomInt(1,4);
            UnitSetCustomValue(UnitLastCreated(),0,lv_resource);
        }
        if(lp_mirror == true){
            lv_randPoint = Point(256-PointGetX(lv_randPoint),384-PointGetY(lv_randPoint));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_asteroidTypes[lv_size], c_unitCreateIgnorePlacement, 0, lv_randPoint);
            gf_RegisterPhysics(UnitLastCreated());
            if(lp_mineraltype < 4){
                lv_resource = RandomInt(1,3);
                lv_extraChance = RandomInt(1,5);
                if(lv_extraChance <= 2){
                    UnitSetCustomValue(UnitLastCreated(),0,lv_resource);
                } else {
                    UnitSetCustomValue(UnitLastCreated(),0,lp_mineraltype);
                }
            } else {
                UnitSetCustomValue(UnitLastCreated(),0,4);
            }
        }
    }
    return lv_asteroid_group;
}

trigger auto_gf_InitStartScreen_Trigger = null;

void gf_InitStartScreen () {
    if (auto_gf_InitStartScreen_Trigger == null) {
        auto_gf_InitStartScreen_Trigger = TriggerCreate("auto_gf_InitStartScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitStartScreen_Trigger, false, false);
}

bool auto_gf_InitStartScreen_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    playergroup autoF21116B8_g;
    int autoF21116B8_p;
    playergroup auto924D4A09_g;
    int auto924D4A09_p;
    int autoB4B43B0B_ae;
    int autoB4B43B0B_ai;
    int auto40F9FA79_ae;
    int auto40F9FA79_ai;
    playergroup auto01B3C82D_g;
    int auto01B3C82D_p;
    int auto20C63F2E_ae;
    int auto20C63F2E_ai;
    int autoC97FD83C_ae;
    int autoC97FD83C_ai;
    int autoE6BC6C56_ae;
    int autoE6BC6C56_ai;
    int auto8749FC57_ae;
    int auto8749FC57_ai;
    int autoAF61A4AE_ae;
    int autoAF61A4AE_ai;
    int auto261E3CDA_ae;
    int auto261E3CDA_ai;
    int auto0BBED957_ae;
    int auto0BBED957_ai;
    int auto1A9D3077_ae;
    int auto1A9D3077_ai;
    playergroup auto58FC26E8_g;
    int auto58FC26E8_p;

    // Variable Declarations
    text lv_name_label_text;
    text lv_rep_label_text;
    text lv_win_label_text;
    text lv_loss_label_text;
    text lv_kill_label_text;
    text lv_death_label_text;
    int lv_p;
    int lv_image_y_level;
    int lv_a;
    int lv_b;
    int lv_c;
    int[51] lv_models;
    actor[51] lv_actors;
    int lv_id;
    int lv_i;

    // Variable Initialization
    lv_name_label_text = StringExternal("Param/Value/FDB20D89");
    lv_rep_label_text = StringExternal("Param/Value/DCF919F3");
    lv_win_label_text = StringExternal("Param/Value/091EDBA4");
    lv_loss_label_text = StringExternal("Param/Value/451F4305");
    lv_kill_label_text = StringExternal("Param/Value/D6E6C2BD");
    lv_death_label_text = StringExternal("Param/Value/384D5E52");
    lv_image_y_level = -278;
    for (init_i = 0; init_i <= 50; init_i += 1) {
        lv_models[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    gf_Initrewards();
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    gv_startDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 420, 100, c_anchorCenter, 0, -450, StringExternal("Param/Value/EB346630"), "Assets\\Textures\\ui_options_selectonbutton_anim_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 420, 100, c_anchorCenter, 40, -415, StringExternal("Param/Value/8364BED0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1200, 800, c_anchorCenter, -275, 0, StringExternal("Param/Value/FA0D5867"), "Assets\\Textures\\ui_options_selectonbutton_anim_terran.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 400, 750, c_anchorCenter, -650, 0, StringExternal("Param/Value/4BFBF2C1"), "Assets\\Textures\\ui_merc_button_hired.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 75, c_anchorCenter, 180, 325, StringExternal("Param/Value/BA367C9C"), StringExternal("Param/Value/446FC43C"), "");
    gv_ready_Button = DialogControlLastCreated();
    lv_name_label_text = (lv_name_label_text + StringExternal("Param/Value/6EB285CD") + TextWithColor(StringExternal("Param/Value/67C6D472"), Color(100.00, 0.00, 0.00)));
    lv_rep_label_text = (lv_rep_label_text + StringExternal("Param/Value/F69E36FE"));
    lv_win_label_text = (lv_win_label_text + StringExternal("Param/Value/B25891DB"));
    lv_loss_label_text = (lv_loss_label_text + StringExternal("Param/Value/A504DD31"));
    lv_kill_label_text = (lv_kill_label_text + StringExternal("Param/Value/3006168C"));
    lv_death_label_text = (lv_death_label_text + StringExternal("Param/Value/0086909D"));
    lv_image_y_level += 36;
    autoF21116B8_g = GameAttributePlayersForTeam(1); 
    autoF21116B8_p = 1;
    for ( ; autoF21116B8_p <= PlayerGroupCount(autoF21116B8_g) ; autoF21116B8_p += BoolToInt(lv_p == PlayerGroupPlayer(autoF21116B8_g, autoF21116B8_p)) ) {
        lv_p = PlayerGroupPlayer(autoF21116B8_g, autoF21116B8_p);
        if ((lv_p < 13) && (PlayerType(lv_p) != c_playerTypeComputer)) {
            if ((PlayerStatus(lv_p) != c_playerStatusLeft)) {
                lv_name_label_text = (lv_name_label_text + StringExternal("Param/Value/65E6AA89") + TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))));
                lv_rep_label_text = (lv_rep_label_text + StringExternal("Param/Value/F21EA970") + gf_ColorRealRedGreenWhite(gv_reputation[lv_p]));
                lv_win_label_text = (lv_win_label_text + StringExternal("Param/Value/46232612") + StringToText(gf_getData(lv_p, "win", "stuff", " ")));
                lv_loss_label_text = (lv_loss_label_text + StringExternal("Param/Value/DB0BEA2A") + StringToText(IntToString((StringToInt(gf_getData(lv_p, "loss", "stuff", " ")) - 1))));
                lv_kill_label_text = (lv_kill_label_text + StringExternal("Param/Value/BA4C4022") + StringToText(gf_getData(lv_p, "kill", "stuff", " ")));
                lv_death_label_text = (lv_death_label_text + StringExternal("Param/Value/D8970BB2") + StringToText(gf_getData(lv_p, "death", "stuff", " ")));
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorCenter, -445, lv_image_y_level, (TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))) + StringExternal("Param/Value/0A3404CC")), "Assets\\Textures\\ui_objectives_checkbox_completed.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, lv_p, PointWithOffsetPolar(PointFromId(21), 1.0, (60 * lv_p)));
                gv_pilots[lv_p] = UnitLastCreated();
                lv_id = gf_getNewDroneID(1);
                PlayerGroupAdd(gv_disconnectedplayers, lv_p);
                gv_drones[gf_GetPlayerTeam(lv_p)][lv_id].lv_name = PlayerName(lv_p);
                gv_drones[gf_GetPlayerTeam(lv_p)][lv_id].lv_avatar = gv_pilots[lv_p];
                DialogControlRemoveItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_p)), lv_id);
                DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_p)), PlayerName(lv_p));
                DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_p)), StringExternal("Param/Value/7948348E"));
                UnitSetOwner(gv_pilots[lv_p], gf_GetPlayerTeamAI(lv_p), true);
                lv_name_label_text = (lv_name_label_text + StringExternal("Param/Value/5716C71B") + TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))));
                lv_rep_label_text = (lv_rep_label_text + StringExternal("Param/Value/8F112833"));
                lv_win_label_text = (lv_win_label_text + StringExternal("Param/Value/6F29D9F6"));
                lv_loss_label_text = (lv_loss_label_text + StringExternal("Param/Value/F94BEA7C"));
                lv_kill_label_text = (lv_kill_label_text + StringExternal("Param/Value/C75C93F1"));
                lv_death_label_text = (lv_death_label_text + StringExternal("Param/Value/C4C4AA84"));
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 25, c_anchorCenter, 75, lv_image_y_level, StringExternal("Param/Value/117956A3"), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorCenter, -445, lv_image_y_level, (TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))) + StringExternal("Param/Value/0CB4AF7B")), "Assets\\Textures\\ui_glue_checkboxmark_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                TextTagCreate(TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetPlayerTeamAI(lv_p), false))), 24, UnitGetPosition(gv_pilots[lv_p]), 1.0, true, false, GameAttributePlayersForTeam(1));
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
                gv_aItexttags[gf_GetPlayerTeam(lv_p)][lv_id] = TextTagLastCreated();
            }
            gv_ready_Image[lv_p] = DialogControlLastCreated();
            lv_image_y_level += 36;
        }
        else {
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 15, c_anchorCenter, -80, (lv_image_y_level - 18), StringExternal("Param/Value/EEAE9FCF"), "Assets\\Textures\\line_white.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
    lv_name_label_text = (lv_name_label_text + StringExternal("Param/Value/AAA7F55D") + TextWithColor(StringExternal("Param/Value/FFE81CB3"), Color(20.78, 52.16, 99.22)));
    lv_rep_label_text = (lv_rep_label_text + StringExternal("Param/Value/DA32CCA1"));
    lv_win_label_text = (lv_win_label_text + StringExternal("Param/Value/FF2D7F63"));
    lv_loss_label_text = (lv_loss_label_text + StringExternal("Param/Value/3F72AD31"));
    lv_kill_label_text = (lv_kill_label_text + StringExternal("Param/Value/03995F8D"));
    lv_death_label_text = (lv_death_label_text + StringExternal("Param/Value/AF5D1421"));
    lv_image_y_level += 36;
    auto924D4A09_g = GameAttributePlayersForTeam(2); 
    auto924D4A09_p = 1;
    for ( ; auto924D4A09_p <= PlayerGroupCount(auto924D4A09_g) ; auto924D4A09_p += BoolToInt(lv_p == PlayerGroupPlayer(auto924D4A09_g, auto924D4A09_p)) ) {
        lv_p = PlayerGroupPlayer(auto924D4A09_g, auto924D4A09_p);
        if ((lv_p < 13) && (PlayerType(lv_p) != c_playerTypeComputer)) {
            if ((PlayerStatus(lv_p) != c_playerStatusLeft)) {
                lv_name_label_text = (lv_name_label_text + StringExternal("Param/Value/A168BDCF") + TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))));
                lv_rep_label_text = (lv_rep_label_text + StringExternal("Param/Value/999D949C") + gf_ColorRealRedGreenWhite(gv_reputation[lv_p]));
                lv_win_label_text = (lv_win_label_text + StringExternal("Param/Value/90FA2FA2") + StringToText(gf_getData(lv_p, "win", "stuff", " ")));
                lv_loss_label_text = (lv_loss_label_text + StringExternal("Param/Value/E29CD3BA") + StringToText(IntToString((StringToInt(gf_getData(lv_p, "loss", "stuff", " ")) - 1))));
                lv_kill_label_text = (lv_kill_label_text + StringExternal("Param/Value/57720FE6") + StringToText(gf_getData(lv_p, "kill", "stuff", " ")));
                lv_death_label_text = (lv_death_label_text + StringExternal("Param/Value/003677F0") + StringToText(gf_getData(lv_p, "death", "stuff", " ")));
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorCenter, -445, lv_image_y_level, (TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))) + StringExternal("Param/Value/738BEB94")), "Assets\\Textures\\ui_objectives_checkbox_completed.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, lv_p, PointWithOffsetPolar(PointFromId(283), 1.0, (60 * lv_p)));
                gv_pilots[lv_p] = UnitLastCreated();
                lv_id = gf_getNewDroneID(gf_GetPlayerTeam(lv_p));
                PlayerGroupAdd(gv_disconnectedplayers, lv_p);
                gv_drones[gf_GetPlayerTeam(lv_p)][lv_id].lv_name = PlayerName(lv_p);
                gv_drones[gf_GetPlayerTeam(lv_p)][lv_id].lv_avatar = gv_pilots[lv_p];
                DialogControlRemoveItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_p)), lv_id);
                DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_p)), PlayerName(lv_p));
                DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_p)), StringExternal("Param/Value/99B094BF"));
                UnitSetOwner(gv_pilots[lv_p], gf_GetPlayerTeamAI(lv_p), true);
                lv_name_label_text = (lv_name_label_text + StringExternal("Param/Value/F6224D7C") + TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))));
                lv_rep_label_text = (lv_rep_label_text + StringExternal("Param/Value/C5FF5F41"));
                lv_win_label_text = (lv_win_label_text + StringExternal("Param/Value/AB46E675"));
                lv_loss_label_text = (lv_loss_label_text + StringExternal("Param/Value/6C499C2C"));
                lv_kill_label_text = (lv_kill_label_text + StringExternal("Param/Value/4EFEA1D5"));
                lv_death_label_text = (lv_death_label_text + StringExternal("Param/Value/B8AA4715"));
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 25, c_anchorCenter, 75, lv_image_y_level, StringExternal("Param/Value/6B6BD6A5"), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 25, c_anchorCenter, -445, lv_image_y_level, (TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))) + StringExternal("Param/Value/CAE14484")), "Assets\\Textures\\ui_glue_checkboxmark_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                TextTagCreate(TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetPlayerTeamAI(lv_p), false))), 24, UnitGetPosition(gv_pilots[lv_p]), 1.0, true, false, GameAttributePlayersForTeam(2));
                TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
                gv_aItexttags[gf_GetPlayerTeam(lv_p)][lv_id] = TextTagLastCreated();
            }
            gv_ready_Image[lv_p] = DialogControlLastCreated();
            lv_image_y_level += 36;
        }
        else {
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 800, c_anchorCenter, -325, 75, lv_name_label_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 800, c_anchorCenter, -200, 75, lv_rep_label_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 800, c_anchorCenter, -25, 75, lv_win_label_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 800, c_anchorCenter, 85, 75, lv_loss_label_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 800, c_anchorCenter, 200, 75, lv_kill_label_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 800, c_anchorCenter, 300, 75, lv_death_label_text, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 550, 750, c_anchorCenter, 625, 0, StringExternal("Param/Value/8A9501C8"), "Assets\\Textures\\ui_techpurchase_frame_techgroup.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 630, -380, StringExternal("Param/Value/D8BAB0BF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 516, c_anchorCenter, 625, 68, StringExternal("Param/Value/D1661B4A"), "Assets\\Textures\\ui_loadingscreen_playerloadingbar_highlighted.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E94221A9"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/5B4BEAD1"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    gv_reward_ChangeAcquireType = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 490, -310);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/69375465"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E6CF57E2"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2319028C"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    gv_reward_ChangeRewardType = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 490, -240);
    autoB4B43B0B_ae = (gv_reward_amount_x - 1);
    autoB4B43B0B_ai = 1;
    lv_a = 0;
    for ( ; ( (autoB4B43B0B_ai >= 0 && lv_a <= autoB4B43B0B_ae) || (autoB4B43B0B_ai <= 0 && lv_a >= autoB4B43B0B_ae) ) ; lv_a += autoB4B43B0B_ai ) {
        auto40F9FA79_ae = (gv_reward_amount_x - 1);
        auto40F9FA79_ai = 1;
        lv_b = 0;
        for ( ; ( (auto40F9FA79_ai >= 0 && lv_b <= auto40F9FA79_ae) || (auto40F9FA79_ai <= 0 && lv_b >= auto40F9FA79_ae) ) ; lv_b += auto40F9FA79_ai ) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_reward_size, gv_reward_size, c_anchorCenter, (gv_reward_start_x + ((gv_reward_size + gv_reward_gap) * lv_b)), (gv_reward_start_y + (lv_a * (gv_reward_size + gv_reward_gap))), StringExternal("Param/Value/5D2A572D"), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_reward_Border[((lv_a * 4) + lv_b)] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (gv_reward_size - 10), (gv_reward_size - 10), c_anchorCenter, ((gv_reward_start_x + 5) + ((gv_reward_size + gv_reward_gap) * lv_b)), ((gv_reward_start_y + 5) + ((gv_reward_size + gv_reward_gap) * lv_a)), StringExternal("Param/Value/32A3F99B"), StringExternal("Param/Value/17DA05C4"), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/B9718614") + gv_modelRewards[((lv_a * 4) + lv_b)][1][1].lv_name), PlayerGroupAll());
            gv_reward_Button[((lv_a * 4) + lv_b)] = DialogControlLastCreated();
        }
    }
    auto01B3C82D_g = PlayerGroupActive(); 
    auto01B3C82D_p = 1;
    for ( ; auto01B3C82D_p <= PlayerGroupCount(auto01B3C82D_g) ; auto01B3C82D_p += BoolToInt(lv_c == PlayerGroupPlayer(auto01B3C82D_g, auto01B3C82D_p)) ) {
        lv_c = PlayerGroupPlayer(auto01B3C82D_g, auto01B3C82D_p);
        gv_selectedReward[lv_c][1] = gv_modelRewards[0][1][1].lv_unitmodel;
        gv_selectedReward[lv_c][2] = gv_modelRewards[0][2][2].lv_unitmodel;
        gv_selectedReward[lv_c][3] = gv_modelRewards[0][1][3].lv_unitmodel;
        libNtve_gf_SetDialogItemColor(gv_reward_Border[0], Color(0.00, 100.00, 0.00), PlayerGroupSingle(lv_c));
    }
    auto20C63F2E_ae = 2;
    auto20C63F2E_ai = 1;
    lv_b = 1;
    for ( ; ( (auto20C63F2E_ai >= 0 && lv_b <= auto20C63F2E_ae) || (auto20C63F2E_ai <= 0 && lv_b >= auto20C63F2E_ae) ) ; lv_b += auto20C63F2E_ai ) {
        autoC97FD83C_ae = gv_rEWARD_TYPES;
        autoC97FD83C_ai = 1;
        lv_c = 1;
        for ( ; ( (autoC97FD83C_ai >= 0 && lv_c <= autoC97FD83C_ae) || (autoC97FD83C_ai <= 0 && lv_c >= autoC97FD83C_ae) ) ; lv_c += autoC97FD83C_ai ) {
            if ((lv_c != 3)) {
                auto8749FC57_ae = gv_reward_amount;
                auto8749FC57_ai = 1;
                lv_a = 0;
                for ( ; ( (auto8749FC57_ai >= 0 && lv_a <= auto8749FC57_ae) || (auto8749FC57_ai <= 0 && lv_a >= auto8749FC57_ae) ) ; lv_a += auto8749FC57_ai ) {
                    lv_models[lv_a] = c_invalidDialogControlId;
                }
                autoAF61A4AE_ae = gv_reward_amount;
                autoAF61A4AE_ai = 1;
                lv_a = 0;
                for ( ; ( (autoAF61A4AE_ai >= 0 && lv_a <= autoAF61A4AE_ae) || (autoAF61A4AE_ai <= 0 && lv_a >= autoAF61A4AE_ae) ) ; lv_a += autoAF61A4AE_ai ) {
                    if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_model != null)) {
                        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
                        lv_models[lv_a] = DialogControlLastCreated();
                        gv_reward_Model[lv_a][lv_b][lv_c] = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemUnitLink(lv_models[lv_a], gv_modelRewards[lv_a][lv_b][lv_c].lv_unitmodel, PlayerGroupAll());
                        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_modelRewards[lv_a][lv_b][lv_c].lv_offsetx, gv_modelRewards[lv_a][lv_b][lv_c].lv_offsety);
                        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), gv_modelRewards[lv_a][lv_b][lv_c].lv_sizex, gv_modelRewards[lv_a][lv_b][lv_c].lv_sizey);
                        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), gv_modelRewards[lv_a][lv_b][lv_c].lv_camera, PlayerGroupAll());
                        if (((lv_b != 1) || (lv_c != 1))) {
                            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                Wait(0.1, c_timeGame);
                auto261E3CDA_ae = gv_reward_amount;
                auto261E3CDA_ai = 1;
                lv_a = 0;
                for ( ; ( (auto261E3CDA_ai >= 0 && lv_a <= auto261E3CDA_ae) || (auto261E3CDA_ai <= 0 && lv_a >= auto261E3CDA_ae) ) ; lv_a += auto261E3CDA_ai ) {
                    if ((lv_models[lv_a] != c_invalidDialogControlId)) {
                        lv_actors[lv_a] = ActorFromDialogControl(lv_models[lv_a]);
                        ActorSend(lv_actors[lv_a], "AnimClearAllBut Attack");
                        ActorSend(lv_actors[lv_a], "AnimPlay Stand Stand PlayForever");
                        if ((lv_c == 2)) {
                            if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_diffuseTexture == null)) {
                                ActorSend(lv_actors[lv_a], "TextureResetToDefault");
                            }
                            else {
                                ActorSend(lv_actors[lv_a], libNtve_gf_TextureSelectByID(gv_modelRewards[lv_a][lv_b][lv_c].lv_diffuseTexture));
                                ActorSend(lv_actors[lv_a], libNtve_gf_TextureSelectByID(gv_modelRewards[lv_a][lv_b][lv_c].lv_emissiveTexture));
                                ActorSend(lv_actors[lv_a], libNtve_gf_TextureSelectByID(gv_modelRewards[lv_a][lv_b][lv_c].lv_specularTexture));
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
            else {
                autoE6BC6C56_ae = (gv_reward_amount - 1);
                autoE6BC6C56_ai = 1;
                lv_a = 0;
                for ( ; ( (autoE6BC6C56_ai >= 0 && lv_a <= autoE6BC6C56_ae) || (autoE6BC6C56_ai <= 0 && lv_a >= autoE6BC6C56_ae) ) ; lv_a += autoE6BC6C56_ai ) {
                    if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_image != null)) {
                        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_reward_size - 30), (gv_reward_size - 30), c_anchorCenter, gv_modelRewards[lv_a][lv_b][lv_c].lv_offsetx, gv_modelRewards[lv_a][lv_b][lv_c].lv_offsety, StringExternal("Param/Value/BB364C85"), gv_modelRewards[lv_a][lv_b][lv_c].lv_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        gv_reward_Image[lv_a][lv_b][lv_c] = DialogControlLastCreated();
                        if (((lv_b != 1) || (lv_c != 1))) {
                            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
        }
    }
    auto0BBED957_ae = gv_rEWARD_TYPES;
    auto0BBED957_ai = 1;
    lv_c = 1;
    for ( ; ( (auto0BBED957_ai >= 0 && lv_c <= auto0BBED957_ae) || (auto0BBED957_ai <= 0 && lv_c >= auto0BBED957_ae) ) ; lv_c += auto0BBED957_ai ) {
        auto1A9D3077_ae = gv_reward_amount;
        auto1A9D3077_ai = 1;
        lv_a = 0;
        for ( ; ( (auto1A9D3077_ai >= 0 && lv_a <= auto1A9D3077_ae) || (auto1A9D3077_ai <= 0 && lv_a >= auto1A9D3077_ae) ) ; lv_a += auto1A9D3077_ai ) {
            auto58FC26E8_g = PlayerGroupActive(); 
            auto58FC26E8_p = 1;
            for ( ; auto58FC26E8_p <= PlayerGroupCount(auto58FC26E8_g) ; auto58FC26E8_p += BoolToInt(lv_p == PlayerGroupPlayer(auto58FC26E8_g, auto58FC26E8_p)) ) {
                lv_p = PlayerGroupPlayer(auto58FC26E8_g, auto58FC26E8_p);
                if ((lv_p < 13) && ((gv_reputation[lv_p] < gv_modelRewards[lv_a][1][lv_c].lv_requiredreputation) || (gv_modelRewards[lv_a][1][lv_c].lv_requiredreputation == -1.0))) {
                    if ((gv_modelRewards[lv_a][1][lv_c].lv_requiredreputation != -1.0)) {
                        ActorSend(lv_actors[lv_a], "AnimSetPaused Stand");
                        libNtve_gf_SetDialogItemColor(gv_reward_Border[lv_a], Color(100.00, 0.00, 0.00), PlayerGroupSingle(lv_p));
                        libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], (TextWithColor(StringExternal("Param/Value/41E2678A"), Color(100.00, 0.00, 0.00)) + TextWithColor(FixedToText(gv_modelRewards[lv_a][1][lv_c].lv_requiredreputation, 0), Color(87.45, 80.39, 40.00)) + TextWithColor(StringExternal("Param/Value/97A27308"), Color(100.00, 0.00, 0.00))), PlayerGroupSingle(lv_p));
                    }
                    else {
                        if ((gf_SpecialRewardavailableforplayer(lv_p, gv_specialModelRewards[lv_a].lv_iD) == false)) {
                            ActorSend(lv_actors[lv_a], "AnimSetPaused Stand");
                            libNtve_gf_SetDialogItemColor(gv_reward_Border[lv_a], Color(100.00, 0.00, 0.00), PlayerGroupSingle(lv_p));
                            libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], (TextWithColor(StringExternal("Param/Value/E0A819BE"), Color(100.00, 0.00, 0.00)) + TextWithColor(FixedToText(gv_modelRewards[lv_a][1][lv_c].lv_requiredreputation, 0), Color(87.45, 80.39, 40.00)) + TextWithColor(StringExternal("Param/Value/DDC27499"), Color(100.00, 0.00, 0.00))), PlayerGroupSingle(lv_p));
                        }
                        else {
                        }
                    }
                }
                else {
                }
            }
        }
    }
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 1200, 200, c_anchorCenter, -200, 300, StringExternal("Param/Value/E7CECE9F"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(22*100/255,128*100/255,0), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 1200, 200, c_anchorCenter, -200, -400, StringExternal("Param/Value/02FD12F7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(gv_startDialog, 340, 125, c_anchorCenter, -650, -475, StringExternal("Param/Value/732B6AC5"), "Assets\\Textures\\ui_techpurchase_frame_techgroup.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    lib5_gf_DonateButton("cruisercommand@gmail.com", gv_startDialog, 250, 90, -650, 275, "Cruiser Command", "EUR", StringExternal("Param/Value/CD4962FE"), StringExternal("Param/Value/3F2B306D"));
    libNtve_gf_CreateDialogItemImage(gv_startDialog, 500, 600, c_anchorCenter, -690, -100, StringExternal("Param/Value/FC44F443"), "Other\\hint.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), gv_newplayers, true);
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 1200, 200, c_anchorCenter, -200, -220, StringExternal("Param/Value/8711B043"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 300, 200, c_anchorCenter, -650, -150, StringExternal("Param/Value/4C478E36"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_configurelabels[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(gv_startDialog, 30, 30, c_anchorCenter, -510, -241, StringExternal("Param/Value/B18C3BD7"), true);
    gv_configureboxes[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 300, 200, c_anchorCenter, -650, -90, StringExternal("Param/Value/8DEB31C2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_configurelabels[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/AB329DDE"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(gv_startDialog, 30, 30, c_anchorCenter, -510, -181, StringExternal("Param/Value/EBDA40AF"), false);
    gv_configureboxes[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6815BFA5"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 300, 200, c_anchorCenter, -650, -40, StringExternal("Param/Value/CAD60D49"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_configurelabels[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/1DEAEFEA"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(gv_startDialog, 30, 30, c_anchorCenter, -510, -131, StringExternal("Param/Value/56D4DE66"), false);
    gv_configureboxes[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/6D8D25EF"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 300, 200, c_anchorCenter, -650, 10, StringExternal("Param/Value/BA6A1E11"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_configurelabels[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/ACC609EE"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(gv_startDialog, 30, 30, c_anchorCenter, -510, -81, StringExternal("Param/Value/F62980BD"), false);
    gv_configureboxes[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/BF5809A6"), PlayerGroupAll());
    gf_InitConfiguration();
    libNtve_gf_CreateDialogItemLabel(gv_startDialog, 1200, 200, c_anchorCenter, 200, 400, StringExternal("Param/Value/EABD9CFE"), Color(100.00, 0.00, 0.00), false, 2.0);
    gv_starttimer = DialogControlLastCreated();
    gf_Startmanualtimer();
    return true;
}

trigger auto_gf_Startmanualtimer_Trigger = null;

void gf_Startmanualtimer () {
    if (auto_gf_Startmanualtimer_Trigger == null) {
        auto_gf_Startmanualtimer_Trigger = TriggerCreate("auto_gf_Startmanualtimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_Startmanualtimer_Trigger, false, false);
}

bool auto_gf_Startmanualtimer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_time;

    // Variable Initialization
    lv_time = 120;

    // Implementation
    while ((lv_time > 0) && (gv_gamestarted == false)) {
        libNtve_gf_SetDialogItemText(gv_starttimer, (StringExternal("Param/Value/615BE467") + IntToText(lv_time) + StringExternal("Param/Value/DA8F1529")), PlayerGroupAll());
        lv_time -= 1;
        Wait(1.0, c_timeReal);
    }
    if ((gv_gamestarted == false)) {
        gv_gamestarted = true;
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        DialogSetVisible(gv_startDialog, PlayerGroupAll(), false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_Start, true, false);
    }
    else {
    }
    return true;
}

trigger auto_gf_destroyobjectives_Trigger = null;

void gf_destroyobjectives () {
    if (auto_gf_destroyobjectives_Trigger == null) {
        auto_gf_destroyobjectives_Trigger = TriggerCreate("auto_gf_destroyobjectives_TriggerFunc");
    }

    TriggerExecute(auto_gf_destroyobjectives_Trigger, false, false);
}

bool auto_gf_destroyobjectives_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    Wait(300.0, c_timeGame);
    ObjectiveDestroyAll(PlayerGroupAll());
    return true;
}

void gf_InitConfiguration () {
    int autoCB4FF8F5_ae;
    int autoCB4FF8F5_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoCB4FF8F5_ae = gv_configureoptions;
    autoCB4FF8F5_ai = 1;
    lv_i = 0;
    for ( ; ( (autoCB4FF8F5_ai >= 0 && lv_i <= autoCB4FF8F5_ae) || (autoCB4FF8F5_ai <= 0 && lv_i >= autoCB4FF8F5_ae) ) ; lv_i += autoCB4FF8F5_ai ) {
        DialogControlSetEnabled(gv_configureboxes[lv_i], PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_configurelabels[lv_i], PlayerGroupAll(), false);
    }
    gv_configuringplayer = gf_GetHighestReputationPlayer();
    DialogControlSetEnabled(gv_configurelabels[0], PlayerGroupSingle(gv_configuringplayer), true);
    DialogControlSetEnabled(gv_configureboxes[0], PlayerGroupSingle(gv_configuringplayer), true);
}

void gf_Initrewards () {
    // Implementation
    gv_modelRewards[0][1][1].lv_unitmodel = "Marine";
    gv_modelRewards[0][1][1].lv_name = StringExternal("Param/Value/6EE7A07A");
    gv_modelRewards[0][1][1].lv_offsetx = 440;
    gv_modelRewards[0][1][1].lv_offsety = -170;
    gv_modelRewards[0][1][1].lv_requiredreputation = -99999.0;
    gv_modelRewards[0][1][1].lv_sizex = 100;
    gv_modelRewards[0][1][1].lv_sizey = 200;
    gv_modelRewards[0][1][1].lv_model = "Marine";
    gv_modelRewards[1][1][1].lv_unitmodel = "SCV";
    gv_modelRewards[1][1][1].lv_name = StringExternal("Param/Value/F59CD93F");
    gv_modelRewards[1][1][1].lv_offsetx = 565;
    gv_modelRewards[1][1][1].lv_offsety = -170;
    gv_modelRewards[1][1][1].lv_requiredreputation = 5.0;
    gv_modelRewards[1][1][1].lv_sizex = 100;
    gv_modelRewards[1][1][1].lv_sizey = 200;
    gv_modelRewards[1][1][1].lv_model = "SCV";
    gv_modelRewards[2][1][1].lv_unitmodel = "WarPig";
    gv_modelRewards[2][1][1].lv_name = StringExternal("Param/Value/F61D743C");
    gv_modelRewards[2][1][1].lv_offsetx = 690;
    gv_modelRewards[2][1][1].lv_offsety = -170;
    gv_modelRewards[2][1][1].lv_requiredreputation = 15.0;
    gv_modelRewards[2][1][1].lv_sizex = 100;
    gv_modelRewards[2][1][1].lv_sizey = 200;
    gv_modelRewards[2][1][1].lv_model = "WarPig";
    gv_modelRewards[3][1][1].lv_unitmodel = "Reaper";
    gv_modelRewards[3][1][1].lv_name = StringExternal("Param/Value/8931CC95");
    gv_modelRewards[3][1][1].lv_offsetx = 815;
    gv_modelRewards[3][1][1].lv_offsety = -170;
    gv_modelRewards[3][1][1].lv_requiredreputation = 25.0;
    gv_modelRewards[3][1][1].lv_sizex = 100;
    gv_modelRewards[3][1][1].lv_sizey = 200;
    gv_modelRewards[3][1][1].lv_model = "Reaper";
    gv_modelRewards[4][1][1].lv_unitmodel = "Marauder";
    gv_modelRewards[4][1][1].lv_name = StringExternal("Param/Value/0B3BB7E4");
    gv_modelRewards[4][1][1].lv_offsetx = 440;
    gv_modelRewards[4][1][1].lv_offsety = -45;
    gv_modelRewards[4][1][1].lv_requiredreputation = 50.0;
    gv_modelRewards[4][1][1].lv_sizex = 100;
    gv_modelRewards[4][1][1].lv_sizey = 200;
    gv_modelRewards[4][1][1].lv_model = "Marauder";
    gv_modelRewards[5][1][1].lv_unitmodel = "Firebat";
    gv_modelRewards[5][1][1].lv_name = StringExternal("Param/Value/9FD2E786");
    gv_modelRewards[5][1][1].lv_offsetx = 565;
    gv_modelRewards[5][1][1].lv_offsety = -45;
    gv_modelRewards[5][1][1].lv_requiredreputation = 75.0;
    gv_modelRewards[5][1][1].lv_sizex = 100;
    gv_modelRewards[5][1][1].lv_sizey = 200;
    gv_modelRewards[5][1][1].lv_model = "Firebat";
    gv_modelRewards[6][1][1].lv_unitmodel = "Ghost";
    gv_modelRewards[6][1][1].lv_name = StringExternal("Param/Value/C896DBF2");
    gv_modelRewards[6][1][1].lv_offsetx = 690;
    gv_modelRewards[6][1][1].lv_offsety = -45;
    gv_modelRewards[6][1][1].lv_requiredreputation = 100.0;
    gv_modelRewards[6][1][1].lv_sizex = 100;
    gv_modelRewards[6][1][1].lv_sizey = 200;
    gv_modelRewards[6][1][1].lv_model = "Ghost";
    gv_modelRewards[7][1][1].lv_unitmodel = "Spectre";
    gv_modelRewards[7][1][1].lv_name = StringExternal("Param/Value/BD175E5C");
    gv_modelRewards[7][1][1].lv_offsetx = 815;
    gv_modelRewards[7][1][1].lv_offsety = -45;
    gv_modelRewards[7][1][1].lv_requiredreputation = 250.0;
    gv_modelRewards[7][1][1].lv_sizex = 100;
    gv_modelRewards[7][1][1].lv_sizey = 200;
    gv_modelRewards[7][1][1].lv_model = "Spectre";
    gv_modelRewards[8][1][1].lv_unitmodel = "TychusCommando";
    gv_modelRewards[8][1][1].lv_name = StringExternal("Param/Value/CF822DDC");
    gv_modelRewards[8][1][1].lv_offsetx = 440;
    gv_modelRewards[8][1][1].lv_offsety = 80;
    gv_modelRewards[8][1][1].lv_requiredreputation = 500.0;
    gv_modelRewards[8][1][1].lv_sizex = 100;
    gv_modelRewards[8][1][1].lv_sizey = 200;
    gv_modelRewards[8][1][1].lv_model = "Tychus";
    gv_modelRewards[9][1][1].lv_unitmodel = "RaynorCommando";
    gv_modelRewards[9][1][1].lv_name = StringExternal("Param/Value/CD00B8EC");
    gv_modelRewards[9][1][1].lv_offsetx = 565;
    gv_modelRewards[9][1][1].lv_offsety = 80;
    gv_modelRewards[9][1][1].lv_requiredreputation = 750.0;
    gv_modelRewards[9][1][1].lv_sizex = 100;
    gv_modelRewards[9][1][1].lv_sizey = 200;
    gv_modelRewards[9][1][1].lv_model = "RaynorCommando";
    gv_modelRewards[10][1][1].lv_unitmodel = "Tosh";
    gv_modelRewards[10][1][1].lv_name = StringExternal("Param/Value/EA676AEE");
    gv_modelRewards[10][1][1].lv_offsetx = 690;
    gv_modelRewards[10][1][1].lv_offsety = 80;
    gv_modelRewards[10][1][1].lv_requiredreputation = 1000.0;
    gv_modelRewards[10][1][1].lv_sizex = 100;
    gv_modelRewards[10][1][1].lv_sizey = 200;
    gv_modelRewards[10][1][1].lv_model = "Tosh";
    gv_modelRewards[11][1][1].lv_unitmodel = "Nova";
    gv_modelRewards[11][1][1].lv_name = StringExternal("Param/Value/10C83A72");
    gv_modelRewards[11][1][1].lv_offsetx = 815;
    gv_modelRewards[11][1][1].lv_offsety = 80;
    gv_modelRewards[11][1][1].lv_requiredreputation = 1250.0;
    gv_modelRewards[11][1][1].lv_sizex = 100;
    gv_modelRewards[11][1][1].lv_sizey = 200;
    gv_modelRewards[11][1][1].lv_model = "Nova";
    gv_modelRewards[12][1][1].lv_unitmodel = "Predator";
    gv_modelRewards[12][1][1].lv_name = StringExternal("Param/Value/986A2D80");
    gv_modelRewards[12][1][1].lv_offsetx = 440;
    gv_modelRewards[12][1][1].lv_offsety = 205;
    gv_modelRewards[12][1][1].lv_requiredreputation = 1500.0;
    gv_modelRewards[12][1][1].lv_sizex = 100;
    gv_modelRewards[12][1][1].lv_sizey = 200;
    gv_modelRewards[12][1][1].lv_model = "Predator";
    gv_modelRewards[13][1][1].lv_unitmodel = "UtilityBot";
    gv_modelRewards[13][1][1].lv_name = StringExternal("Param/Value/7DABCF03");
    gv_modelRewards[13][1][1].lv_offsetx = 565;
    gv_modelRewards[13][1][1].lv_offsety = 205;
    gv_modelRewards[13][1][1].lv_requiredreputation = 1750.0;
    gv_modelRewards[13][1][1].lv_sizex = 100;
    gv_modelRewards[13][1][1].lv_sizey = 200;
    gv_modelRewards[13][1][1].lv_model = "UtilityBot";
    gv_modelRewards[14][1][1].lv_unitmodel = "Goliath";
    gv_modelRewards[14][1][1].lv_name = StringExternal("Param/Value/77F144C1");
    gv_modelRewards[14][1][1].lv_offsetx = 690;
    gv_modelRewards[14][1][1].lv_offsety = 240;
    gv_modelRewards[14][1][1].lv_requiredreputation = 2000.0;
    gv_modelRewards[14][1][1].lv_sizex = 100;
    gv_modelRewards[14][1][1].lv_sizey = 200;
    gv_modelRewards[14][1][1].lv_camera = "Star2CameraHigher03";
    gv_modelRewards[14][1][1].lv_model = "Goliath";
    gv_modelRewards[15][1][1].lv_unitmodel = "TaurenSpaceMarine";
    gv_modelRewards[15][1][1].lv_name = StringExternal("Param/Value/F7C32540");
    gv_modelRewards[15][1][1].lv_offsetx = 815;
    gv_modelRewards[15][1][1].lv_offsety = 205;
    gv_modelRewards[15][1][1].lv_requiredreputation = 2500.0;
    gv_modelRewards[15][1][1].lv_sizex = 100;
    gv_modelRewards[15][1][1].lv_sizey = 200;
    gv_modelRewards[15][1][1].lv_model = "TaurenSpaceMarine";
    gv_modelRewards[0][1][3].lv_unitmodel = "Marine";
    gv_modelRewards[0][1][3].lv_name = StringExternal("Param/Value/3E3D4631");
    gv_modelRewards[0][1][3].lv_offsetx = 440;
    gv_modelRewards[0][1][3].lv_offsety = -116;
    gv_modelRewards[0][1][3].lv_requiredreputation = -99999.0;
    gv_modelRewards[0][1][3].lv_sizex = 100;
    gv_modelRewards[0][1][3].lv_sizey = 200;
    gv_modelRewards[0][1][3].lv_background = null;
    gv_modelRewards[0][1][3].lv_image = "Other\\defaultsky.dds";
    gv_modelRewards[1][1][3].lv_unitmodel = "SCV";
    gv_modelRewards[1][1][3].lv_name = StringExternal("Param/Value/97CDAE5D");
    gv_modelRewards[1][1][3].lv_offsetx = 563;
    gv_modelRewards[1][1][3].lv_offsety = -116;
    gv_modelRewards[1][1][3].lv_requiredreputation = 20.0;
    gv_modelRewards[1][1][3].lv_sizex = 100;
    gv_modelRewards[1][1][3].lv_sizey = 200;
    gv_modelRewards[1][1][3].lv_background = "AvernusSkybox";
    gv_modelRewards[1][1][3].lv_image = "Other\\avernus.dds";
    gv_modelRewards[2][1][3].lv_unitmodel = "WarPig";
    gv_modelRewards[2][1][3].lv_name = StringExternal("Param/Value/12C87C9F");
    gv_modelRewards[2][1][3].lv_offsetx = 687;
    gv_modelRewards[2][1][3].lv_offsety = -116;
    gv_modelRewards[2][1][3].lv_requiredreputation = 50.0;
    gv_modelRewards[2][1][3].lv_sizex = 100;
    gv_modelRewards[2][1][3].lv_sizey = 200;
    gv_modelRewards[2][1][3].lv_background = "CharSkybox";
    gv_modelRewards[2][1][3].lv_image = "Other\\char.dds";
    gv_modelRewards[3][1][3].lv_unitmodel = "Reaper";
    gv_modelRewards[3][1][3].lv_name = StringExternal("Param/Value/C9B543B8");
    gv_modelRewards[3][1][3].lv_offsetx = 810;
    gv_modelRewards[3][1][3].lv_offsety = -116;
    gv_modelRewards[3][1][3].lv_requiredreputation = 100.0;
    gv_modelRewards[3][1][3].lv_sizex = 100;
    gv_modelRewards[3][1][3].lv_sizey = 200;
    gv_modelRewards[3][1][3].lv_background = "CastanarSkybox";
    gv_modelRewards[3][1][3].lv_image = "Other\\castanar.dds";
    gv_modelRewards[0][2][1].lv_unitmodel = "Thor";
    gv_modelRewards[0][2][1].lv_name = StringExternal("Param/Value/8615C43E");
    gv_modelRewards[0][2][1].lv_offsetx = 440;
    gv_modelRewards[0][2][1].lv_offsety = -120;
    gv_modelRewards[0][2][1].lv_sizex = 100;
    gv_modelRewards[0][2][1].lv_sizey = 200;
    gv_modelRewards[0][2][1].lv_camera = "Star2CameraHigher06";
    gv_modelRewards[0][2][1].lv_model = "ThorNew";
    gv_modelRewards[0][2][1].lv_iD = "CCTOURNAMENT1MODEL";
    gv_modelRewards[0][2][1].lv_requirement = "Awarded for achieving first or second place in the first Cruiser Command Tournament.";
    gv_modelRewards[0][2][1].lv_scale = 0.7;
    gv_modelRewards[1][2][1].lv_unitmodel = "Archon";
    gv_modelRewards[1][2][1].lv_name = StringExternal("Param/Value/FEAEFB40");
    gv_modelRewards[1][2][1].lv_offsetx = 565;
    gv_modelRewards[1][2][1].lv_offsety = -120;
    gv_modelRewards[1][2][1].lv_sizex = 100;
    gv_modelRewards[1][2][1].lv_sizey = 200;
    gv_modelRewards[1][2][1].lv_camera = "Star2CameraHigher03";
    gv_modelRewards[1][2][1].lv_model = "Archon";
    gv_modelRewards[1][2][1].lv_iD = "CALADMODEL";
    gv_modelRewards[1][2][1].lv_requirement = "Awarded to Caladbolg for paying for cruisercommand.com for a year.";
    gv_modelRewards[1][2][1].lv_scale = 0.8;
    gv_modelRewards[2][2][1].lv_unitmodel = "ScienceVessel";
    gv_modelRewards[2][2][1].lv_name = StringExternal("Param/Value/2B254167");
    gv_modelRewards[2][2][1].lv_offsetx = 690;
    gv_modelRewards[2][2][1].lv_offsety = -120;
    gv_modelRewards[2][2][1].lv_sizex = 100;
    gv_modelRewards[2][2][1].lv_sizey = 200;
    gv_modelRewards[2][2][1].lv_camera = "Star2CameraHigher04";
    gv_modelRewards[2][2][1].lv_model = "ScienceVessel";
    gv_modelRewards[2][2][1].lv_iD = "DONATORMODEL";
    gv_modelRewards[2][2][1].lv_requirement = "Awarded to donators";
    gv_modelRewards[2][2][1].lv_scale = 0.8;
    gv_modelRewards[0][2][2].lv_unitmodel = "MarineDefaultskin";
    gv_modelRewards[0][2][2].lv_name = StringExternal("Param/Value/7BD2D20E");
    gv_modelRewards[0][2][2].lv_offsetx = 440;
    gv_modelRewards[0][2][2].lv_offsety = -170;
    gv_modelRewards[0][2][2].lv_sizex = 100;
    gv_modelRewards[0][2][2].lv_sizey = 200;
    gv_modelRewards[0][2][2].lv_model = "MarineDefaultskin";
    gv_modelRewards[0][2][2].lv_iD = "DEFAULT";
    gv_modelRewards[0][2][2].lv_requirement = "Default skin";
    gv_modelRewards[1][2][2].lv_unitmodel = "MarineTournamentskin";
    gv_modelRewards[1][2][2].lv_name = StringExternal("Param/Value/A6D67806");
    gv_modelRewards[1][2][2].lv_offsetx = 565;
    gv_modelRewards[1][2][2].lv_offsety = -170;
    gv_modelRewards[1][2][2].lv_sizex = 100;
    gv_modelRewards[1][2][2].lv_sizey = 200;
    gv_modelRewards[1][2][2].lv_model = "MarineTournamentskin";
    gv_modelRewards[1][2][2].lv_iD = "CCTOURNAMENT1SKIN";
    gv_modelRewards[1][2][2].lv_requirement = "Awarded for achieveing first place in the first Cruiser Command Tournament.";
    gv_modelRewards[1][2][2].lv_diffuseTexture = "Marine_Diffuse";
    gv_modelRewards[1][2][2].lv_emissiveTexture = "Marine_Emissive";
    gv_modelRewards[1][2][2].lv_specularTexture = "Marine_Specular";
    gv_firstCCTournamentModelReward[2] = "1-S2-1-1959171";
    gv_firstCCtournamentSkinReward[2] = "1-S2-1-1959171";
    gv_firstCCTournamentModelReward[3] = "1-S2-1-1136343";
    gv_firstCCtournamentSkinReward[3] = "1-S2-1-1136343";
    gv_donatormodel[1] = "1-S2-1-1136343";
    gv_firstCCTournamentModelReward[4] = "1-S2-1-2088956";
    gv_firstCCtournamentSkinReward[4] = "1-S2-1-2088956";
    gv_firstCCTournamentModelReward[5] = "1-S2-1-4270277";
    gv_firstCCtournamentSkinReward[5] = "1-S2-1-4270277";
    gv_firstCCTournamentModelReward[6] = "1-S2-1-3484455";
    gv_firstCCtournamentSkinReward[6] = "1-S2-1-3484455";
    gv_firstCCTournamentModelReward[7] = "1-S2-1-1546689";
    gv_firstCCtournamentSkinReward[7] = "1-S2-1-1546689";
    gv_firstCCTournamentModelReward[8] = "1-S2-1-492464";
    gv_firstCCTournamentModelReward[9] = "1-S2-1-1727564";
    gv_firstCCTournamentModelReward[10] = "1-S2-1-3165368";
    gv_firstCCTournamentModelReward[11] = "1-S2-1-651529";
    gv_firstCCTournamentModelReward[12] = "1-S2-1-374643";
    gv_firstCCTournamentModelReward[13] = "1-S2-1-511076";
    gv_caladbolgspecialmodel[0] = "1-S2-1-2452872";
    gv_donatormodel[0] = "1-S2-1-2452872";
    gv_donatormodel[2] = "1-S2-1-1520109";
    gv_donatormodel[3] = "1-S2-1-4335198";
}

bool gf_SpecialRewardavailableforplayer (int lp_p, string lp_iD) {
    string autoABB18DF9_val;
    int auto5626318F_ae;
    int auto5626318F_ai;
    int autoD09D9732_ae;
    int autoD09D9732_ai;
    int auto91C35847_ae;
    int auto91C35847_ai;
    int autoDC501B46_ae;
    int autoDC501B46_ai;
    int auto9A1595B2_ae;
    int auto9A1595B2_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoABB18DF9_val = lp_iD;
    if (autoABB18DF9_val == "CCTOURNAMENT1MODEL") {
        auto5626318F_ae = 15;
        auto5626318F_ai = 1;
        lv_i = 0;
        for ( ; ( (auto5626318F_ai >= 0 && lv_i <= auto5626318F_ae) || (auto5626318F_ai <= 0 && lv_i >= auto5626318F_ae) ) ; lv_i += auto5626318F_ai ) {
            if ((PlayerHandle(lp_p) == gv_firstCCTournamentModelReward[lv_i])) {
                return true;
            }
            else {
            }
        }
    }
    else if (autoABB18DF9_val == "HELLION") {
        autoD09D9732_ae = 15;
        autoD09D9732_ai = 1;
        lv_i = 0;
        for ( ; ( (autoD09D9732_ai >= 0 && lv_i <= autoD09D9732_ae) || (autoD09D9732_ai <= 0 && lv_i >= autoD09D9732_ae) ) ; lv_i += autoD09D9732_ai ) {
            if ((PlayerHandle(lp_p) == gv_hellionTestReward[lv_i])) {
                return true;
            }
            else {
            }
        }
    }
    else if (autoABB18DF9_val == "CCTOURNAMENT1SKIN") {
        auto91C35847_ae = 15;
        auto91C35847_ai = 1;
        lv_i = 0;
        for ( ; ( (auto91C35847_ai >= 0 && lv_i <= auto91C35847_ae) || (auto91C35847_ai <= 0 && lv_i >= auto91C35847_ae) ) ; lv_i += auto91C35847_ai ) {
            if ((PlayerHandle(lp_p) == gv_firstCCtournamentSkinReward[lv_i])) {
                return true;
            }
            else {
            }
        }
    }
    else if (autoABB18DF9_val == "CALADMODEL") {
        autoDC501B46_ae = 15;
        autoDC501B46_ai = 1;
        lv_i = 0;
        for ( ; ( (autoDC501B46_ai >= 0 && lv_i <= autoDC501B46_ae) || (autoDC501B46_ai <= 0 && lv_i >= autoDC501B46_ae) ) ; lv_i += autoDC501B46_ai ) {
            if ((PlayerHandle(lp_p) == gv_caladbolgspecialmodel[lv_i])) {
                return true;
            }
            else {
            }
        }
    }
    else if (autoABB18DF9_val == "DONATORMODEL") {
        auto9A1595B2_ae = 15;
        auto9A1595B2_ai = 1;
        lv_i = 0;
        for ( ; ( (auto9A1595B2_ai >= 0 && lv_i <= auto9A1595B2_ae) || (auto9A1595B2_ai <= 0 && lv_i >= auto9A1595B2_ae) ) ; lv_i += auto9A1595B2_ai ) {
            if ((PlayerHandle(lp_p) == gv_donatormodel[lv_i])) {
                return true;
            }
            else {
            }
        }
    }
    else if (autoABB18DF9_val == "DEFAULT") {
        return true;
    }
    else {
    }
    return false;
}

int gf_GetRewardBorder (int lp_button) {
    int autoCB461019_ae;
    int autoCB461019_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    autoCB461019_ae = 15;
    autoCB461019_ai = 1;
    lv_a = 0;
    for ( ; ( (autoCB461019_ai >= 0 && lv_a <= autoCB461019_ae) || (autoCB461019_ai <= 0 && lv_a >= autoCB461019_ae) ) ; lv_a += autoCB461019_ai ) {
        if ((lp_button == gv_reward_Button[lv_a])) {
            return lv_a;
        }
        else {
        }
    }
    return -1;
}

int gf_GetSelectedBorder (string lp_model, int lp_p) {
    int auto0CB4ADAA_ae;
    int auto0CB4ADAA_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto0CB4ADAA_ae = 15;
    auto0CB4ADAA_ai = 1;
    lv_a = 0;
    for ( ; ( (auto0CB4ADAA_ai >= 0 && lv_a <= auto0CB4ADAA_ae) || (auto0CB4ADAA_ai <= 0 && lv_a >= auto0CB4ADAA_ae) ) ; lv_a += auto0CB4ADAA_ai ) {
        if ((lp_model == gv_modelRewards[lv_a][DialogControlGetSelectedItem(gv_reward_ChangeAcquireType, lp_p)][DialogControlGetSelectedItem(gv_reward_ChangeRewardType, lp_p)].lv_unitmodel)) {
            return lv_a;
        }
        else {
        }
    }
    return -1;
}

void gf_InitBanks () {
    // Implementation
}

string gf_encrypt (string lp_str, string lp_key, int lp_p) {
    // Variable Declarations
    string lv_encrypted_str;
    string lv_random_str;

    // Variable Initialization
    lv_encrypted_str = "";
    lv_random_str = "";

    // Implementation
    // Please don't hack the game. Reputation has no real meaning anyway.
    lv_encrypted_str = lib4_gf_StarcodeEncryptString((lp_str + "#" + PlayerHandle(lp_p)), lp_key);
    lv_encrypted_str = lib4_gf_StarcodeHashString(lv_encrypted_str, 4);
    lv_encrypted_str = lib4_gf_StarcodeDecryptString(lv_encrypted_str, lp_key);
    lv_random_str = gf_random_str(10);
    lv_encrypted_str = lib4_gf_StarcodeEncryptString((PlayerHandle(lp_p) + "#" + lp_str), (lp_key + lv_random_str));
    lv_encrypted_str = (lv_encrypted_str + lv_random_str);
    lv_encrypted_str = lib4_gf_StarcodeHashString(lv_encrypted_str, 4);
    return lv_encrypted_str;
}

string gf_random_str (int lp_length) {
    int auto2D738263_ae;
    int auto2D738263_ai;

    // Variable Declarations
    int lv_a;
    string lv_str;
    int lv_index;

    // Variable Initialization
    lv_str = "";

    // Implementation
    auto2D738263_ae = lp_length;
    auto2D738263_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2D738263_ai >= 0 && lv_a <= auto2D738263_ae) || (auto2D738263_ai <= 0 && lv_a >= auto2D738263_ae) ) ; lv_a += auto2D738263_ai ) {
        lv_index = RandomInt(1, StringLength(lib4_gf_StarcodeGetEncryptionAlphabet()));
        lv_str = (lv_str + StringSub(lib4_gf_StarcodeGetEncryptionAlphabet(), lv_index, (lv_index + 0)));
    }
    return lv_str;
}

string gf_getData (int lp_player, string lp_key, string lp_section, string lp_cryptkey) {
    // Variable Declarations
    string lv_str;
    string lv_str2;
    string lv_handle;
    string lv_returnstr;
    string lv_salt;
    const int lv_saltlength = 10;

    // Variable Initialization
    lv_str = "";
    lv_str2 = "";
    lv_handle = "";
    lv_returnstr = "";
    lv_salt = "";

    // Implementation
    if ((BankVerify(gv_playerBanks[lp_player]) == true)) {
        lv_str = BankValueGetAsString(gv_playerBanks[lp_player], lp_section, lp_key);
        if ((lib4_gf_StarcodeValidateString(lv_str, 4) == true)) {
            lv_str = lib4_gf_StarcodeRemoveHashfromString(lv_str, 4);
            lv_str = lib4_gf_StarcodeDecryptString(lv_str, lp_cryptkey);
            lv_handle = StringSub(lv_str, 1, (StringFind(lv_str, "#", c_stringCase) - 1));
            if ((PlayerHandle(lp_player) == lv_handle)) {
                lv_returnstr = StringSub(lv_str, (StringFind(lv_str, "#", c_stringCase) + 1), StringLength(lv_str));
                if ((gf_IsReal(lv_returnstr) == true)) {
                    return lv_returnstr;
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((BankVerify(gv_playerBanks[lp_player]) == true)) {
        lv_str = BankValueGetAsString(gv_playerBanks[lp_player], lp_section, lp_key);
        if ((lib4_gf_StarcodeValidateString(lv_str, 4) == true)) {
            lv_str = lib4_gf_StarcodeRemoveHashfromString(lv_str, 4);
            lv_str2 = StringSub(lv_str, 1, (StringLength(lv_str) - (lv_saltlength + 0)));
            lv_salt = StringSub(lv_str, (StringLength(lv_str) - (lv_saltlength - 1)), StringLength(lv_str));
            lv_str = lib4_gf_StarcodeDecryptString(lv_str2, (lp_cryptkey + lv_salt));
            lv_handle = StringSub(lv_str, 1, (StringFind(lv_str, "#", c_stringCase) - 1));
            if ((PlayerHandle(lp_player) == lv_handle)) {
                if ((StringContains(lv_str, "#", c_stringAnywhere, c_stringNoCase) == true)) {
                    lv_str = StringSub(lv_str, (StringFind(lv_str, "#", c_stringCase) + 1), StringLength(lv_str));
                }
                else {
                }
                return lv_str;
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return null;
}

void gf_BankSave (int lp_p, string lp_key, string lp_section, string lp_value) {
    // Implementation
    BankValueSetFromString(gv_playerBanks[lp_p], lp_section, lp_key, lp_value);
    BankSave(gv_playerBanks[lp_p]);
}

trigger auto_gf_InitGeneralSystems_Trigger = null;

void gf_InitGeneralSystems () {
    if (auto_gf_InitGeneralSystems_Trigger == null) {
        auto_gf_InitGeneralSystems_Trigger = TriggerCreate("auto_gf_InitGeneralSystems_TriggerFunc");
    }

    TriggerExecute(auto_gf_InitGeneralSystems_Trigger, false, false);
}

bool auto_gf_InitGeneralSystems_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_a;
    fixed lv_maxHull;
    fixed lv_currHull;
    fixed lv_maxShields;
    fixed lv_currShields;
    int lv_hull_label;
    int lv_shield_label;
    int lv_missiles_label;
    int lv_energy_label;
    int lv_speed_label;
    int lv_core_label;
    int[11] lv_battlecruiser_regions;
    int lv_team;
    fixed lv_red;
    fixed lv_green;

    // Variable Initialization
    lv_hull_label = c_invalidDialogControlId;
    lv_shield_label = c_invalidDialogControlId;
    lv_missiles_label = c_invalidDialogControlId;
    lv_energy_label = c_invalidDialogControlId;
    lv_speed_label = c_invalidDialogControlId;
    lv_core_label = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_battlecruiser_regions[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    gv_directionLocations[1][0] = PointFromId(169);
    gv_directionLocations[2][0] = PointFromId(771);
    gv_directionLocations[1][1] = PointFromId(15);
    gv_directionLocations[2][1] = PointFromId(796);
    gv_directionLocations[1][2] = PointFromId(115);
    gv_directionLocations[2][2] = PointFromId(116);
    gv_directionLocations[1][3] = PointFromId(113);
    gv_directionLocations[2][3] = PointFromId(114);
    gv_directionLocations[1][4] = PointFromId(227);
    gv_directionLocations[2][4] = PointFromId(228);
    gv_directionLocations[1][5] = PointFromId(229);
    gv_directionLocations[2][5] = PointFromId(230);
    DialogCreate(300, 355, c_anchorBottomRight, 0, 320, true);
    gv_directionsdialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, 270, StringExternal("Param/Value/10A688F7"), StringExternal("Param/Value/441C4FB8"), "");
    gv_directionsdialogbuttons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, 210, StringExternal("Param/Value/D65AC15D"), StringExternal("Param/Value/07634920"), "");
    gv_directionsdialogbuttons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, 150, StringExternal("Param/Value/752A2E13"), StringExternal("Param/Value/CF9744D0"), "");
    gv_directionsdialogbuttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTop, 0, 90, StringExternal("Param/Value/B4CAE1DC"), StringExternal("Param/Value/3EAB1447"), "");
    gv_directionsdialogbuttons[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/B8BFC933"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 35, 35, c_anchorTopRight, 0, 5, StringExternal("Param/Value/C18E77D7"), StringExternal("Param/Value/6194DE09"), "");
    gv_closeDirections = DialogControlLastCreated();
    DialogCreate(250, 50, c_anchorBottomRight, 0, 320, true);
    gv_openDirectionsdialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/EB009497"), StringExternal("Param/Value/F35CADFD"), "");
    gv_openDirections = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogCreate(250, 50, c_anchorTop, 50, 50, true);
    gv_switchView = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/3452B1EF"), StringExternal("Param/Value/B73BF05A"), "");
    gv_switchViewButton = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(250, 50, c_anchorTop, 50, 100, true);
    gv_selectConsole = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/8EFC7F19"), StringExternal("Param/Value/3742A2B0"), "");
    gv_selectConsoleButton = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogCreate(400, 80, c_anchorTopRight, 0, 50, true);
    gv_headerShipStatus = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 52, 30, StringExternal("Param/Value/DF98A4C5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 40, 35, c_anchorTopRight, 26, 25, StringExternal("Param/Value/244862E6"), StringExternal("Param/Value/34CEC97A"), "");
    gv_shipStatusMaxmin = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 26, 26, c_anchorTopRight, 33, 28, StringExternal("Param/Value/39A2152F"), "EditorData\\Images\\MoveUp.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_shipStatusMaxminimage = DialogControlLastCreated();
    DialogCreate(400, 370, c_anchorTopRight, 0, 130, true);
    gv_shipStatus = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    // -- Status labels -- //
    lv_currHull = UnitGetPropertyFixed(gv_battlecruisers[1], c_unitPropLife, c_unitPropCurrent);
    lv_maxHull = UnitGetPropertyFixed(gv_battlecruisers[1], c_unitPropLife, c_unitPropNormal);
    lv_currShields = UnitGetPropertyFixed(gv_battlecruisers[1], c_unitPropShields, c_unitPropCurrent);
    lv_maxShields = UnitGetPropertyFixed(gv_battlecruisers[1], c_unitPropShieldsMax, c_unitPropCurrent);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 40, StringToText("<s val=\"PlanetPanelTechnologyName\">")+TextWithColor(StringToText("Hull:"), ColorWithAlpha(0.00, 100.00, 0.00, 0.00))+TextWithColor(FixedToText(lv_currHull,0)+StringToText("/")+FixedToText(lv_maxHull,0),ColorWithAlpha(0.00,100.00,0.00,0.00))+StringToText("</s>"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_hull_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 70, StringToText("<s val=\"PlanetPanelTechnologyName\">")+TextWithColor(StringToText("Shields:"), ColorWithAlpha(0.00, 0.00, 100.00,0.00))+TextWithColor(FixedToText(lv_currShields,0)+StringToText("/")+FixedToText(lv_maxShields,0),ColorWithAlpha(0.00,0.00,100.00,0.00))+StringToText("</s>"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_shield_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 160, StringToText("<s val=\"PlanetPanelTechnologyName\">Missiles: ")+StringToText("ERROR/6")+StringToText("</s>"), ColorWithAlpha(85,0,0,0), false, 2.0);
    gv_missiles_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 100, StringToText("<s val=\"PlanetPanelTechnologyName\">Energy: ")+StringToText("ERROR GJ")+StringToText("</s>"), ColorWithAlpha(0,100,100,0), false, 2.0);
    gv_energy_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 130, StringToText("<s val=\"PlanetPanelTechnologyName\">Weapon cap: ")+StringToText("ERROR GJ")+StringToText("</s>"), ColorWithAlpha(0,80,80,0), false, 2.0);
    gv_weapon_energy_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 190, StringToText("<s val=\"PlanetPanelTechnologyName\">Speed: ")+StringToText("ERRORm/s")+StringToText("</s>"), ColorWithAlpha(100,100,0,0), false, 2.0);
    gv_speed_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 220, StringToText("<s val=\"PlanetPanelTechnologyName\">Core: ")+StringToText("100% (NYI)")+StringToText("</s>"), ColorWithAlpha(100,50,25,0), false, 2.0);
    gv_core_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 250, StringToText("<s val=\"PlanetPanelTechnologyName\">Tier 1: ")+StringToText("None")+StringToText("</s>"), ColorWithAlpha(100,100,100,0), false, 2.0);
    gv_tier1_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 280, StringToText("<s val=\"PlanetPanelTechnologyName\">Tier 2: ")+StringToText("None")+StringToText("</s>"), ColorWithAlpha(100,100,100,0), false, 2.0);
    gv_tier2_label = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorTopLeft, 30, 310, StringToText("<s val=\"PlanetPanelTechnologyName\">Tier 3: ")+StringToText("None")+StringToText("</s>"), ColorWithAlpha(100,100,100,0), false, 2.0);
    gv_tier3_label = DialogControlLastCreated();
    // -- Top -- //
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 25, c_anchorTopLeft, 70, 50, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[0] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 25, 35, c_anchorTopLeft, 100, 80, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[1] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 20, c_anchorTopLeft, 90, 120, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[2] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 20, c_anchorTopLeft, 90, 145, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[3] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 20, c_anchorTopLeft, 35, 135, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[4] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 20, c_anchorTopLeft, 145, 135, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[5] = DialogControlLastCreated();
    // -- Bottom -- //
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 30, c_anchorTopLeft, 270, 50, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[6] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 30, c_anchorTopLeft, 280, 85, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[7] = DialogControlLastCreated();
    //libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 30, c_anchorTopLeft, 270, 120, null, "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    //lv_battlecruiser_regions[8] = DialogControlLastCreated();
    return true;
}

void gf_LeaveConsole (int lp_trigPlayer, unit lp_trigUnit) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;
    int lv_index;
    bool lv_disconnectingCorrect;
    fixed lv_progress;
    string lv_upgrade;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior(lp_trigUnit, "InConsole") == true)) {
        lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_trigUnit));
        lv_closestConsole = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_trigUnit));
        lv_disconnectingCorrect = (UnitGetOwner(lv_closestConsole) == lp_trigPlayer);
        if ((lv_disconnectingCorrect == true)) {
            UnitBehaviorRemove(lv_closestConsole, "DisconnectConsole", 3);
            UnitBehaviorRemove(lv_closestU, "ConsoleOccupied", 1);
            lv_progress = UnitGetProgressComplete(lv_closestConsole, 1);
            if ((UnitGetType(lv_closestConsole) == "UpgradeConsole")) {
                UnitSetOwner(lv_closestConsole, gf_GetPlayerTeamAI(lp_trigPlayer), false);
            }
            else {
                UnitSetOwner(lv_closestConsole, 0, false);
            }
        }
        else {
        }
        UnitClearSelection(lp_trigPlayer);
        UnitSelect(gv_pilots[lp_trigPlayer], lp_trigPlayer, true);
        UnitBehaviorRemove(lp_trigUnit, "InConsole", 1);
        PlayerGroupRemove(gv_consolePlayers, lp_trigPlayer);
        DialogSetVisible(gv_selectConsole, PlayerGroupSingle(lp_trigPlayer), false);
        gf_ShowHideInventory(false, lp_trigPlayer);
        PlayerGroupRemove(gv_laserPlayers, lp_trigPlayer);
        UISetCommandAllowed(PlayerGroupSingle(lp_trigPlayer), c_uiCommandAllowSmartClick, true);
        if ((lp_trigPlayer != gf_GetPlayerTeamAI(lp_trigPlayer))) {
            UIDisplayMessage(PlayerGroupSingle(13), c_messageAreaError, (StringExternal("Param/Value/D439BF3A") + IntToText(gf_GetPilotOwner(lp_trigUnit)) + StringExternal("Param/Value/48451E65") + UnitTypeGetName(UnitGetType(lv_closestConsole)) + StringExternal("Param/Value/C50D7ECF") + IntToText(lp_trigPlayer) + StringExternal("Param/Value/ADEACC15") + FixedToText(DistanceBetweenPoints(UnitGetPosition(lv_closestU), UnitGetPosition(lp_trigUnit)), c_fixedPrecisionAny)));
            UIDisplayMessage(PlayerGroupSingle(14), c_messageAreaError, (StringExternal("Param/Value/FFAC0BCE") + IntToText(gf_GetPilotOwner(lp_trigUnit)) + StringExternal("Param/Value/AD457629") + UnitTypeGetName(UnitGetType(lv_closestConsole)) + StringExternal("Param/Value/A148CD3B") + IntToText(lp_trigPlayer) + StringExternal("Param/Value/FF4E18D2") + FixedToText(DistanceBetweenPoints(UnitGetPosition(lv_closestU), UnitGetPosition(lp_trigUnit)), c_fixedPrecisionAny)));
        }
        else {
        }
        UnitBehaviorRemove(lv_closestConsole, "CoreReputationIncrease", 1);
        if ((UnitGetType(lv_closestConsole) == "NavigationConsole") && (lv_disconnectingCorrect == true)) {
            lv_index = (gf_GetPlayerTeam(lp_trigPlayer) - 1);
            UnitSetOwner(gv_nav_navigators[lv_index], 15, false);
            while ((UnitGetOwner(gv_nav_navigators[lv_index]) == 15)) {
                Wait(1.0, c_timeGame);
            }
        }
        else {
        }
        DialogSetVisible(gv_launchMissileDialog, PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_dC_MainDialog, PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_hangarDialog, PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_energyDialog, PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_energyDialog2, PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_droneDialog, PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_storageDialog[gf_GetPlayerTeam(lp_trigPlayer)], PlayerGroupSingle(lp_trigPlayer), false);
        DialogSetVisible(gv_purchaseDrone, PlayerGroupSingle(lp_trigPlayer), false);
        gf_Closehangar(lp_trigPlayer);
        if ((gv_view[lp_trigPlayer] == 1) && (gf_GetPlayerTeamAI(lp_trigPlayer) != lp_trigPlayer) && (libNtve_gf_UnitInRegion(gv_pilots[lp_trigPlayer], gv_battlecruiserArea[gf_GetPlayerTeam(lp_trigPlayer)]) == true) && (UnitGetType(lv_closestConsole) != "NavigationConsole")) {
            gf_ShipView(lp_trigPlayer, gv_battlecruisers[gf_GetPlayerTeam(lp_trigPlayer)]);
        }
        else {
        }
    }
    else {
    }
}

unit gf_getClosestConsoleMarine (point lp_p) {
    // Variable Declarations
    unitgroup lv_marines;
    unit lv_u;

    // Variable Initialization
    lv_marines = UnitGroupEmpty();

    // Implementation
    lv_marines = UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while (true) {
        lv_u = UnitGroupClosestToPoint(lv_marines, lp_p);
        if ((UnitHasBehavior(lv_u, "InConsole") == true)) {
            UIDisplayMessage(PlayerGroupSingle(13), c_messageAreaSubtitle, (StringExternal("Param/Value/FE9C2FE4") + FixedToText(DistanceBetweenPoints(UnitGetPosition(lv_u), lp_p), c_fixedPrecisionAny)));
            return lv_u;
        }
        else {
            UnitGroupRemove(lv_marines, lv_u);
        }
        if ((UnitGroupCount(lv_marines, c_unitCountAlive) == 0)) {
            return null;
        }
        else {
        }
    }
    return null;
}

trigger auto_gf_SpaceView_Trigger = null;
int auto_gf_SpaceView_lp_player;
unit auto_gf_SpaceView_lp_ship;

void gf_SpaceView (int lp_player, unit lp_ship) {
    auto_gf_SpaceView_lp_player = lp_player;
    auto_gf_SpaceView_lp_ship = lp_ship;

    if (auto_gf_SpaceView_Trigger == null) {
        auto_gf_SpaceView_Trigger = TriggerCreate("auto_gf_SpaceView_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpaceView_Trigger, false, false);
}

bool auto_gf_SpaceView_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SpaceView_lp_player;
    unit lp_ship = auto_gf_SpaceView_lp_ship;

    // Implementation
    if ((gv_view[lp_player] != 1)) {
        CameraSetBounds(PlayerGroupSingle(lp_player), RegionFromId(1), true);
        libNtve_gf_SwooshCamera(lp_player, 10.0, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 0.0), UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), 1.5);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(lp_player)])]), false, false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), true, false);
        gv_view[lp_player] = 1;
    }
    else {
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(lp_player)])]), false, false);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), true, false);
    }
    return true;
}

trigger auto_gf_ShipView_Trigger = null;
int auto_gf_ShipView_lp_player;
unit auto_gf_ShipView_lp_ship;

void gf_ShipView (int lp_player, unit lp_ship) {
    auto_gf_ShipView_lp_player = lp_player;
    auto_gf_ShipView_lp_ship = lp_ship;

    if (auto_gf_ShipView_Trigger == null) {
        auto_gf_ShipView_Trigger = TriggerCreate("auto_gf_ShipView_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShipView_Trigger, false, false);
}

bool auto_gf_ShipView_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ShipView_lp_player;
    unit lp_ship = auto_gf_ShipView_lp_ship;

    // Implementation
    if ((gv_view[lp_player] != 0) && (lp_player < 13)) {
        libNtve_gf_SwooshCamera(lp_player, (CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)), 0.0, UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), 1.0);
        CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), false, false);
        Wait(1.0, c_timeGame);
        CameraSetBounds(PlayerGroupSingle(lp_player), gf_GetUnitFloor(gv_pilots[lp_player]), true);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10);
        libNtve_gf_SwooshCamera(lp_player, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 30.0), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 0.0), UnitGetPosition(gv_pilots[lp_player]), 1.5);
        gv_view[lp_player] = 0;
    }
    else {
    }
    return true;
}

region gf_GetUnitFloor (unit lp_u) {
    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(2)) == true)) {
        return RegionFromId(2);
    }
    else {
        if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(33)) == true)) {
            return RegionFromId(33);
        }
        else {
            if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(35)) == true)) {
                return RegionFromId(35);
            }
            else {
                if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(34)) == true)) {
                    return RegionFromId(34);
                }
                else {
                }
            }
        }
    }
    return null;
}

region gf_GetOppositeUnitFloor (unit lp_u) {
    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(2)) == true)) {
        return RegionFromId(34);
    }
    else {
        if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(33)) == true)) {
            return RegionFromId(35);
        }
        else {
            if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(35)) == true)) {
                return RegionFromId(33);
            }
            else {
                if ((libNtve_gf_UnitInRegion(lp_u, RegionFromId(34)) == true)) {
                    return RegionFromId(2);
                }
                else {
                }
            }
        }
    }
    return null;
}

void gf_InitDrones () {
    // Implementation
    DialogCreate(500, 650, c_anchorTopLeft, 0, 0, true);
    gv_droneDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_droneDropdown = DialogControlLastCreated();
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9F87DE3A"));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 25, 25);
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 280, c_anchorTopLeft, 50, 50, ((StringExternal("Param/Value/F823D67F") + gf_orderToText(gv_drones[0][0].lv_currentOrder, 0, 0)) + (StringExternal("Param/Value/03FE165C") + gf_statusToText(0))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_orderStatus = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomRight, 50, 30, StringExternal("Param/Value/C8763343"), StringExternal("Param/Value/F4B4368C"), "");
    gv_issueOrderButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 180, 40, c_anchorBottomRight, 275, 35, StringExternal("Param/Value/9267F1DD"), StringExternal("Param/Value/5EB6BBF8"), "");
    gv_returnHomeButton = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_orderTypeDropdown = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 40, 280);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F6C83F33"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/04F6F0B3"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/3C4F9CBF"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6744DC2E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/09775678"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    gv_weaponDropDown = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 40, 175);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/2CFFD1F7"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/ED116115"));
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 150, 180, StringExternal("Param/Value/1B82668D"), false);
    gv_missileDistributeCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 150, 180, StringExternal("Param/Value/0BCE18FC"), false);
    gv_asteroidCheckbox[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 150, 143, StringExternal("Param/Value/EC511CD7"), false);
    gv_asteroidCheckbox[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 150, 106, StringExternal("Param/Value/554C60CD"), false);
    gv_asteroidCheckbox[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 150, 70, StringExternal("Param/Value/E822600C"), false);
    gv_asteroidCheckbox[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 130, 200, c_anchorBottomLeft, 40, 50, (StringExternal("Param/Value/1A2F58AB") + (TextWithColor(StringExternal("Param/Value/CFDD022A"), libNtve_gf_ConvertPlayerColorToColor(5)) + (TextWithColor(StringExternal("Param/Value/9B91E138"), libNtve_gf_ConvertPlayerColorToColor(3)) + (TextWithColor(StringExternal("Param/Value/DA3591DB"), libNtve_gf_ConvertPlayerColorToColor(1)) + TextWithColor(StringExternal("Param/Value/A26178D6"), libNtve_gf_ConvertPlayerColorToColor(7)))))), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_miningOrderInfo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 200, c_anchorBottomLeft, 40, 50, (StringExternal("Param/Value/18F87593")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_gunneryOrderInfo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 130, 200, c_anchorBottomLeft, 40, 35, StringExternal("Param/Value/43FF1C4B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_missileLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 170, 132, StringExternal("Param/Value/0551CEFF"), false);
    gv_fireMissileCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 200, c_anchorBottomLeft, 40, 50, (StringExternal("Param/Value/41024D90")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_scienceOrderInfo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 230, 222, StringExternal("Param/Value/14FC86A8"), false);
    gv_armYamatoCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 40, 40, c_anchorBottomLeft, 230, 185, StringExternal("Param/Value/9A8758F2"), false);
    gv_purgeCorePlasmaCheckbox = DialogControlLastCreated();
    gv_droneCost[1][0] = 150;
    gv_droneCost[2][0] = 150;
    gv_droneCost[1][1] = 30;
    gv_droneCost[2][1] = 30;
    DialogCreate(400, 200, c_anchorTopRight, 0, 0, true);
    gv_purchaseDrone = DialogLastCreated();
    DialogSetPositionRelative(DialogLastCreated(), c_anchorCenter, gv_droneDialog, c_anchorCenter, 0, 0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 50, c_anchorTopLeft, 75, 115, StringExternal("Param/Value/8BBC9800"), StringExternal("Param/Value/EC940E58"), "");
    gv_purchaseDroneButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 300, c_anchorTopLeft, 120, 50, StringExternal("Param/Value/BB39CA99"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_droneCostLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/A42F94A8") + TextWithColor((StringExternal("Param/Value/BC78F5D5") + IntToText(gv_droneCost[1][0])), Color(100.00, 100.00, 0.00)) + TextWithColor((StringExternal("Param/Value/51654AAC") + IntToText(gv_droneCost[1][1])), Color(0.00, 100.00, 0.00))), PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogCreate(200, 160, c_anchorTopRight, 0, 0, true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 40, c_anchorTopLeft, 35, 32, StringExternal("Param/Value/999EB3D3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 120, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 40, 65);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 120, 35, c_anchorBottomLeft, 40, 30, StringExternal("Param/Value/BD522DF5"), StringExternal("Param/Value/0879B15E"), "");
    DialogSetPositionRelative(DialogLastCreated(), c_anchorCenter, gv_droneDialog, c_anchorCenter, 0, 0);
}

string gf_idToAsteroidName (int lp_id) {
    int auto15F7D2D2_val;

    // Implementation
    auto15F7D2D2_val = lp_id;
    if (auto15F7D2D2_val == 0) {
        return "Veldite";
    }
    else if (auto15F7D2D2_val == 1) {
        return "Chalcorium";
    }
    else if (auto15F7D2D2_val == 2) {
        return "Pyromanite";
    }
    else if (auto15F7D2D2_val == 3) {
        return "Kermiculite";
    }
    else {
    }
    return "";
}

color gf_idToAsteroidColor (int lp_id) {
    int auto72DFF3C8_val;

    // Implementation
    auto72DFF3C8_val = lp_id;
    if (auto72DFF3C8_val == 0) {
        return libNtve_gf_ConvertPlayerColorToColor(5);
    }
    else if (auto72DFF3C8_val == 1) {
        return libNtve_gf_ConvertPlayerColorToColor(3);
    }
    else if (auto72DFF3C8_val == 2) {
        return libNtve_gf_ConvertPlayerColorToColor(1);
    }
    else if (auto72DFF3C8_val == 3) {
        return libNtve_gf_ConvertPlayerColorToColor(7);
    }
    else {
    }
    return Color(0.00, 0.00, 0.00);
}

text gf_statusToText (int lp_id) {
    int auto8058AD3A_val;

    // Implementation
    auto8058AD3A_val = lp_id;
    if (auto8058AD3A_val == -1) {
        return StringExternal("Param/Value/697414D8");
    }
    else if (auto8058AD3A_val == 0) {
        return StringExternal("Param/Value/950D4276");
    }
    else if (auto8058AD3A_val == 1) {
        return StringExternal("Param/Value/C1ADF3AE");
    }
    else if (auto8058AD3A_val == 2) {
        return StringExternal("Param/Value/0AC7D9CA");
    }
    else if (auto8058AD3A_val == 3) {
        return StringExternal("Param/Value/A11F8C99");
    }
    else if (auto8058AD3A_val == 4) {
        return StringExternal("Param/Value/FD308C24");
    }
    else if (auto8058AD3A_val == 5) {
        return StringExternal("Param/Value/97DDD6A6");
    }
    else if (auto8058AD3A_val == 6) {
        return StringExternal("Param/Value/5731CA73");
    }
    else if (auto8058AD3A_val == 99) {
        return StringExternal("Param/Value/485A445A");
    }
    else if (auto8058AD3A_val == 8) {
        return StringExternal("Param/Value/A401712F");
    }
    else if (auto8058AD3A_val == 9) {
        return StringExternal("Param/Value/10EC6A8E");
    }
    else if (auto8058AD3A_val == 10) {
        return StringExternal("Param/Value/E13A2085");
    }
    else if (auto8058AD3A_val == 11) {
        return StringExternal("Param/Value/851596EA");
    }
    else if (auto8058AD3A_val == 12) {
        return StringExternal("Param/Value/5FF87826");
    }
    else if (auto8058AD3A_val == 14) {
        return StringExternal("Param/Value/61707213");
    }
    else if (auto8058AD3A_val == 16) {
        return StringExternal("Param/Value/430F9E0D");
    }
    else if (auto8058AD3A_val == 17) {
        return StringExternal("Param/Value/F2C09C0D");
    }
    else if (auto8058AD3A_val == 18) {
        return StringExternal("Param/Value/68735799");
    }
    else if (auto8058AD3A_val == 19) {
        return StringExternal("Param/Value/8E64D792");
    }
    else if (auto8058AD3A_val == 20) {
        return StringExternal("Param/Value/0E6FEFD5");
    }
    else if (auto8058AD3A_val == 21) {
        return StringExternal("Param/Value/67DF2EF7");
    }
    else if (auto8058AD3A_val == 22) {
        return StringExternal("Param/Value/A439FA6A");
    }
    else if (auto8058AD3A_val == 23) {
        return StringExternal("Param/Value/02BAE716");
    }
    else if (auto8058AD3A_val == 24) {
        return StringExternal("Param/Value/1CE4A62A");
    }
    else if (auto8058AD3A_val == 25) {
        return StringExternal("Param/Value/7378F1B5");
    }
    else if (auto8058AD3A_val == 26) {
        return StringExternal("Param/Value/A0713B5E");
    }
    else if (auto8058AD3A_val == 27) {
        return StringExternal("Param/Value/A4CE819D");
    }
    else {
    }
    return StringExternal("Param/Value/F4A1EAF5");
}

text gf_orderToText (int lp_id, int lp_team, int lp_index) {
    int auto579FB379_val;
    int autoC09638E3_ae;
    int autoC09638E3_ai;

    // Variable Declarations
    text lv_currentOrder;
    int lv_a;

    // Variable Initialization

    // Implementation
    auto579FB379_val = lp_id;
    if (auto579FB379_val == 0) {
        return StringExternal("Param/Value/7598F16A");
    }
    else if (auto579FB379_val == 1) {
        lv_currentOrder = StringExternal("Param/Value/E6F5CE46");
        autoC09638E3_ae = 3;
        autoC09638E3_ai = 1;
        lv_a = 0;
        for ( ; ( (autoC09638E3_ai >= 0 && lv_a <= autoC09638E3_ae) || (autoC09638E3_ai <= 0 && lv_a >= autoC09638E3_ae) ) ; lv_a += autoC09638E3_ai ) {
            if ((gv_drones[lp_team][lp_index].lv_mineMineral[lv_a] == true)) {
                lv_currentOrder = (lv_currentOrder + (TextWithColor(StringToText(gf_idToAsteroidName(lv_a)), gf_idToAsteroidColor(lv_a)) + StringExternal("Param/Value/56493B51")));
            }
            else {
            }
        }
        return lv_currentOrder;
    }
    else if (auto579FB379_val == 2) {
        return StringExternal("Param/Value/71DFDD37");
    }
    else if (auto579FB379_val == 3) {
        return StringExternal("Param/Value/C07A8265");
    }
    else if (auto579FB379_val == 4) {
        lv_currentOrder = StringExternal("Param/Value/71C753BD");
        if ((gv_drones[lp_team][lp_index].lv_fireMissiles == true)) {
            lv_currentOrder = (lv_currentOrder + StringExternal("Param/Value/B38A003B"));
        }
        else {
        }
        lv_currentOrder = (lv_currentOrder + StringExternal("Param/Value/E638ABC8"));
        return lv_currentOrder;
    }
    else if (auto579FB379_val == 5) {
        lv_currentOrder = StringExternal("Param/Value/83D1BFA1");
        if ((gv_drones[lp_team][lp_index].lv_armYamato == true)) {
            lv_currentOrder = (lv_currentOrder + StringExternal("Param/Value/528132DE"));
        }
        else {
        }
        lv_currentOrder = (lv_currentOrder + StringExternal("Param/Value/76033F3C"));
        return lv_currentOrder;
    }
    else if (auto579FB379_val == 6) {
        return StringExternal("Param/Value/2DA3E84D");
    }
    else if (auto579FB379_val == 7) {
        return StringExternal("Param/Value/D9F63743");
    }
    else if (auto579FB379_val == 20) {
        return StringExternal("Param/Value/C61E7176");
    }
    else {
    }
    return StringExternal("Param/Value/5E6F6CC6");
}

int gf_shipToDroneIndex (unit lp_ship, int lp_team) {
    int auto4E002849_ae;
    int auto4E002849_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto4E002849_ae = gv_droneSize;
    auto4E002849_ai = 1;
    lv_a = 0;
    for ( ; ( (auto4E002849_ai >= 0 && lv_a <= auto4E002849_ae) || (auto4E002849_ai <= 0 && lv_a >= auto4E002849_ae) ) ; lv_a += auto4E002849_ai ) {
        if ((gv_drones[lp_team][lv_a].lv_ship == lp_ship)) {
            return lv_a;
        }
        else {
        }
    }
    return -1;
}

unit gf_shipToAvatar (unit lp_ship, int lp_team) {
    int auto8C3FD100_ae;
    int auto8C3FD100_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto8C3FD100_ae = gv_droneSize;
    auto8C3FD100_ai = 1;
    lv_a = 0;
    for ( ; ( (auto8C3FD100_ai >= 0 && lv_a <= auto8C3FD100_ae) || (auto8C3FD100_ai <= 0 && lv_a >= auto8C3FD100_ae) ) ; lv_a += auto8C3FD100_ai ) {
        if ((gv_drones[lp_team][lv_a].lv_ship == lp_ship)) {
            return gv_drones[lp_team][lv_a].lv_avatar;
        }
        else {
        }
    }
    return null;
}

int gf_avatarToIndex (unit lp_avatar, int lp_team) {
    int autoB6CD86F6_ae;
    int autoB6CD86F6_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    autoB6CD86F6_ae = gv_droneSize;
    autoB6CD86F6_ai = 1;
    lv_a = 0;
    for ( ; ( (autoB6CD86F6_ai >= 0 && lv_a <= autoB6CD86F6_ae) || (autoB6CD86F6_ai <= 0 && lv_a >= autoB6CD86F6_ae) ) ; lv_a += autoB6CD86F6_ai ) {
        if ((gv_drones[lp_team][lv_a].lv_avatar == lp_avatar)) {
            return lv_a;
        }
        else {
        }
    }
    return lv_a;
}

unit gf_closestUnitMatchingAsteroidType (point lp_point, unitgroup lp_unitGroup, int lp_droneID, int lp_team) {
    // Variable Declarations
    unit lv_foundUnit;
    unit lv_closestUnit;
    fixed lv_value;

    // Variable Initialization

    // Implementation
    while (((lv_foundUnit == null) && (UnitGroupCount(lp_unitGroup, c_unitCountAll) > 0))) {
        lv_closestUnit = UnitGroupClosestToPoint(lp_unitGroup, lp_point);
        lv_value = UnitGetCustomValue(lv_closestUnit, 0);
        if ((lv_value != 0.0)) {
            if ((gv_drones[lp_team][lp_droneID].lv_mineMineral[FixedToInt((lv_value - 1.0))] == true)) {
                lv_foundUnit = lv_closestUnit;
            }
            else {
                UnitGroupRemove(lp_unitGroup, lv_closestUnit);
            }
        }
        else {
        }
    }
    if ((UnitGroupCount(lp_unitGroup, c_unitCountAll) > 0)) {
        return lv_closestUnit;
    }
    else {
        return null;
    }
}

unit gf_highestHealthUnitInUG (unitgroup lp_ug) {
    unitgroup autoC23AC103_g;
    int autoC23AC103_u;

    // Variable Declarations
    unit lv_bestUnit;
    unit lv_u;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(lp_ug, c_unitCountAll) == 0)) {
        return null;
    }
    else {
    }
    autoC23AC103_g = lp_ug;
    autoC23AC103_u = 1;
    for ( ; autoC23AC103_u <= UnitGroupCount(autoC23AC103_g, c_unitCountAll) ; autoC23AC103_u += BoolToInt(lv_u == UnitGroupUnit(autoC23AC103_g, autoC23AC103_u)) ) {
        lv_u = UnitGroupUnit(autoC23AC103_g, autoC23AC103_u);
        if ((UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropNormal) > UnitGetPropertyFixed(lv_bestUnit, c_unitPropLife, c_unitPropNormal))) {
            lv_bestUnit = lv_u;
        }
        else {
        }
    }
    return lv_bestUnit;
}

unitgroup gf_UnrefinedMineralsInRegion (unitgroup lp_ug, int lp_team) {
    // Implementation
    UnitGroupLoopBegin(lp_ug);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), gv_conveyorBelt[lp_team]) == true) || (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), gv_refiningdrops[lp_team]) == true) || (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), gv_processingarea[lp_team]) == true))) {
            UnitGroupRemove(lp_ug, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return UnitGroupFilter(null, c_playerAny, lp_ug, UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterItem), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

unitgroup gf_MissilesInRegion (region lp_region) {
    // Variable Declarations
    unitgroup lv_ug;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    lv_ug = UnitGroup(null, c_playerAny, lp_region, UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupLoopBegin(lv_ug);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((gf_UnitTypeIsMissile(UnitGetType(UnitGroupLoopCurrent())) != true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "MissileDistributed") == true))) {
            UnitGroupRemove(lv_ug, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_ug;
}

unitgroup gf_UnitGroupMatchingAsteroidType (unitgroup lp_unitGroup, int lp_droneID, int lp_team) {
    // Variable Declarations
    unit lv_foundUnit;
    unit lv_closestUnit;
    fixed lv_value;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(lp_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_value = UnitGetCustomValue(UnitGroupLoopCurrent(), 0);
        if ((gv_drones[lp_team][lp_droneID].lv_mineMineral[FixedToInt((lv_value - 1.0))] == false)) {
            UnitGroupRemove(lp_unitGroup, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lp_unitGroup;
}

unitgroup gf_getNonOccupiedConsoles (unitgroup lp_unitGroup) {
    // Variable Declarations
    unit lv_foundUnit;
    unit lv_closestUnit;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(lp_unitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "ConsoleOccupied") == true)) {
            UnitGroupRemove(lp_unitGroup, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lp_unitGroup;
}

int gf_getNewDroneID (int lp_team) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    return DialogControlGetItemCount(gv_droneDropdown, gf_getRandomPlayerFromPG(GameAttributePlayersForTeam(lp_team)));
}

int gf_getNewDroneIDOLD (int lp_team) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    while ((gv_drones[lp_team][lv_index].lv_name != null)) {
        lv_index += 1;
    }
    return lv_index;
}

int gf_closestUnloadedMissileBay (unit lp_unit) {
    int auto66818D12_ae;
    int auto66818D12_ai;

    // Variable Declarations
    int lv_team;
    int lv_a;
    fixed lv_min;
    int lv_index;

    // Variable Initialization
    lv_min = 9999.0;
    lv_index = -1;

    // Implementation
    lv_team = gf_GetPlayerTeam(UnitGetOwner(lp_unit));
    auto66818D12_ae = 5;
    auto66818D12_ai = 1;
    lv_a = 0;
    for ( ; ( (auto66818D12_ai >= 0 && lv_a <= auto66818D12_ae) || (auto66818D12_ai <= 0 && lv_a >= auto66818D12_ae) ) ; lv_a += auto66818D12_ai ) {
        if ((DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(gv_missileBays[lv_a][lv_team])) < lv_min) && (gf_bayIsLoaded(lv_a, lv_team) == false)) {
            lv_min = DistanceBetweenPoints(UnitGetPosition(lp_unit), RegionGetCenter(gv_missileBays[lv_a][lv_team]));
            lv_index = lv_a;
        }
        else {
        }
    }
    return lv_index;
}

unit gf_getBestMissile (unitgroup lp_u_group) {
    // Variable Declarations
    fixed lv_max;
    unit lv_bestMissile;
    fixed lv_dmg;
    int lv_team;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(lp_u_group);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), gv_battlecruiserArea[1]) == true)) {
            lv_team = 1;
        }
        else {
            lv_team = 2;
        }
        if ((gf_UnitTypeIsMissile(UnitGetType(UnitGroupLoopCurrent())) == true)) {
            if ((UnitGetPropertyFixed(gv_battlecruisers[(3 - lv_team)], c_unitPropShields, c_unitPropCurrent) >= 200.0)) {
                lv_dmg = gv_missiles[gf_GetMissileidItem(UnitGetType(UnitGroupLoopCurrent()))].lv_shield_Damage;
                if ((lv_dmg == -1.0)) {
                    lv_dmg = gv_missiles[gf_GetMissileidItem(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                }
                else {
                }
            }
            else {
                lv_dmg = gv_missiles[gf_GetMissileidItem(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
            }
            if ((lv_dmg > lv_max)) {
                lv_max = lv_dmg;
                lv_bestMissile = UnitGroupLoopCurrent();
            }
            else {
            }
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return lv_bestMissile;
}

int gf_Numberofmissilescarried (unit lp_u) {
    unitgroup auto8B3B6633_g;
    int auto8B3B6633_u;

    // Variable Declarations
    unit lv_item;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto8B3B6633_g = UnitInventoryGroup(lp_u);
    auto8B3B6633_u = 1;
    for ( ; auto8B3B6633_u <= UnitGroupCount(auto8B3B6633_g, c_unitCountAll) ; auto8B3B6633_u += BoolToInt(lv_item == UnitGroupUnit(auto8B3B6633_g, auto8B3B6633_u)) ) {
        lv_item = UnitGroupUnit(auto8B3B6633_g, auto8B3B6633_u);
        if ((gf_UnitTypeIsMissile(UnitGetType(lv_item)) == true)) {
            lv_i += 1;
        }
        else {
        }
    }
    return lv_i;
}

int gf_Numberofmineralscarried (unit lp_u) {
    unitgroup autoA79C5110_g;
    int autoA79C5110_u;

    // Variable Declarations
    unit lv_item;
    int lv_i;

    // Variable Initialization

    // Implementation
    autoA79C5110_g = UnitInventoryGroup(lp_u);
    autoA79C5110_u = 1;
    for ( ; autoA79C5110_u <= UnitGroupCount(autoA79C5110_g, c_unitCountAll) ; autoA79C5110_u += BoolToInt(lv_item == UnitGroupUnit(autoA79C5110_g, autoA79C5110_u)) ) {
        lv_item = UnitGroupUnit(autoA79C5110_g, autoA79C5110_u);
        if (((UnitGetType(lv_item) == "ChalcoriumOre") || (UnitGetType(lv_item) == "KermiculiteOre") || (UnitGetType(lv_item) == "PyromaniteOre") || (UnitGetType(lv_item) == "VelditeOre"))) {
            lv_i += 1;
        }
        else {
        }
    }
    return lv_i;
}

void gf_AddAI (int lp_team, text lp_name) {
    // Variable Declarations
    int lv_id;

    // Variable Initialization

    // Implementation
    lv_id = gf_getNewDroneID(lp_team);
    gv_drones[gf_GetPlayerTeam(PlayerGroupLoopCurrent())][lv_id].lv_name = lp_name;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, gf_GetPlayerTeamAI(gf_getRandomPlayerFromPG(GameAttributePlayersForTeam(lp_team))), gv_startLocations[lp_team]);
    UnitInventoryCreate(UnitLastCreated(), "HA11Sweeper");
    gv_drones[lp_team][lv_id].lv_avatar = UnitLastCreated();
    DialogControlRemoveItem(gv_droneDropdown, GameAttributePlayersForTeam(lp_team), lv_id);
    DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(lp_team), lp_name);
    DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(lp_team), StringExternal("Param/Value/1B6353AA"));
    TextTagCreate(TextWithColor(lp_name, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetPlayerTeamAI(gf_getRandomPlayerFromPG(GameAttributePlayersForTeam(lp_team))), false))), 24, UnitGetPosition(UnitLastCreated()), 1.0, true, false, GameAttributePlayersForTeam(lp_team));
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    gv_aItexttags[lp_team][lv_id] = TextTagLastCreated();
}

void gf_ChangeDroneStatus (int lp_id, int lp_team, string lp_status) {
    // Variable Declarations
    int lv_owner;

    // Variable Initialization

    // Implementation
    lv_owner = UnitGetOwner(UnitGroupRandomUnit(UnitGroup("DroneConsole", c_playerAny, gv_battlecruiserArea[lp_team], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    if ((DialogControlGetSelectedItem(gv_droneDropdown, lv_owner) == lp_id)) {
        if ((lp_status == "")) {
            libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/39E0B83D") + gf_orderToText(gv_drones[lp_team][lp_id].lv_currentOrder, lp_team, lp_id)) + (StringExternal("Param/Value/FBA46B0B") + gf_statusToText(gv_drones[lp_team][lp_id].lv_status))), GameAttributePlayersForTeam(IntLoopCurrent()));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/9C94542C") + gf_orderToText(gv_drones[lp_team][lp_id].lv_currentOrder, lp_team, lp_id)) + (StringExternal("Param/Value/FDDEA095") + StringToText(lp_status))), GameAttributePlayersForTeam(IntLoopCurrent()));
        }
    }
    else {
    }
}

bool gf_Unitisinfront (fixed lp_width, unit lp_u, point lp_origin, fixed lp_facing, int lp_detail, fixed lp_distance) {
    int auto2EB48BAE_ae;
    int auto2EB48BAE_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto2EB48BAE_ae = lp_detail;
    auto2EB48BAE_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2EB48BAE_ai >= 0 && lv_a <= auto2EB48BAE_ae) || (auto2EB48BAE_ai <= 0 && lv_a >= auto2EB48BAE_ae) ) ; lv_a += auto2EB48BAE_ai ) {
        if ((libNtve_gf_UnitInRegion(lp_u, RegionCircle(PointWithOffsetPolar(lp_origin, (lp_width + (((lp_distance - (lp_width * 2.0)) / (lp_detail - 1.0)) * (lv_a - 1.0))), lp_facing), lp_width)) == true)) {
            return true;
        }
        else {
        }
    }
    return false;
}

void gf_FixOrderLayout (int lp_p) {
    int auto17BF4C2F_ae;
    int auto17BF4C2F_ai;
    int auto7ED4FC67_val;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogControlSelectItem(gv_orderTypeDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(lp_p)), DialogControlGetSelectedItem(gv_orderTypeDropdown, lp_p));
    DialogControlSetVisible(gv_asteroidCheckbox[0], PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_asteroidCheckbox[1], PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_asteroidCheckbox[2], PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_asteroidCheckbox[3], PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_weaponDropDown, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_missileDistributeCheckbox, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_miningOrderInfo, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_gunneryOrderInfo, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_scienceOrderInfo, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_missileLabel, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_fireMissileCheckbox, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_armYamatoCheckbox, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_purgeCorePlasmaCheckbox, PlayerGroupSingle(lp_p), false);
    DialogSetVisible(gv_purchaseDrone, PlayerGroupSingle(lp_p), false);
    DialogControlSetVisible(gv_orderStatus, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), false);
    DialogControlSetVisible(gv_orderTypeDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), false);
    DialogControlSetVisible(gv_issueOrderButton, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_returnHomeButton, PlayerGroupSingle(EventPlayer()), false);
    if ((DialogControlGetSelectedItem(gv_droneDropdown, lp_p) != DialogControlGetItemCount(gv_droneDropdown, lp_p))) {
        DialogControlSetVisible(gv_orderStatus, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
        DialogControlSetVisible(gv_orderTypeDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
        DialogControlSetVisible(gv_issueOrderButton, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_returnHomeButton, PlayerGroupSingle(EventPlayer()), true);
        auto17BF4C2F_ae = 3;
        auto17BF4C2F_ai = 1;
        lv_i = 0;
        for ( ; ( (auto17BF4C2F_ai >= 0 && lv_i <= auto17BF4C2F_ae) || (auto17BF4C2F_ai <= 0 && lv_i >= auto17BF4C2F_ae) ) ; lv_i += auto17BF4C2F_ai ) {
            if ((gv_drones[gf_GetPlayerTeam(lp_p)][DialogControlGetSelectedItem(gv_droneDropdown, lp_p)].lv_mineMineral[lv_i] == true)) {
                libNtve_gf_SetDialogItemChecked(gv_asteroidCheckbox[lv_i], true, PlayerGroupSingle(lp_p));
            }
            else {
                libNtve_gf_SetDialogItemChecked(gv_asteroidCheckbox[lv_i], false, PlayerGroupSingle(lp_p));
            }
        }
        auto7ED4FC67_val = DialogControlGetSelectedItem(gv_orderTypeDropdown, lp_p);
        if (auto7ED4FC67_val == 1) {
            DialogControlSetVisible(gv_asteroidCheckbox[0], PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_asteroidCheckbox[1], PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_asteroidCheckbox[2], PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_asteroidCheckbox[3], PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_miningOrderInfo, PlayerGroupSingle(lp_p), true);
        }
        else if (auto7ED4FC67_val == 4) {
            DialogControlSetVisible(gv_weaponDropDown, PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_gunneryOrderInfo, PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_fireMissileCheckbox, PlayerGroupSingle(lp_p), true);
        }
        else if (auto7ED4FC67_val == 5) {
            DialogControlSetVisible(gv_scienceOrderInfo, PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_armYamatoCheckbox, PlayerGroupSingle(lp_p), true);
            DialogControlSetVisible(gv_purgeCorePlasmaCheckbox, PlayerGroupSingle(lp_p), true);
        }
        else {
        }
    }
    else {
        DialogSetVisible(gv_purchaseDrone, PlayerGroupSingle(lp_p), true);
    }
}

fixed gf_ClosestAngleBetweenPoints (point lp_p1, point lp_p2) {
    int auto910E77C7_ae;
    int auto910E77C7_ai;

    // Variable Declarations
    point[4] lv_guesses;
    fixed lv_xDir;
    fixed lv_yDir;
    int lv_i;
    fixed lv_min;
    fixed lv_dist;
    int lv_result;
    fixed lv_angle;

    // Variable Initialization
    lv_min = 524287.0;

    // Implementation
    if ((gv_loopturnedoff == true)) {
        return AngleBetweenPoints(lp_p1, lp_p2);
    }
    else {
    }
    lv_guesses[0] = lp_p1;
    if ((AbsF((PointGetX(lp_p2) - PointGetX(lp_p1))) >= 120.0)) {
        if ((PointGetX(lp_p2) > PointGetX(lp_p1))) {
            lv_xDir = 1.0;
            lv_guesses[1] = Point((gf_MapXofPoint(lp_p1) + 248.0), PointGetY(lp_p1));
        }
        else {
            lv_xDir = -1.0;
            lv_guesses[1] = Point((gf_MapXofPoint(lp_p1) - 248.0), PointGetY(lp_p1));
        }
    }
    else {
    }
    if ((AbsF((PointGetY(lp_p2) - PointGetY(lp_p1))) >= 74.0)) {
        if ((PointGetY(lp_p2) > PointGetY(lp_p1))) {
            lv_yDir = 1.0;
            lv_guesses[2] = Point(PointGetX(lp_p1), (gf_MapYofPoint(lp_p1) + 248.0));
        }
        else {
            lv_yDir = -1.0;
            lv_guesses[2] = Point(PointGetX(lp_p1), (gf_MapYofPoint(lp_p1) - 8.0));
        }
    }
    else {
    }
    if ((lv_xDir != 0.0) && (lv_yDir != 0.0)) {
        lv_guesses[3] = Point((gf_MapXofPoint(lp_p1) + (240.0 * lv_xDir)), (gf_MapYofPoint(lp_p1) + (140.0 * lv_yDir)));
    }
    else {
    }
    auto910E77C7_ae = 3;
    auto910E77C7_ai = 1;
    lv_i = 0;
    for ( ; ( (auto910E77C7_ai >= 0 && lv_i <= auto910E77C7_ae) || (auto910E77C7_ai <= 0 && lv_i >= auto910E77C7_ae) ) ; lv_i += auto910E77C7_ai ) {
        if ((lv_guesses[lv_i] != null)) {
            lv_dist = gf_DistanceBetweenPointsCustom(lp_p2, lv_guesses[lv_i]);
            if ((lv_dist < lv_min)) {
                lv_min = lv_dist;
                lv_result = lv_i;
            }
            else {
            }
        }
        else {
        }
    }
    lv_angle = AngleBetweenPoints(lv_guesses[lv_result], lp_p2);
    return lv_angle;
}

point gf_CalculateGoodRepairPoint (unit lp_u) {
    // Implementation
    return null;
}

unitgroup gf_VisibleSpaceUnitinRange (unit lp_u, fixed lp_range) {
    unitgroup autoAB1D94A2_g;
    int autoAB1D94A2_u;

    // Variable Declarations
    unit lv_target;
    unitgroup lv_result;

    // Variable Initialization
    lv_result = UnitGroupEmpty();

    // Implementation
    lv_result = UnitGroupAlliance(UnitGetOwner(lp_u), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_u), lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAB1D94A2_g = lv_result;
    autoAB1D94A2_u = 1;
    for ( ; autoAB1D94A2_u <= UnitGroupCount(autoAB1D94A2_g, c_unitCountAll) ; autoAB1D94A2_u += BoolToInt(lv_target == UnitGroupUnit(autoAB1D94A2_g, autoAB1D94A2_u)) ) {
        lv_target = UnitGroupUnit(autoAB1D94A2_g, autoAB1D94A2_u);
        if (((libNtve_gf_UnitIsVisibleToPlayer(lv_target, UnitGetOwner(lp_u)) != true) || (libNtve_gf_UnitInRegion(lv_target, RegionFromId(1)) != true) || (UnitGetOwner(lv_target) == UnitGetOwner(lp_u)) || (gf_shipToIndex(lv_target) == -1))) {
            UnitGroupRemove(lv_result, lv_target);
        }
        else {
        }
    }
    return lv_result;
}

void gf_InitDamageControl () {
    // Implementation
    DialogCreate(gv_mainWidth, gv_mainHeight, c_anchorTopLeft, gv_mainOffsetX, gv_mainOffsetY, true);
    gv_dC_MainDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_mainWidth - 50), (gv_mainHeight - 50), c_anchorTopLeft, 25, 25, StringExternal("Param/Value/374F820B"), "BCOverlay.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetTransparency(DialogLastCreated(), 20.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorTopLeft, 500, 50, StringExternal("Param/Value/E5D8E386"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_floorLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorTopLeft, 715, 40, StringExternal("Param/Value/5ED11513"), StringExternal("Param/Value/309C2DCB"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_floor1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, 720, 45, StringExternal("Param/Value/60EE4450"), "EditorData\\Images\\MoveUp.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorTopLeft, 715, 80, StringExternal("Param/Value/D4DD92A5"), StringExternal("Param/Value/4C40092C"), "");
    gv_floor2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 20, c_anchorTopLeft, 720, 85, StringExternal("Param/Value/B644B8CF"), "EditorData\\Images\\MoveDown.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopRight, 25, 25, StringExternal("Param/Value/D946B58C"), StringExternal("Param/Value/B12C72A9"), "");
    gv_hideDC = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 360, 120, c_anchorTopLeft, 420, 140, StringExternal("Param/Value/2CCF2843"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[0].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 165, 80, c_anchorTopLeft, 520, 265, StringExternal("Param/Value/70261F6E"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[1].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 165, 80, c_anchorTopLeft, 520, 350, StringExternal("Param/Value/A049AF8B"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[2].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 165, 120, c_anchorTopLeft, 520, 435, StringExternal("Param/Value/C58C4A8D"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[3].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 165, 80, c_anchorTopLeft, 520, 560, StringExternal("Param/Value/6384EEC9"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[4].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 120, c_anchorTopLeft, 445, 435, StringExternal("Param/Value/859E1370"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[5].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 70, 120, c_anchorTopLeft, 690, 435, StringExternal("Param/Value/B2D7EB10"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[7].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 265, c_anchorTopLeft, 360, 380, StringExternal("Param/Value/F6FDFEBE"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[6].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 265, c_anchorTopLeft, 765, 380, StringExternal("Param/Value/F181D2CE"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[8].lv_background = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 225, 120, c_anchorTopLeft, 490, 435, StringExternal("Param/Value/18AD87AD"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[9].lv_background = DialogControlLastCreated();
    gv_rooms[9].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 165, 80, c_anchorTopLeft, 520, 560, StringExternal("Param/Value/44225316"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[10].lv_background = DialogControlLastCreated();
    gv_rooms[10].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 185, 70, c_anchorTopLeft, 510, 360, StringExternal("Param/Value/B09728CA"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[11].lv_background = DialogControlLastCreated();
    gv_rooms[11].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 155, 80, c_anchorTopLeft, 525, 275, StringExternal("Param/Value/985D4505"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_rooms[12].lv_background = DialogControlLastCreated();
    gv_rooms[12].lv_floor = 2;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 235, StringExternal("Param/Value/DC976354"), StringExternal("Param/Value/13981446"), "");
    gv_doors[0].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 245, StringExternal("Param/Value/FD21CB0A"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[0].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 325, StringExternal("Param/Value/CABF8EAC"), StringExternal("Param/Value/EF38A1A2"), "");
    gv_doors[1].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 335, StringExternal("Param/Value/352DD441"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[1].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 415, StringExternal("Param/Value/0924D64E"), StringExternal("Param/Value/89E054D0"), "");
    gv_doors[2].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 425, StringExternal("Param/Value/D3178604"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[2].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 535, StringExternal("Param/Value/72F02506"), StringExternal("Param/Value/C209ABD7"), "");
    gv_doors[3].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 545, StringExternal("Param/Value/354C341E"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[3].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 495, 492, StringExternal("Param/Value/82DAF5C0"), StringExternal("Param/Value/BB7816E0"), "");
    gv_doors[4].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 505, 502, StringExternal("Param/Value/24D744F4"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[4].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 420, 492, StringExternal("Param/Value/939A263F"), StringExternal("Param/Value/BD2A8055"), "");
    gv_doors[5].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 430, 502, StringExternal("Param/Value/B36FA786"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[5].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 660, 492, StringExternal("Param/Value/1E7A8020"), StringExternal("Param/Value/1F7F5174"), "");
    gv_doors[6].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 670, 502, StringExternal("Param/Value/80F4B518"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[6].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 740, 492, StringExternal("Param/Value/363B8BBB"), StringExternal("Param/Value/62ECC774"), "");
    gv_doors[7].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 750, 502, StringExternal("Param/Value/4074C12F"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[7].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 325, StringExternal("Param/Value/1FDAE6BD"), StringExternal("Param/Value/DD659DFB"), "");
    gv_doors[8].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 335, StringExternal("Param/Value/EDDD24F1"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[8].lv_picture = DialogControlLastCreated();
    gv_doors[8].lv_floor = 2;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 415, StringExternal("Param/Value/FE1A1566"), StringExternal("Param/Value/C8D68280"), "");
    gv_doors[9].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 425, StringExternal("Param/Value/EE4AA424"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[9].lv_picture = DialogControlLastCreated();
    gv_doors[9].lv_floor = 2;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 535, StringExternal("Param/Value/6F4FA29F"), StringExternal("Param/Value/3C7558D7"), "");
    gv_doors[10].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 35, 35, c_anchorTopLeft, 590, 545, StringExternal("Param/Value/A4BB717E"), "Lock-Unlock-icon.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_doors[10].lv_picture = DialogControlLastCreated();
    gv_doors[10].lv_floor = 2;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 190, StringExternal("Param/Value/3AE5B946"), StringExternal("Param/Value/390E5EF5"), "");
    gv_ventRecords[0].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 195, StringExternal("Param/Value/769956B6"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[0].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 280, StringExternal("Param/Value/41214D8E"), StringExternal("Param/Value/BCB2AA2A"), "");
    gv_ventRecords[1].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 285, StringExternal("Param/Value/C99FE860"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[1].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 370, StringExternal("Param/Value/F3A6A353"), StringExternal("Param/Value/CA2EBDAA"), "");
    gv_ventRecords[2].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 375, StringExternal("Param/Value/988EB0AD"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[2].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 470, StringExternal("Param/Value/05FB0D43"), StringExternal("Param/Value/692C3061"), "");
    gv_ventRecords[3].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 475, StringExternal("Param/Value/5EAEBBA2"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[3].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 585, StringExternal("Param/Value/BC4316C0"), StringExternal("Param/Value/C6F537A3"), "");
    gv_ventRecords[4].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 590, StringExternal("Param/Value/7F9C84B0"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[4].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 455, 440, StringExternal("Param/Value/0C494134"), StringExternal("Param/Value/1B890716"), "");
    gv_ventRecords[5].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 460, 445, StringExternal("Param/Value/45DA66ED"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[5].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 375, 440, StringExternal("Param/Value/1F887C15"), StringExternal("Param/Value/0B8C4A72"), "");
    gv_ventRecords[6].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 380, 445, StringExternal("Param/Value/9DB6AF9B"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[6].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 700, 440, StringExternal("Param/Value/95F40731"), StringExternal("Param/Value/8A0DB11B"), "");
    gv_ventRecords[7].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 705, 445, StringExternal("Param/Value/5C90B533"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[7].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 780, 440, StringExternal("Param/Value/1626A80F"), StringExternal("Param/Value/5419F9DA"), "");
    gv_ventRecords[8].lv_button = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 785, 445, StringExternal("Param/Value/05F19F7B"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[8].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 470, StringExternal("Param/Value/85F81BBC"), StringExternal("Param/Value/28586320"), "");
    gv_ventRecords[9].lv_button = DialogControlLastCreated();
    gv_ventRecords[9].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 475, StringExternal("Param/Value/6BEE5E47"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[9].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 585, StringExternal("Param/Value/AE8C69E1"), StringExternal("Param/Value/2309760D"), "");
    gv_ventRecords[10].lv_button = DialogControlLastCreated();
    gv_ventRecords[10].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 590, StringExternal("Param/Value/B3808237"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[10].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 370, StringExternal("Param/Value/82474D45"), StringExternal("Param/Value/578DD5FF"), "");
    gv_ventRecords[11].lv_button = DialogControlLastCreated();
    gv_ventRecords[11].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 375, StringExternal("Param/Value/16B037BB"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[11].lv_picture = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 580, 280, StringExternal("Param/Value/991AC060"), StringExternal("Param/Value/9879F5F7"), "");
    gv_ventRecords[12].lv_button = DialogControlLastCreated();
    gv_ventRecords[12].lv_floor = 2;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 40, c_anchorTopLeft, 585, 285, StringExternal("Param/Value/0C2A7013"), "Assets\\Textures\\btn-ability-protoss-blackhole.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ventRecords[12].lv_picture = DialogControlLastCreated();
    DialogCreate(500, 300, c_anchorCenter, 0, 0, true);
    gv_ventWarning = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 200, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/822045CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomLeft, 150, 100, StringExternal("Param/Value/F0BB7C68"), StringExternal("Param/Value/F43E19BF"), "");
    gv_ventWarningYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomRight, 150, 100, StringExternal("Param/Value/4F9C1AB7"), StringExternal("Param/Value/EC36FFB3"), "");
    gv_ventWarningNo = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorBottomLeft, 50, 40, StringExternal("Param/Value/616E8996"), false);
    gv_showVentWarningCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorBottomLeft, 100, 25, StringExternal("Param/Value/AFB1B1E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rooms[0].lv_doors[0] = 0;
    gv_rooms[0].lv_nrDoors = 1;
    gv_rooms[1].lv_doors[0] = 0;
    gv_rooms[1].lv_doors[1] = 1;
    gv_rooms[1].lv_nrDoors = 2;
    gv_rooms[2].lv_doors[0] = 2;
    gv_rooms[2].lv_doors[1] = 1;
    gv_rooms[2].lv_nrDoors = 2;
    gv_rooms[3].lv_doors[0] = 2;
    gv_rooms[3].lv_doors[1] = 3;
    gv_rooms[3].lv_doors[2] = 4;
    gv_rooms[3].lv_doors[3] = 6;
    gv_rooms[3].lv_nrDoors = 4;
    gv_rooms[4].lv_doors[0] = 3;
    gv_rooms[4].lv_nrDoors = 1;
    gv_rooms[5].lv_doors[0] = 4;
    gv_rooms[5].lv_doors[1] = 5;
    gv_rooms[5].lv_nrDoors = 2;
    gv_rooms[6].lv_doors[0] = 5;
    gv_rooms[6].lv_nrDoors = 1;
    gv_rooms[7].lv_doors[0] = 6;
    gv_rooms[7].lv_doors[1] = 7;
    gv_rooms[7].lv_nrDoors = 2;
    gv_rooms[8].lv_doors[0] = 7;
    gv_rooms[8].lv_nrDoors = 1;
}

void gf_LockDoor (int lp_doorID, int lp_trigplayer) {
    // Implementation
    if ((gv_doors[lp_doorID].lv_locked == false)) {
        libNtve_gf_SetDialogItemImage(gv_doors[lp_doorID].lv_picture, "Lock-icon.tga", PlayerGroupAll());
        DialogControlSetPosition(gv_doors[lp_doorID].lv_picture, PlayerGroupAll(), c_anchorTopLeft, (DialogControlGetOffsetX(gv_doors[lp_doorID].lv_picture, 1) - 2), (DialogControlGetOffsetY(gv_doors[lp_doorID].lv_picture, 1) + 4));
        DialogControlSetSize(gv_doors[lp_doorID].lv_picture, PlayerGroupAll(), (DialogControlGetWidth(gv_doors[lp_doorID].lv_picture, 1) - 7), (DialogControlGetHeight(gv_doors[lp_doorID].lv_picture, 1) - 7));
        gv_doors[lp_doorID].lv_locked = true;
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_doors[lp_doorID].lv_picture, "Lock-Unlock-icon.tga", PlayerGroupAll());
        DialogControlSetPosition(gv_doors[lp_doorID].lv_picture, PlayerGroupAll(), c_anchorTopLeft, (DialogControlGetOffsetX(gv_doors[lp_doorID].lv_picture, 1) + 2), (DialogControlGetOffsetY(gv_doors[lp_doorID].lv_picture, 1) - 4));
        DialogControlSetSize(gv_doors[lp_doorID].lv_picture, PlayerGroupAll(), (DialogControlGetWidth(gv_doors[lp_doorID].lv_picture, 1) + 7), (DialogControlGetHeight(gv_doors[lp_doorID].lv_picture, 1) + 7));
        gv_doors[lp_doorID].lv_locked = false;
    }
}

void gf_VentRoom (int lp_roomID, int lp_trigplayer) {
    // Variable Declarations
    fixed lv_bluecount;
    int lv_speed;

    // Variable Initialization
    lv_bluecount = 100.0;

    // Implementation
    if ((gv_rooms[lp_roomID].lv_vented == false)) {
        gv_rooms[lp_roomID].lv_vented = true;
        DialogControlSetEnabled(gv_ventRecords[lp_roomID].lv_button, PlayerGroupSingle(lp_trigplayer), false);
        IntLoopBegin(0, (gv_rooms[lp_roomID].lv_nrDoors - 1));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_doors[gv_rooms[lp_roomID].lv_doors[IntLoopCurrent()]].lv_locked == false)) {
                gf_LockDoor(gv_rooms[lp_roomID].lv_doors[IntLoopCurrent()], lp_trigplayer);
            }
            else {
            }
        }
        IntLoopEnd();
        while ((lv_bluecount > 50.0)) {
            libNtve_gf_SetDialogItemColor(gv_rooms[lp_roomID].lv_background, Color(lv_bluecount, lv_bluecount, 100.0), PlayerGroupAll());
            lv_bluecount -= 0.3;
            Wait(0.0, c_timeGame);
        }
        DialogControlSetEnabled(gv_ventRecords[lp_roomID].lv_button, PlayerGroupSingle(lp_trigplayer), true);
        libNtve_gf_SetDialogItemImage(gv_ventRecords[lp_roomID].lv_picture, "Assets\\Textures\\btn-ability-protoss-blackhole-color.dds", PlayerGroupAll());
    }
    else {
        lv_bluecount = 50.0;
        gv_rooms[lp_roomID].lv_vented = false;
        DialogControlSetEnabled(gv_ventRecords[lp_roomID].lv_button, PlayerGroupSingle(lp_trigplayer), false);
        while ((lv_bluecount < 100.0)) {
            libNtve_gf_SetDialogItemColor(gv_rooms[lp_roomID].lv_background, Color(lv_bluecount, lv_bluecount, 100.0), PlayerGroupAll());
            lv_bluecount += 0.3;
            Wait(0.0, c_timeGame);
        }
        DialogControlSetEnabled(gv_ventRecords[lp_roomID].lv_button, PlayerGroupSingle(lp_trigplayer), true);
        libNtve_gf_SetDialogItemImage(gv_ventRecords[lp_roomID].lv_picture, "Assets\\Textures\\btn-ability-protoss-blackhole.dds", PlayerGroupAll());
    }
}

void gf_InitEnergyControl () {
    // Implementation
    DialogCreate(600, 400, c_anchorTopLeft, 0, 50, true);
    gv_energyDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 550, 350, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/69E0BA32"), "Dialog Images\\BCOverlay.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_energyBackground = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 20, c_anchorTopLeft, 210, 70, StringExternal("Param/Value/92D9878A"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyWeapons = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTopLeft, 155, 90, StringExternal("Param/Value/D5F1E2AA"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyWeaponsCapacitor = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTopLeft, 225, 230, StringExternal("Param/Value/E9D45750"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyShields = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTopLeft, 155, 250, StringExternal("Param/Value/19431869"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyShieldsCapacitor = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 20, c_anchorTopLeft, 230, 300, StringExternal("Param/Value/370D3970"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyEngine = DialogControlLastCreated();
    DialogCreate(500, 245, c_anchorTopLeft, 0, 450, true);
    gv_energyDialog2 = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 20, c_anchorTopLeft, 50, 40, StringExternal("Param/Value/20FF7AC7"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyCapacitor = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 20, c_anchorTopLeft, 50, 70, StringExternal("Param/Value/6E20CA44"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyProduction = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 20, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/118FF857"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyConnectedships = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 20, c_anchorTopLeft, 50, 130, StringExternal("Param/Value/E27D0FC4"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyDrain = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 20, c_anchorTopLeft, 50, 160, StringExternal("Param/Value/6C9205F9"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyCoreOutput = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 20, c_anchorTopLeft, 50, 190, StringExternal("Param/Value/798A037A"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_energyCoreStability = DialogControlLastCreated();
}

text gf_StabilityToText (fixed lp_stability) {
    // Variable Declarations
    text lv_message;

    // Variable Initialization

    // Implementation
    if ((lp_stability > 95.0)) {
        lv_message = StringExternal("Param/Value/83AA1C60");
    }
    else {
        if ((lp_stability > 88.0)) {
            lv_message = StringExternal("Param/Value/6DD6518E");
        }
        else {
            if ((lp_stability > 75.0)) {
                lv_message = StringExternal("Param/Value/9A26FB58");
            }
            else {
                if ((lp_stability > 50.0)) {
                    lv_message = StringExternal("Param/Value/F369B482");
                }
                else {
                    lv_message = StringExternal("Param/Value/E0259245");
                }
            }
        }
    }
    return lv_message;
}

void gf_UpdateEnergyConsole (int lp_p) {
    int auto4CF4ED30_ae;
    int auto4CF4ED30_ai;

    // Variable Declarations
    int lv_player;
    int lv_i;
    int lv_n;
    unit lv_unit;
    unit lv_closestU;
    unit lv_closestConsole;
    fixed lv_drain;
    unit lv_ship;
    fixed lv_shieldHP;
    fixed lv_netto;
    text lv_nettotext;
    fixed lv_red;
    fixed lv_green;
    fixed lv_core_extra;
    fixed lv_energy_total;
    int lv_team;
    fixed lv_connected_ships;
    string lv_u;

    // Variable Initialization

    // Implementation
    lv_player = lp_p;
    lv_team = gf_GetPlayerTeam(lv_player);
    lv_i = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(lv_player)]);
    lv_ship = gv_nav_ships[lv_i];
    auto4CF4ED30_ae = 20;
    auto4CF4ED30_ai = 1;
    lv_n = 0;
    for ( ; ( (auto4CF4ED30_ai >= 0 && lv_n <= auto4CF4ED30_ae) || (auto4CF4ED30_ai <= 0 && lv_n >= auto4CF4ED30_ae) ) ; lv_n += auto4CF4ED30_ai ) {
        if ((gv_shipList[lv_team][lv_n].lv_status == 0) && (gv_shipList[lv_team][lv_n].lv_shipType != 20)) {
            lv_u = gv_shiptypes[gv_shipList[lv_team][lv_n].lv_shipType].lv_unittype;
            if ((lv_u != null)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_u, c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), Point(0.0, 0.0));
                lv_connected_ships += UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyRegen, c_unitPropCurrent);
                UnitRemove(UnitLastCreated());
            }
            else {
            }
        }
        else {
        }
    }
    libNtve_gf_SetDialogItemText(gv_energyCapacitor, 
      StringToText("Capacitor: ") + 
      FixedToText(UnitGetPropertyFixed(UnitFromId(3), c_unitPropEnergy, c_unitPropCurrent), 0) +
      StringToText("/") +
      FixedToText(UnitGetPropertyFixed(UnitFromId(3), c_unitPropEnergyMax, c_unitPropCurrent), 0) +
      StringToText("GJ (")
      ,PlayerGroupSingle(lv_player));
    libNtve_gf_SetDialogItemText(gv_energyWeaponsCapacitor, 
      StringToText("Weapons Capacitor: ") + 
      IntToText(gv_energy_weapons_capacitor[lv_i]) +
      StringToText("GJ")
      ,PlayerGroupSingle(lv_player));
    libNtve_gf_SetDialogItemText(gv_energyEngine, 
      StringToText("Engine: ") + 
      IntToText(gv_energy_engine[lv_i]) +
      StringToText("GW")
      ,PlayerGroupSingle(lv_player));
    libNtve_gf_SetDialogItemText(gv_energyShields, 
      StringToText("Shields: ") + 
      IntToText(gv_energy_shields[lv_i]) +
      StringToText("GW")
      ,PlayerGroupSingle(lv_player));
    libNtve_gf_SetDialogItemText(gv_energyWeapons, 
      StringToText("Weapons: ") + 
      IntToText(gv_energy_weapons[lv_i]) +
      StringToText("GW")
      ,PlayerGroupSingle(lv_player));
    libNtve_gf_SetDialogItemText(gv_energyCoreOutput,
        StringToText("Core Output: ") +
        IntToText(gv_energy_core_output[lv_i]) +
        StringToText("%")
        ,PlayerGroupSingle(lv_player));
    if(gv_energy_core_stability[lv_i] >= 75){
        lv_green = 100.0;
        lv_red = (1 - ((gv_energy_core_stability[lv_i] - 75) / 25)) * 100;
    } else if(gv_energy_core_stability[lv_i] >= 50){
        lv_green = ((gv_energy_core_stability[lv_i] - 50 ) / 25)*100;
        lv_red = 100.0;
    } else {
        lv_green = 0.0;
        lv_red = 100.0;
    }
    libNtve_gf_SetDialogItemText(gv_energyCoreStability,
        StringToText("Core Stability: ") +
        TextWithColor(FixedToText(gv_energy_core_stability[lv_i],2) +
            StringToText("% - ") + 
            gf_StabilityToText(gv_energy_core_stability[lv_i])
            ,Color(lv_red,lv_green,0.0))
        ,PlayerGroupSingle(lv_player));
        
    lv_drain = gv_energy_engine[lv_i] + gv_energy_shields[lv_i] + gv_energy_weapons[lv_i];
    //Print(FixedToString((IntToFixed(gv_energy_core_output[lv_i]) - 100.0) / 100.0,5));
    lv_core_extra = (IntToFixed(gv_energy_core_output[lv_i]) - 100.0) / 100.0 * UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropCurrent);
    //Print(FixedToString(lv_core_extra));
    // 
    lv_energy_total = (UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropCurrent) + lv_core_extra);
    if ((UnitHasBehavior(gf_shipToNavigator(gv_battlecruisers[lv_team]), "TractorBeamLock") == true) && (TechTreeUpgradeCount(UnitGetOwner(gv_battlecruisers[lv_team]), "TierOffensive3", c_techCountCompleteOnly) == 0)) {
        lv_drain += 30.0;
    }
    else {
    }
    lv_netto = ((lv_energy_total + lv_connected_ships) - lv_drain);
    if ((lv_netto > 0.0)) {
        lv_nettotext = TextWithColor((StringExternal("Param/Value/28C5A0AC") + FixedToText(lv_netto, 0)), Color(0.00, 100.00, 0.00));
    }
    else {
        if ((lv_netto < 0.0)) {
            lv_nettotext = TextWithColor((StringExternal("Param/Value/E5025839") + FixedToText(lv_netto, 0)), Color(100.00, 0.00, 0.00));
        }
        else {
            lv_nettotext = StringExternal("Param/Value/4CFBD583");
        }
    }
    libNtve_gf_SetDialogItemText(gv_energyCapacitor, (StringExternal("Param/Value/CB5155F2") + FixedToText(UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent), 0) + StringExternal("Param/Value/BD5ABE69") + FixedToText(UnitGetPropertyFixed(lv_ship, c_unitPropEnergyMax, c_unitPropCurrent), 0) + StringExternal("Param/Value/3624E8A1") + lv_nettotext + StringExternal("Param/Value/DDD81156")), PlayerGroupSingle(lp_p));
    // Update drain and production.
    libNtve_gf_SetDialogItemText(gv_energyDrain, (StringToText("Drain: ") + TextWithColor(StringToText("-")+FixedToText(lv_drain, 0),Color(100.0,0.0,0.0))), PlayerGroupSingle(lp_p));
    libNtve_gf_SetDialogItemText(gv_energyProduction, (StringToText("Production: ") + TextWithColor(StringToText("+")+FixedToText(lv_energy_total, 0),Color(0.0,100.0,0.0))), PlayerGroupSingle(lp_p));
    libNtve_gf_SetDialogItemText(gv_energyConnectedships, (StringToText("Connected ships: ") + TextWithColor(StringToText("+")+FixedToText(lv_connected_ships, 0),Color(0.0,100.0,0.0))), PlayerGroupSingle(lp_p));
    libNtve_gf_SetDialogItemText(gv_energyShieldsCapacitor, (StringExternal("Param/Value/94E04911") + FixedToText(UnitGetPropertyFixed(gv_battlecruisers[gf_GetPlayerTeam(lv_player)], c_unitPropShields, c_unitPropCurrent), 0) + StringExternal("Param/Value/99A7C43D") + FixedToText(UnitGetPropertyFixed(lv_ship, c_unitPropShieldsMax, c_unitPropCurrent), 0)), PlayerGroupSingle(lp_p));
}

void gf_OpenEnergy (int lp_player, unit lp_unit) {
    // Implementation
    DialogSetVisible(gv_energyDialog, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_energyDialog2, PlayerGroupSingle(lp_player), true);
    while ((UnitHasBehavior(lp_unit, "InConsole") == true)) {
        gf_UpdateEnergyConsole(lp_player);
        Wait(1.0, c_timeGame);
    }
}

void gf_InitBoarding () {
    // Implementation
    DialogCreate(300, 500, c_anchorLeft, 0, 0, true);
    gv_hackingdialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/ABAE220E"), StringExternal("Param/Value/789014A7"), "");
    gv_sabotagebutton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 125, StringExternal("Param/Value/7EF34C36"), StringExternal("Param/Value/A323C570"), "");
    gv_hackbutton = DialogControlLastCreated();
}

trigger auto_gf_Hack_Trigger = null;
int auto_gf_Hack_lp_player;
fixed auto_gf_Hack_lp_delay;
string auto_gf_Hack_lp_code;

void gf_Hack (int lp_player, fixed lp_delay, string lp_code) {
    auto_gf_Hack_lp_player = lp_player;
    auto_gf_Hack_lp_delay = lp_delay;
    auto_gf_Hack_lp_code = lp_code;

    if (auto_gf_Hack_Trigger == null) {
        auto_gf_Hack_Trigger = TriggerCreate("auto_gf_Hack_TriggerFunc");
    }

    TriggerExecute(auto_gf_Hack_Trigger, false, false);
}

bool auto_gf_Hack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Hack_lp_player;
    fixed lp_delay = auto_gf_Hack_lp_delay;
    string lp_code = auto_gf_Hack_lp_code;

    int autoA08C24E7_ae;
    int autoA08C24E7_ai;
    string autoA8A4BA8F_val;
    int auto80FA56AD_ae;
    int auto80FA56AD_ai;
    int autoA9FD1BE3_ae;
    int autoA9FD1BE3_ai;
    int autoCEFF6012_ae;
    int autoCEFF6012_ai;
    int auto707546FE_ae;
    int auto707546FE_ai;

    // Variable Declarations
    bool lv_crash;
    int lv_i;
    int lv_temp;
    int[51] lv_temp2;
    bool lv_skip;
    int lv_a;
    unit lv_closestConsole;

    // Variable Initialization

    // Implementation
    gv_hack_x[lp_player] = 0;
    gv_hack_xe[lp_player] = 0;
    gv_hack_y[lp_player] = 0;
    gv_hack_ye[lp_player] = 0;
    gv_hack_sp[lp_player] = 0;
    gv_hack_register[lp_player] = 999;
    libNtve_gf_SetDialogItemColor(gv_uIThread, Color(150*100/255,150*100/255,30*100/255), PlayerGroupSingle(lp_player));
    gf_LoadGrid(lp_player, lp_code);
    CameraSave(lp_player);
    CameraLockInput(lp_player, true);
    CameraSetBounds(PlayerGroupSingle(lp_player), RegionEntireMap(), true);
    CameraPan(lp_player, Point(256.0, 0.0), 0.0, -1, 10, false);
    DialogSetVisible(gv_gridWindow, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_stackWindow, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_outputWindow, PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_switchView, PlayerGroupSingle(lp_player), false);
    gf_RedrawGrid(lp_player);
    autoA08C24E7_ae = 49;
    autoA08C24E7_ai = 1;
    lv_i = 0;
    for ( ; ( (autoA08C24E7_ai >= 0 && lv_i <= autoA08C24E7_ae) || (autoA08C24E7_ai <= 0 && lv_i >= autoA08C24E7_ae) ) ; lv_i += autoA08C24E7_ai ) {
        libNtve_gf_SetDialogItemText(gv_uIStack[lv_i], StringExternal("Param/Value/708D0518"), PlayerGroupSingle(lp_player));
    }
    DialogControlSetPosition(gv_uIPointer, PlayerGroupSingle(lp_player), c_anchorTopLeft, (34 + (gv_hack_xe[lp_player] * 18)), (38 + (gv_hack_ye[lp_player] * 18)));
    while ((gv_hack_break[lp_player] == false)) {
        if ((lv_skip == false)) {
            Wait(lp_delay, c_timeGame);
            autoA8A4BA8F_val = gv_hack_grid[gv_hack_x[lp_player]][gv_hack_y[lp_player]][lp_player];
            if (autoA8A4BA8F_val == ":") {
                if ((gv_hack_sp[lp_player] > 0) && (gv_hack_sp[lp_player] < 50)) {
                    gv_hack_stack[gv_hack_sp[lp_player]][lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player];
                    gv_hack_sp[lp_player] = (gv_hack_sp[lp_player] + 1);
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "~") {
                gv_hack_sp[lp_player] = (gv_hack_sp[lp_player] - 1);
                if ((gv_hack_sp[lp_player] == -1)) {
                    lv_crash = true;
                    break;
                }
                else {
                }
            }
            else if (autoA8A4BA8F_val == "$") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    lv_temp = gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player];
                    gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player];
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = lv_temp;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "@") {
                if ((gv_hack_sp[lp_player] > 2)) {
                    lv_temp = gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player];
                    gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player];
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 3)][lp_player];
                    gv_hack_stack[(gv_hack_sp[lp_player] - 3)][lp_player] = lv_temp;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "r") {
                auto80FA56AD_ae = 0;
                auto80FA56AD_ai = -1;
                lv_a = (gv_hack_sp[lp_player] - 1);
                for ( ; ( (auto80FA56AD_ai >= 0 && lv_a <= auto80FA56AD_ae) || (auto80FA56AD_ai <= 0 && lv_a >= auto80FA56AD_ae) ) ; lv_a += auto80FA56AD_ai ) {
                    lv_temp2[((gv_hack_sp[lp_player] - 1) - lv_a)] = gv_hack_stack[lv_a][lp_player];
                }
                autoA9FD1BE3_ae = (gv_hack_sp[lp_player] - 1);
                autoA9FD1BE3_ai = 1;
                lv_a = 0;
                for ( ; ( (autoA9FD1BE3_ai >= 0 && lv_a <= autoA9FD1BE3_ae) || (autoA9FD1BE3_ai <= 0 && lv_a >= autoA9FD1BE3_ae) ) ; lv_a += autoA9FD1BE3_ai ) {
                    gv_hack_stack[lv_a][lp_player] = lv_temp2[lv_a];
                }
            }
            else if (autoA8A4BA8F_val == "l") {
                if ((gv_hack_sp[lp_player] < 50)) {
                    gv_hack_stack[gv_hack_sp[lp_player]][lp_player] = gv_hack_sp[lp_player];
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "&") {
                if ((gv_hack_register[lp_player] == 999)) {
                    gv_hack_register[lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player];
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    if ((gv_hack_sp[lp_player] < 50)) {
                        gv_hack_stack[gv_hack_sp[lp_player]][lp_player] = gv_hack_register[lp_player];
                        gv_hack_register[lp_player] = 999;
                        gv_hack_sp[lp_player] += 1;
                    }
                    else {
                        lv_crash = true;
                        break;
                    }
                }
            }
            else if (autoA8A4BA8F_val == "") {
            }
            else if (autoA8A4BA8F_val == " ") {
            }
            else if (autoA8A4BA8F_val == "x") {
                gv_hack_dir[lp_player] = RandomInt(0, 3);
            }
            else if (autoA8A4BA8F_val == "^") {
                gv_hack_dir[lp_player] = 1;
            }
            else if (autoA8A4BA8F_val == "v") {
                gv_hack_dir[lp_player] = 3;
            }
            else if (autoA8A4BA8F_val == ">") {
                gv_hack_dir[lp_player] = 0;
            }
            else if (autoA8A4BA8F_val == "<") {
                gv_hack_dir[lp_player] = 2;
            }
            else if (autoA8A4BA8F_val == "\\") {
                gv_hack_dir[lp_player] = (3 - gv_hack_dir[lp_player]);
            }
            else if (autoA8A4BA8F_val == "/") {
                if (((gv_hack_dir[lp_player] == 0) || (gv_hack_dir[lp_player] == 1))) {
                    gv_hack_dir[lp_player] = (1 - gv_hack_dir[lp_player]);
                }
                else {
                    gv_hack_dir[lp_player] = (5 - gv_hack_dir[lp_player]);
                }
            }
            else if (autoA8A4BA8F_val == "_") {
                if (((gv_hack_dir[lp_player] == 3) || (gv_hack_dir[lp_player] == 1))) {
                    gv_hack_dir[lp_player] = (4 - gv_hack_dir[lp_player]);
                }
                else {
                }
            }
            else if (autoA8A4BA8F_val == "|") {
                if (((gv_hack_dir[lp_player] == 2) || (gv_hack_dir[lp_player] == 0))) {
                    gv_hack_dir[lp_player] = (2 - gv_hack_dir[lp_player]);
                }
                else {
                }
            }
            else if (autoA8A4BA8F_val == "#") {
                if (((gv_hack_dir[lp_player] == 2) || (gv_hack_dir[lp_player] == 0))) {
                    gv_hack_dir[lp_player] = (2 - gv_hack_dir[lp_player]);
                }
                else {
                    gv_hack_dir[lp_player] = (4 - gv_hack_dir[lp_player]);
                }
            }
            else if (autoA8A4BA8F_val == "+") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = (gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] + gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player]);
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "-") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = (gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] - gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player]);
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "*") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = (gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] * gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player]);
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == ",") {
                if ((gv_hack_sp[lp_player] > 1) && (gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] != 0)) {
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = (gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] / gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player]);
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "%") {
                if ((gv_hack_sp[lp_player] > 1) && (gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] != lp_player)) {
                    gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = ModI(gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player], (gv_hack_sp[lp_player] - 2));
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == ".") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    gv_hack_x[lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player];
                    gv_hack_y[lp_player] = gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player];
                    DialogControlSetPosition(gv_uIThread, PlayerGroupSingle(lp_player), c_anchorTopLeft, (34 + (gv_hack_x[lp_player] * 18)), (38 + (gv_hack_y[lp_player] * 18)));
                    gv_hack_sp[lp_player] -= 2;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == ")") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    if ((gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] > gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player])) {
                        gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = 1;
                        gv_hack_sp[lp_player] -= 1;
                    }
                    else {
                        gv_hack_sp[lp_player] -= 2;
                    }
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "(") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    if ((gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] < gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player])) {
                        gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = 1;
                        gv_hack_sp[lp_player] -= 1;
                    }
                    else {
                        gv_hack_sp[lp_player] -= 2;
                    }
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "=") {
                if ((gv_hack_sp[lp_player] > 1)) {
                    if ((gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] == gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player])) {
                        gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = 1;
                    }
                    else {
                        gv_hack_stack[(gv_hack_sp[lp_player] - 2)][lp_player] = 0;
                    }
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                    lv_crash = true;
                    break;
                }
            }
            else if (autoA8A4BA8F_val == "n") {
                gv_hack_sp[lp_player] = (gv_hack_sp[lp_player] - 1);
                if ((gv_hack_sp[lp_player] == -1)) {
                    lv_crash = true;
                    break;
                }
                else {
                }
                gf_HackOutput(gv_hack_stack[gv_hack_sp[lp_player]][lp_player], lp_player);
            }
            else if (autoA8A4BA8F_val == "}") {
                lv_temp = gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player];
                autoCEFF6012_ae = 1;
                autoCEFF6012_ai = -1;
                lv_i = (gv_hack_sp[lp_player] - 1);
                for ( ; ( (autoCEFF6012_ai >= 0 && lv_i <= autoCEFF6012_ae) || (autoCEFF6012_ai <= 0 && lv_i >= autoCEFF6012_ae) ) ; lv_i += autoCEFF6012_ai ) {
                    gv_hack_stack[lv_i][lp_player] = gv_hack_stack[(lv_i - 1)][lp_player];
                }
                gv_hack_stack[0][lp_player] = lv_temp;
            }
            else if (autoA8A4BA8F_val == "{") {
                lv_temp = gv_hack_stack[0][lp_player];
                auto707546FE_ae = (gv_hack_sp[lp_player] - 2);
                auto707546FE_ai = 1;
                lv_i = 0;
                for ( ; ( (auto707546FE_ai >= 0 && lv_i <= auto707546FE_ae) || (auto707546FE_ai <= 0 && lv_i >= auto707546FE_ae) ) ; lv_i += auto707546FE_ai ) {
                    gv_hack_stack[lv_i][lp_player] = gv_hack_stack[(lv_i + 1)][lp_player];
                }
                gv_hack_stack[(gv_hack_sp[lp_player] + 1)][lp_player] = lv_temp;
            }
            else if (autoA8A4BA8F_val == "!") {
                lv_skip = true;
            }
            else if (autoA8A4BA8F_val == "?") {
                if ((gv_hack_sp[lp_player] > 0)) {
                    if ((gv_hack_stack[(gv_hack_sp[lp_player] - 1)][lp_player] == 0)) {
                        lv_skip = true;
                    }
                    else {
                    }
                    gv_hack_sp[lp_player] -= 1;
                }
                else {
                }
            }
            else {
                gv_hack_stack[gv_hack_sp[lp_player]][lp_player] = gf_StringToInteger(gv_hack_grid[gv_hack_x[lp_player]][gv_hack_y[lp_player]][lp_player]);
                if ((gv_hack_stack[gv_hack_sp[lp_player]][lp_player] == -1)) {
                    lv_crash = true;
                    break;
                }
                else {
                }
                gv_hack_sp[lp_player] = (gv_hack_sp[lp_player] + 1);
                if ((gv_hack_sp[lp_player] == 50)) {
                    lv_crash = true;
                    break;
                }
                else {
                }
            }
        }
        else {
            lv_skip = false;
        }
        if ((gv_hack_level[lp_player] > 1)) {
            gf_RedrawStack(lp_player);
        }
        else {
        }
        if( gv_hack_dir[lp_player] == 0 || gv_hack_dir[lp_player]  == 2){
          gv_hack_x[lp_player] += 1 - gv_hack_dir[lp_player];
        }
        if( gv_hack_dir[lp_player] == 1 || gv_hack_dir[lp_player]  == 3){
          gv_hack_y[lp_player] += gv_hack_dir[lp_player] - 2;
        }
        if( gv_hack_x[lp_player] > 49){gv_hack_x[lp_player] = 0;}
        if( gv_hack_x[lp_player] <  0){gv_hack_x[lp_player] = 49;}
        if( gv_hack_y[lp_player] > 49){gv_hack_y[lp_player] = 0;}
        if( gv_hack_y[lp_player] <  0){gv_hack_y[lp_player] = 49;}
        DialogControlSetPosition(gv_uIThread, PlayerGroupSingle(lp_player), c_anchorTopLeft, (34 + (gv_hack_x[lp_player] * 18)), (38 + (gv_hack_y[lp_player] * 18)));
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/D99ED1BB"), true);
    gv_hack_break[lp_player] = false;
    if ((lv_crash == true)) {
        libNtve_gf_SetDialogItemColor(gv_uIThread, Color(100.00, 0.00, 0.00), PlayerGroupSingle(lp_player));
        Wait(5.0, c_timeGame);
    }
    else {
    }
    DialogSetVisible(gv_gridWindow, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_stackWindow, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_outputWindow, PlayerGroupSingle(lp_player), false);
    UnitBehaviorRemove(gv_pilots[lp_player], "Hacking", 1);
    gf_LeaveConsole(lp_player, gv_pilots[lp_player]);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeAchievementMenuButton, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeAlertPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeErrorDisplayPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeHelpMenuButton, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeInfoPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMenuBar, true);
    CameraRestore(lp_player, 0.0, -1, 10);
    UnitBehaviorRemove(gv_pilots[lp_player], "Hacking", 1);
    CameraLockInput(lp_player, false);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeObjectivePanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeTipAlertPanel, true);
    return true;
}

void gf_StartHack (int lp_p, unit lp_console) {
    int auto20A68010_ae;
    int auto20A68010_ai;
    string auto8F0EE281_val;
    int auto57908606_ae;
    int auto57908606_ai;
    int autoE02D9F6B_ae;
    int autoE02D9F6B_ai;

    // Variable Declarations
    unit lv_closestConsole;
    int lv_difficulty;
    fixed lv_speed;
    string lv_code;
    int lv_max;
    int lv_i;
    int lv_a;
    int lv_shipid;
    text lv_shipname;

    // Variable Initialization
    lv_code = "";

    // Implementation
    TriggerDebugOutput(1, (StringExternal("Param/Value/F48D41A2") + PlayerName(lp_p) + StringExternal("Param/Value/7C99E729") + IntToText(lp_p)), true);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeErrorDisplayPanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupSingle(lp_p), c_syncFrameTypeTipAlertPanel, false);
    DialogSetVisible(gv_headerShipStatus, PlayerGroupSingle(lp_p), false);
    DialogSetVisible(gv_shipStatus, PlayerGroupSingle(lp_p), false);
    UnitClearSelection(lp_p);
    UnitSelect(UnitGroupRandomUnit(UnitGroupSelected(lp_p), c_unitCountAlive), lp_p, false);
    UnitBehaviorAdd(gv_pilots[lp_p], "Hacking", lp_console, 1);
    Wait(0.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HackingDevice", c_unitCreateIgnorePlacement, lp_p, UnitGetPosition(gv_pilots[lp_p]));
    gv_hacking_device[lp_p] = UnitLastCreated();
    UnitSelect(UnitLastCreated(), lp_p, true);
    Wait(0.0, c_timeGame);
    TriggerDebugOutput(1, (StringExternal("Param/Value/30738AD6") + UnitTypeGetName(UnitGetType(UnitGroupRandomUnit(UnitGroupSelected(lp_p), c_unitCountAlive))) + StringExternal("Param/Value/B38F32B1") + IntToText(lp_p)), true);
    auto20A68010_ae = 20;
    auto20A68010_ai = 1;
    lv_a = 0;
    for ( ; ( (auto20A68010_ai >= 0 && lv_a <= auto20A68010_ae) || (auto20A68010_ai <= 0 && lv_a >= auto20A68010_ae) ) ; lv_a += auto20A68010_ai ) {
        gv_hack_order_ids[lp_p][lv_a] = -1;
    }
    auto8F0EE281_val = UnitGetType(lp_console);
    if (auto8F0EE281_val == "Hangarconsole") {
        lv_difficulty = 3;
        lv_speed = 0.35;
        lv_code = gf_getRandomCode(lv_difficulty);
        lv_max = 10;
        gv_hack_console_type[lp_p] = 0;
        gf_setOrderId(lp_p, 0, lv_max);
        gf_setOrderId(lp_p, 1, lv_max);
        gf_setOrderId(lp_p, 2, lv_max);
        libNtve_gf_SetDialogItemText(gv_outputsLabel[0], StringExternal("Param/Value/143B24E0"), PlayerGroupSingle(lp_p));
        libNtve_gf_SetDialogItemText(gv_outputsLabel[1], StringExternal("Param/Value/3AF863A2"), PlayerGroupSingle(lp_p));
        libNtve_gf_SetDialogItemText(gv_outputsLabel[2], StringExternal("Param/Value/141A796E"), PlayerGroupSingle(lp_p));
        gv_selectedShip[lp_p] = 0;
        lv_shipid = gv_shipList[(3 - gf_GetPlayerTeam(lp_p))][gv_selectedShip[lp_p]].lv_shipType;
        if ((lv_shipid == 20)) {
            lv_shipname = StringExternal("Param/Value/D6AEBBED");
        }
        else {
            lv_shipname = UnitTypeGetName(gv_shiptypes[lv_shipid].lv_unittype);
        }
        libNtve_gf_SetDialogItemText(gv_outputExtraInfo, (StringExternal("Param/Value/86510417") + lv_shipname), PlayerGroupSingle(lp_p));
        DialogControlSetVisible(gv_outputWindowLabel3, PlayerGroupSingle(lp_p), true);
        lv_max = 3;
    }
    else {
        lv_difficulty = 1;
        lv_speed = 0.8;
        lv_code = gf_getRandomCode(lv_difficulty);
        gv_hack_console_type[lp_p] = -1;
        lv_max = 0;
    }
    if ((gv_hack_level[lp_p] >= 3)) {
        auto57908606_ae = 20;
        auto57908606_ai = 1;
        lv_i = 0;
        for ( ; ( (auto57908606_ai >= 0 && lv_i <= auto57908606_ae) || (auto57908606_ai <= 0 && lv_i >= auto57908606_ae) ) ; lv_i += auto57908606_ai ) {
            gv_hack_order_discovered[lp_p][lv_i] = true;
            if ((lv_i < lv_max)) {
                libNtve_gf_SetDialogItemText(gv_outputsLabel[lv_i], (libNtve_gf_DialogItemText(gv_outputsLabel[lv_i], lp_p) + StringExternal("Param/Value/64218A4C") + IntToText(gv_hack_order_ids[lp_p][lv_i])), PlayerGroupSingle(lp_p));
            }
            else {
            }
        }
    }
    else {
        autoE02D9F6B_ae = 20;
        autoE02D9F6B_ai = 1;
        lv_i = 0;
        for ( ; ( (autoE02D9F6B_ai >= 0 && lv_i <= autoE02D9F6B_ae) || (autoE02D9F6B_ai <= 0 && lv_i >= autoE02D9F6B_ae) ) ; lv_i += autoE02D9F6B_ai ) {
            gv_hack_order_discovered[lp_p][lv_i] = false;
        }
    }
    lv_code = "v  <''>  ^''            >8-^'v           5n*>#'>           >3,^'            #";
    gf_Hack(1, 0.1, lv_code);
}

void gf_HackOutput (int lp_output, int lp_p) {
    int autoE9EACC09_ae;
    int autoE9EACC09_ai;
    int autoFBE34199_ae;
    int autoFBE34199_ai;
    int auto67303B4E_val;
    int autoF0F9665A_val;

    // Variable Declarations
    int lv_i;
    int lv_order;
    string lv_s;
    int lv_shipid;
    text lv_shipname;
    unit lv_u;

    // Variable Initialization
    lv_order = -1;
    lv_s = "";

    // Implementation
    autoE9EACC09_ae = 0;
    autoE9EACC09_ai = -1;
    lv_i = 5;
    for ( ; ( (autoE9EACC09_ai >= 0 && lv_i <= autoE9EACC09_ae) || (autoE9EACC09_ai <= 0 && lv_i >= autoE9EACC09_ae) ) ; lv_i += autoE9EACC09_ai ) {
        libNtve_gf_SetDialogItemText(gv_recentOutputLabel[(lv_i + 1)], libNtve_gf_DialogItemText(gv_recentOutputLabel[lv_i], lp_p), PlayerGroupSingle(lp_p));
    }
    libNtve_gf_SetDialogItemText(gv_recentOutputLabel[0], IntToText(lp_output), PlayerGroupSingle(lp_p));
    autoFBE34199_ae = 20;
    autoFBE34199_ai = 1;
    lv_i = 0;
    for ( ; ( (autoFBE34199_ai >= 0 && lv_i <= autoFBE34199_ae) || (autoFBE34199_ai <= 0 && lv_i >= autoFBE34199_ae) ) ; lv_i += autoFBE34199_ai ) {
        if ((gv_hack_order_ids[lp_p][lv_i] == lp_output)) {
            lv_order = lv_i;
            break;
        }
        else {
        }
    }
    if ((lv_order != -1)) {
        TriggerDebugOutput(1, StringToText(lv_s), true);
        if ((gv_hack_order_discovered[lp_p][lv_order] == false)) {
            gv_hack_order_discovered[lp_p][lv_order] = true;
            libNtve_gf_SetDialogItemText(gv_outputsLabel[lv_order], (libNtve_gf_DialogItemText(gv_outputsLabel[lv_order], lp_p) + StringExternal("Param/Value/1AB4D7AD") + IntToText(lp_output)), PlayerGroupSingle(lp_p));
        }
        else {
        }
        auto67303B4E_val = gv_hack_console_type[lp_p];
        if (auto67303B4E_val == 0) {
            TriggerDebugOutput(1, StringExternal("Param/Value/82B18E02"), true);
            lv_shipid = gv_shipList[(3 - gf_GetPlayerTeam(lp_p))][gv_selectedShip[lp_p]].lv_shipType;
            if ((lv_shipid == 20)) {
                lv_shipname = StringExternal("Param/Value/3FFF4CE9");
            }
            else {
                lv_shipname = UnitTypeGetName(gv_shiptypes[lv_shipid].lv_unittype);
            }
            autoF0F9665A_val = lv_order;
            if (autoF0F9665A_val == 0) {
                TriggerDebugOutput(1, StringExternal("Param/Value/5FA3C257"), true);
                if ((gv_selectedShip[lp_p] < 20)) {
                    gv_selectedShip[lp_p] = (gv_selectedShip[lp_p] + 1);
                }
                else {
                    gv_selectedShip[lp_p] = 0;
                }
                libNtve_gf_SetDialogItemText(gv_outputExtraInfo, (StringExternal("Param/Value/5EA3272A") + lv_shipname), PlayerGroupSingle(lp_p));
            }
            else if (autoF0F9665A_val == 1) {
                TriggerDebugOutput(1, StringExternal("Param/Value/8A0CCEBE"), true);
                if ((gv_selectedShip[lp_p] > 0)) {
                    gv_selectedShip[lp_p] = (gv_selectedShip[lp_p] - 1);
                }
                else {
                    gv_selectedShip[lp_p] = 20;
                }
                libNtve_gf_SetDialogItemText(gv_outputExtraInfo, (StringExternal("Param/Value/6A3FFAC7") + lv_shipname), PlayerGroupSingle(lp_p));
            }
            else if (autoF0F9665A_val == 2) {
                TriggerDebugOutput(1, StringExternal("Param/Value/AE89CFAE"), true);
                if ((gv_shipList[gf_GetPlayerTeam(lp_p)][gv_selectedShip[lp_p]].lv_shipType != 20)) {
                    lv_u = gf_Launchship(lp_p, gv_selectedShip[lp_p], null, (3 - gf_GetPlayerTeam(lp_p)));
                    gv_hack_break[lp_p] = true;
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
}

string gf_getRandomCode (int lp_difficulty) {
    int auto4476C22E_ae;
    int auto4476C22E_ai;

    // Variable Declarations
    int lv_count;
    int lv_i;

    // Variable Initialization
    lv_count = -1;

    // Implementation
    auto4476C22E_ae = 10;
    auto4476C22E_ai = 1;
    lv_i = 0;
    for ( ; ( (auto4476C22E_ai >= 0 && lv_i <= auto4476C22E_ae) || (auto4476C22E_ai <= 0 && lv_i >= auto4476C22E_ae) ) ; lv_i += auto4476C22E_ai ) {
        if ((gv_hack_code[lp_difficulty][lv_i] != "")) {
            lv_count += 1;
        }
        else {
        }
    }
    return gv_hack_code[lp_difficulty][RandomInt(0, lv_count)];
}

void gf_setOrderId (int lp_p, int lp_id, int lp_max) {
    int auto62E16317_ae;
    int auto62E16317_ai;

    // Variable Declarations
    bool lv_alreadyUsed;
    int lv_i;
    int lv_rand;

    // Variable Initialization
    lv_alreadyUsed = true;

    // Implementation
    while ((lv_alreadyUsed == true)) {
        lv_alreadyUsed = false;
        lv_rand = RandomInt(0, lp_max);
        auto62E16317_ae = lp_id;
        auto62E16317_ai = 1;
        lv_i = 0;
        for ( ; ( (auto62E16317_ai >= 0 && lv_i <= auto62E16317_ae) || (auto62E16317_ai <= 0 && lv_i >= auto62E16317_ae) ) ; lv_i += auto62E16317_ai ) {
            if ((gv_hack_order_ids[lp_p][lv_i] == lv_rand)) {
                lv_alreadyUsed = true;
            }
            else {
            }
        }
    }
    gv_hack_order_ids[lp_p][lp_id] = lv_rand;
}

void gf_LoadGrid (int lp_player, string lp_code) {
    int auto8252C322_ae;
    int auto8252C322_ai;

    // Variable Declarations
    int lv_i;
    int lv_x;
    int lv_y;

    // Variable Initialization

    // Implementation
    auto8252C322_ae = StringLength(lp_code);
    auto8252C322_ai = 1;
    lv_i = 1;
    for ( ; ( (auto8252C322_ai >= 0 && lv_i <= auto8252C322_ae) || (auto8252C322_ai <= 0 && lv_i >= auto8252C322_ae) ) ; lv_i += auto8252C322_ai ) {
        gv_hack_grid[lv_x][lv_y][lp_player] = StringSub(lp_code, lv_i, lv_i);
        if(gv_hack_grid[lv_x][lv_y][lp_player] == "'" || lv_x > 48){
          if(gv_hack_grid[lv_x][lv_y][lp_player] == "'") {
            gv_hack_grid[lv_x][lv_y][lp_player] = "";
          }
          lv_y += 1;
          lv_x = 0;
          
        } else {
          lv_x += 1;
        }
    }
}

void gf_RedrawGrid (int lp_player) {
    int auto0090677D_ae;
    int auto0090677D_ai;
    int autoCD7800CA_ae;
    int autoCD7800CA_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    auto0090677D_ae = 49;
    auto0090677D_ai = 1;
    lv_i = 0;
    for ( ; ( (auto0090677D_ai >= 0 && lv_i <= auto0090677D_ae) || (auto0090677D_ai <= 0 && lv_i >= auto0090677D_ae) ) ; lv_i += auto0090677D_ai ) {
        autoCD7800CA_ae = 49;
        autoCD7800CA_ai = 1;
        lv_j = 0;
        for ( ; ( (autoCD7800CA_ai >= 0 && lv_j <= autoCD7800CA_ae) || (autoCD7800CA_ai <= 0 && lv_j >= autoCD7800CA_ae) ) ; lv_j += autoCD7800CA_ai ) {
            libNtve_gf_SetDialogItemText(gv_uIGrid[lv_i][lv_j], StringToText(gv_hack_grid[lv_i][lv_j][lp_player]), PlayerGroupSingle(lp_player));
        }
    }
}

void gf_RedrawStack (int lp_player) {
    int auto557D16B9_ae;
    int auto557D16B9_ai;
    int auto90B7E4AA_ae;
    int auto90B7E4AA_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    auto557D16B9_ae = gv_hack_sp[lp_player];
    auto557D16B9_ai = 1;
    lv_i = 0;
    for ( ; ( (auto557D16B9_ai >= 0 && lv_i <= auto557D16B9_ae) || (auto557D16B9_ai <= 0 && lv_i >= auto557D16B9_ae) ) ; lv_i += auto557D16B9_ai ) {
        libNtve_gf_SetDialogItemText(gv_uIStack[lv_i], IntToText(gv_hack_stack[lv_i][lp_player]), PlayerGroupSingle(lp_player));
    }
    auto90B7E4AA_ae = 49;
    auto90B7E4AA_ai = 1;
    lv_i = gv_hack_sp[lp_player];
    for ( ; ( (auto90B7E4AA_ai >= 0 && lv_i <= auto90B7E4AA_ae) || (auto90B7E4AA_ai <= 0 && lv_i >= auto90B7E4AA_ae) ) ; lv_i += auto90B7E4AA_ai ) {
        libNtve_gf_SetDialogItemText(gv_uIStack[lv_i], StringExternal("Param/Value/C24EF88A"), PlayerGroupSingle(lp_player));
    }
}

int gf_StringToInteger (string lp_string) {
    int auto16CA43DD_ae;
    int auto16CA43DD_ai;
    string auto14395A3E_val;

    // Variable Declarations
    int lv_ret;
    int lv_i;

    // Variable Initialization

    // Implementation
    auto16CA43DD_ae = StringLength(lp_string);
    auto16CA43DD_ai = 1;
    lv_i = 1;
    for ( ; ( (auto16CA43DD_ai >= 0 && lv_i <= auto16CA43DD_ae) || (auto16CA43DD_ai <= 0 && lv_i >= auto16CA43DD_ae) ) ; lv_i += auto16CA43DD_ai ) {
        auto14395A3E_val = StringSub(lp_string, lv_i, lv_i);
        if (auto14395A3E_val == "0") {
            lv_ret += 0 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "1") {
            lv_ret += 1 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "2") {
            lv_ret += 2 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "3") {
            lv_ret += 3 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "4") {
            lv_ret += 4 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "5") {
            lv_ret += 5 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "6") {
            lv_ret += 6 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "7") {
            lv_ret += 7 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "8") {
            lv_ret += 8 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "9") {
            lv_ret += 9 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "a") {
            lv_ret += 10 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "b") {
            lv_ret += 11 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "c") {
            lv_ret += 12 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "d") {
            lv_ret += 13 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "e") {
            lv_ret += 14 * PowI(10, lv_i-1);
        }
        else if (auto14395A3E_val == "f") {
            lv_ret += 15 * PowI(10, lv_i-1);
        }
        else {
            return -1;
        }
    }
    return lv_ret;
}

bool gf_UnitHasItem (unit lp_target_u, string lp_item) {
    unitgroup auto5EB3A99F_g;
    int auto5EB3A99F_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Implementation
    auto5EB3A99F_g = UnitInventoryGroup(lp_target_u);
    auto5EB3A99F_u = 1;
    for ( ; auto5EB3A99F_u <= UnitGroupCount(auto5EB3A99F_g, c_unitCountAll) ; auto5EB3A99F_u += BoolToInt(lv_u == UnitGroupUnit(auto5EB3A99F_g, auto5EB3A99F_u)) ) {
        lv_u = UnitGroupUnit(auto5EB3A99F_g, auto5EB3A99F_u);
        if ((UnitGetType(lv_u) == lp_item)) {
            return true;
        }
        else {
        }
    }
    return false;
}

void gf_InitHacking () {
    int auto3A25B24E_ae;
    int auto3A25B24E_ai;
    int autoCD4D5B5E_ae;
    int autoCD4D5B5E_ai;
    int auto45C819B4_ae;
    int auto45C819B4_ai;
    int auto64B67521_ae;
    int auto64B67521_ai;
    int auto9D0C21D3_ae;
    int auto9D0C21D3_ai;

    // Variable Declarations
    int lv_i;
    int lv_j;

    // Variable Initialization

    // Implementation
    DialogCreate(965, 965, c_anchorCenter, 0, -50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 965, 965, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/5779ECA1"), "Assets\\Textures\\ui_help_frame_tips_new_terran.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_gridWindow = DialogLastCreated();
    auto3A25B24E_ae = 49;
    auto3A25B24E_ai = 1;
    lv_i = 0;
    for ( ; ( (auto3A25B24E_ai >= 0 && lv_i <= auto3A25B24E_ae) || (auto3A25B24E_ai <= 0 && lv_i >= auto3A25B24E_ae) ) ; lv_i += auto3A25B24E_ai ) {
        autoCD4D5B5E_ae = 49;
        autoCD4D5B5E_ai = 1;
        lv_j = 0;
        for ( ; ( (autoCD4D5B5E_ai >= 0 && lv_j <= autoCD4D5B5E_ae) || (autoCD4D5B5E_ai <= 0 && lv_j >= autoCD4D5B5E_ae) ) ; lv_j += autoCD4D5B5E_ai ) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 20, 20, c_anchorTopLeft, (lv_i * 20), (lv_j * 20), StringExternal("Param/Value/744205CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 20, 20, c_anchorTopLeft, 37 + (lv_i * 18), 37 + (lv_j * 18), StringToText("-"), Color(100,100,100), false, 2.0);
            gv_uIGrid[lv_i][lv_j] = DialogControlLastCreated();
        }
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 15, c_anchorTopLeft, 34, 38, StringExternal("Param/Value/F333D823"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(150*100/255,150*100/255,30*100/255), c_triggerBlendModeAdd);
    gv_uIThread = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 15, c_anchorTopLeft, 34, 38, StringExternal("Param/Value/B00DBEEA"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,66*100/255,100), c_triggerBlendModeAdd);
    gv_uIPointer = DialogControlLastCreated();
    DialogCreate(126, 960, c_anchorCenter, -520, -40, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 85, 940, c_anchorTopLeft, 20, 0, StringExternal("Param/Value/6C04A74C"), "Assets\\Textures\\ui_frame_big_innerline_terran.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_stackWindow = DialogLastCreated();
    gv_stackWindowBackground = DialogControlLastCreated();
    auto45C819B4_ae = 49;
    auto45C819B4_ai = 1;
    lv_i = 0;
    for ( ; ( (auto45C819B4_ai >= 0 && lv_i <= auto45C819B4_ae) || (auto45C819B4_ai <= 0 && lv_i >= auto45C819B4_ae) ) ; lv_i += auto45C819B4_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 20, 20, c_anchorTopLeft, (lv_i * 20), (lv_j * 20), StringExternal("Param/Value/BFF07864"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 20, c_anchorTopLeft, 0, 37 + (lv_i * 18), StringToText("255"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        gv_uIStack[lv_i] = DialogControlLastCreated();
    }
    DialogCreate(350, 560, c_anchorCenter, 650, -235, true);
    gv_outputWindow = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 350, 560, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/2C194E23"), "Assets\\Textures\\ui_frame_big_innerline_terran.dds", c_triggerImageTypeHorizontalBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_outputWindowBackground = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 32, 17, StringExternal("Param/Value/024D899B"), Color(100.00, 100.00, 50.20), false, 2.0);
    gv_outputWindowLabel1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 45, 200, StringExternal("Param/Value/A7E777A0"), Color(100.00, 100.00, 50.20), false, 2.0);
    gv_outputWindowLabel2 = DialogControlLastCreated();
    auto64B67521_ae = 6;
    auto64B67521_ai = 1;
    lv_i = 0;
    for ( ; ( (auto64B67521_ai >= 0 && lv_i <= auto64B67521_ae) || (auto64B67521_ai <= 0 && lv_i >= auto64B67521_ae) ) ; lv_i += auto64B67521_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 20, c_anchorTopLeft, 60, ((lv_i * 20) + 45), StringExternal("Param/Value/582D40D3"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_recentOutputLabel[(6 - lv_i)] = DialogControlLastCreated();
    }
    auto9D0C21D3_ae = 10;
    auto9D0C21D3_ai = 1;
    lv_i = 0;
    for ( ; ( (auto9D0C21D3_ai >= 0 && lv_i <= auto9D0C21D3_ae) || (auto9D0C21D3_ai <= 0 && lv_i >= auto9D0C21D3_ae) ) ; lv_i += auto9D0C21D3_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 20, c_anchorTopLeft, 60, ((lv_i * 20) + 225), StringExternal("Param/Value/B8CEEEB4"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_outputsLabel[lv_i] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 45, 450, StringExternal("Param/Value/569F234A"), Color(100.00, 100.00, 50.20), false, 2.0);
    gv_outputWindowLabel3 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, 50, c_anchorTopLeft, 45, 480, StringExternal("Param/Value/074BDA1C"), Color(100.00, 100.00, 50.20), false, 2.0);
    gv_outputExtraInfo = DialogControlLastCreated();
}

int gf_getHackLevel (unit lp_u) {
    // Implementation
    if ((lib1_gf_InventoryHasItemOfType(lp_u, null) == true)) {
        return 3;
    }
    else {
        if ((lib1_gf_InventoryHasItemOfType(lp_u, null) == true)) {
            return 2;
        }
        else {
            if ((lib1_gf_InventoryHasItemOfType(lp_u, null) == true)) {
                return 1;
            }
            else {
            }
        }
    }
    return 0;
}

void gf_InitMissileControl () {
    // Variable Declarations
    const int lv_dimension = 75;
    const int lv_buttons = 6;
    const int lv_edgeGap = 50;
    const int lv_buttonGap = 25;

    // Variable Initialization

    // Implementation
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "1Burst", 1);
    }
    PlayerGroupLoopEnd();
    gv_missileBays[0][1] = RegionFromId(21);
    gv_missileBays[1][1] = RegionFromId(22);
    gv_missileBays[2][1] = RegionFromId(23);
    gv_missileBays[3][1] = RegionFromId(24);
    gv_missileBays[4][1] = RegionFromId(25);
    gv_missileBays[5][1] = RegionFromId(26);
    gv_missileBays[0][2] = RegionFromId(27);
    gv_missileBays[1][2] = RegionFromId(32);
    gv_missileBays[2][2] = RegionFromId(28);
    gv_missileBays[3][2] = RegionFromId(29);
    gv_missileBays[4][2] = RegionFromId(30);
    gv_missileBays[5][2] = RegionFromId(31);
    gv_missiles[0].lv_ability = AbilityCommand("LaunchPiranhaLightMissile", 0);
    gv_missiles[0].lv_picture = "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel2.dds";
    gv_missiles[0].lv_itemType = "PiranhaLightMissileItem";
    gv_missiles[0].lv_missileType = "PiranhaLightMissile";
    gv_missiles[0].lv_name = StringExternal("Param/Value/D659B8CE");
    gv_missiles[0].lv_hull_Damage = 100.0;
    gv_missiles[1].lv_ability = AbilityCommand("LaunchScorpionLightMissile", 0);
    gv_missiles[1].lv_picture = "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level3.dds";
    gv_missiles[1].lv_itemType = "ScorpionLightMissileItem";
    gv_missiles[1].lv_missileType = "ScorpionLightMissile";
    gv_missiles[1].lv_name = StringExternal("Param/Value/0B324251");
    gv_missiles[1].lv_hull_Damage = 50.0;
    gv_missiles[2].lv_ability = AbilityCommand("LaunchWaspLightMissile", 0);
    gv_missiles[2].lv_picture = "Assets\\Textures\\btn-upgrade-zerg-airattacks-level2.dds";
    gv_missiles[2].lv_itemType = "WaspLightMissileItem";
    gv_missiles[2].lv_missileType = "WaspLightMissile";
    gv_missiles[2].lv_name = StringExternal("Param/Value/598E801C");
    gv_missiles[2].lv_hull_Damage = 100.0;
    gv_missiles[2].lv_shield_Damage = 200.0;
    gv_missiles[2].lv_duration = 3.0;
    gv_missiles[3].lv_ability = AbilityCommand("LaunchPredatorHeavyMissile", 0);
    gv_missiles[3].lv_picture = "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds";
    gv_missiles[3].lv_itemType = "PredatorHeavyMissileItem";
    gv_missiles[3].lv_missileType = "PredatorHeavyMissile";
    gv_missiles[3].lv_name = StringExternal("Param/Value/429D5D66");
    gv_missiles[3].lv_hull_Damage = 300.0;
    gv_missiles[3].lv_shield_Damage = 200.0;
    gv_missiles[3].lv_duration = 10.0;
    gv_missiles[4].lv_ability = AbilityCommand("LaunchSabretoothHeavyMissile", 0);
    gv_missiles[4].lv_picture = "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel2.dds";
    gv_missiles[4].lv_itemType = "SabretoothHeavyMissileItem";
    gv_missiles[4].lv_missileType = "SabretoothHeavyMissile";
    gv_missiles[4].lv_name = StringExternal("Param/Value/4AB6293E");
    gv_missiles[4].lv_hull_Damage = 100.0;
    gv_missiles[4].lv_shield_Damage = 400.0;
    gv_missiles[4].lv_duration = 8.0;
    gv_missiles[4].lv_speed = 20.0;
    gv_missiles[5].lv_ability = AbilityCommand("LaunchHellfireHeavyMissile", 0);
    gv_missiles[5].lv_picture = "Assets\\Textures\\btn-lostviking_sidemissiles.dds";
    gv_missiles[5].lv_itemType = "HellfireHeavyMissileItem";
    gv_missiles[5].lv_missileType = "HellfireHeavyMissile";
    gv_missiles[5].lv_name = StringExternal("Param/Value/E89FD748");
    gv_missiles[5].lv_hull_Damage = 250.0;
    gv_missiles[5].lv_fire_chance = 0.85;
    gv_missiles[5].lv_debris_chance = 0.0;
    gv_missiles[5].lv_duration = 7.5;
    gv_missiles[5].lv_speed = 20.0;
    gv_missiles[6].lv_ability = AbilityCommand("LaunchMerculiteHeavyMissile", 0);
    gv_missiles[6].lv_picture = "Assets\\Textures\\btn-research-terran-ultracapacitors.dds";
    gv_missiles[6].lv_itemType = "MerculiteHeavyMissileItem";
    gv_missiles[6].lv_missileType = "MerculiteHeavyMissile";
    gv_missiles[6].lv_name = StringExternal("Param/Value/E5898EAE");
    gv_missiles[6].lv_hull_Damage = 650.0;
    gv_missiles[6].lv_duration = 10.0;
    gv_missiles[7].lv_ability = AbilityCommand("Laser", 0);
    gv_missiles[7].lv_missileType = "SingleBurst";
    gv_missiles[7].lv_name = StringExternal("Param/Value/E0D4ACF1");
    gv_missiles[7].lv_hull_Damage = 12.0;
    gv_missiles[8].lv_ability = AbilityCommand("Laser", 0);
    gv_missiles[8].lv_missileType = "PlasmaCannon";
    gv_missiles[8].lv_name = StringExternal("Param/Value/0E88EA0E");
    gv_missiles[8].lv_hull_Damage = 10.0;
    gv_missiles[9].lv_missileType = "EMP";
    gv_missiles[9].lv_name = StringExternal("Param/Value/E1C6DD7D");
    gv_missiles[9].lv_hull_Damage = 0.0;
    gv_missiles[10].lv_missileType = "PhotonBarrage";
    gv_missiles[10].lv_name = StringExternal("Param/Value/B0BD289F");
    gv_missiles[10].lv_hull_Damage = 10.0;
    gv_missiles[11].lv_missileType = "QuantumBombardment";
    gv_missiles[11].lv_name = StringExternal("Param/Value/B27F0B9F");
    gv_missiles[11].lv_hull_Damage = 100.0;
    gv_missiles[12].lv_missileType = "OpposerProximityMine";
    gv_missiles[12].lv_name = StringExternal("Param/Value/B1A6ED6B");
    gv_missiles[12].lv_hull_Damage = 150.0;
    gv_missiles[13].lv_missileType = "ATALaserBattery2";
    gv_missiles[13].lv_name = StringExternal("Param/Value/C5E3948B");
    gv_missiles[13].lv_hull_Damage = 70.0;
    gv_missiles[14].lv_missileType = "Yamato";
    gv_missiles[14].lv_name = StringExternal("Param/Value/A71CD562");
    gv_missiles[14].lv_shield_Damage = 1000.0;
    gv_missiles[14].lv_hull_Damage = 800.0;
    gv_missiles[15].lv_missileType = "EMPMine2";
    gv_missiles[15].lv_name = StringExternal("Param/Value/E4158208");
    gv_missiles[15].lv_hull_Damage = 100.0;
    gv_missiles[16].lv_missileType = "ShapeApple";
    gv_missiles[16].lv_name = StringExternal("Param/Value/990B5F38");
    gv_missiles[16].lv_hull_Damage = 0.0;
    gv_missiles[17].lv_missileType = "CounterMissile";
    gv_missiles[17].lv_name = StringExternal("Param/Value/596F184D");
    gv_missiles[17].lv_hull_Damage = 0.0;
    gv_missiles[18].lv_missileType = "NanoHullSpray";
    gv_missiles[18].lv_name = StringExternal("Param/Value/E15BAD21");
    gv_missiles[18].lv_hull_Damage = 0.0;
    gv_missiles[19].lv_missileType = "ShieldRecharger";
    gv_missiles[19].lv_name = StringExternal("Param/Value/07D678FA");
    gv_missiles[19].lv_hull_Damage = 0.0;
    gv_missiles[20].lv_missileType = "KineticWeapon";
    gv_missiles[20].lv_name = StringExternal("Param/Value/3E42B3CF");
    gv_missiles[20].lv_hull_Damage = 20.0;
    gv_missiles[20].lv_shield_Damage = 8.0;
    gv_missiles[20].lv_fire_chance = 0.0;
    gv_missiles[21].lv_missileType = "PowerTransfer";
    gv_missiles[21].lv_name = StringExternal("Param/Value/82E4D555");
    gv_missiles[21].lv_hull_Damage = 0.0;
    gv_missiles[22].lv_missileType = "AutomatonProjectile";
    gv_missiles[22].lv_name = StringExternal("Param/Value/52529E07");
    gv_missiles[22].lv_hull_Damage = 15.0;
    gv_missiles[23].lv_missileType = "TripleBurst";
    gv_missiles[23].lv_name = StringExternal("Param/Value/423A46C3");
    gv_missiles[23].lv_hull_Damage = 12.0;
    gv_missiles[24].lv_missileType = "PentaBurst";
    gv_missiles[24].lv_name = StringExternal("Param/Value/60F57A76");
    gv_missiles[24].lv_hull_Damage = 12.0;
    DialogCreate(((lv_edgeGap * 2) + ((lv_dimension * lv_buttons) + ((lv_buttons - 1) * lv_buttonGap))), 155, c_anchorBottomRight, 0, 350, true);
    gv_launchMissileDialog = DialogLastCreated();
    IntLoopBegin(0, (lv_buttons - 1));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_dimension, lv_dimension, c_anchorTopLeft, (lv_edgeGap + ((IntLoopCurrent() * lv_buttonGap) + (IntLoopCurrent() * lv_dimension))), 40, StringExternal("Param/Value/7808B3D9"), StringExternal("Param/Value/C703F023"), "");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/200E5A69") + IntToText((IntLoopCurrent() + 1)) + StringExternal("Param/Value/17E611E2")), PlayerGroupAll());
        DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
        gv_launchMissileButton[IntLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_dimension - 5), (lv_dimension - 5), c_anchorTopLeft, ((lv_edgeGap + 3) + ((IntLoopCurrent() * lv_dimension) + (IntLoopCurrent() * lv_buttonGap))), 42, StringExternal("Param/Value/2DD2066B"), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_launchMissileImage[IntLoopCurrent()] = DialogControlLastCreated();
    }
    IntLoopEnd();
}

bool gf_bayIsLoaded (int lp_bay, int lp_team) {
    // Implementation
    return (gv_launchMissileUnit[lp_bay][lp_team] != null);
}

bool gf_isAnyBayLoaded (int lp_team) {
    int auto375DC508_ae;
    int auto375DC508_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto375DC508_ae = 5;
    auto375DC508_ai = 1;
    lv_i = 0;
    for ( ; ( (auto375DC508_ai >= 0 && lv_i <= auto375DC508_ae) || (auto375DC508_ai <= 0 && lv_i >= auto375DC508_ae) ) ; lv_i += auto375DC508_ai ) {
        if ((gf_bayIsLoaded(lv_i, lp_team) == true)) {
            return true;
        }
        else {
        }
    }
    return false;
}

void gf_LoadMissile (int lp_slot, int lp_team, unit lp_missileitem) {
    // Variable Declarations
    int lv_type;
    region lv_region;

    // Variable Initialization

    // Implementation
    lv_type = gf_GetMissileidItem(UnitGetType(lp_missileitem));
    lv_region = gv_missileBays[lp_slot][lp_team];
    if ((gv_launchMissileUnit[lp_slot][lp_team] == null)) {
        libNtve_gf_ReplaceUnit(lp_missileitem, gv_missiles[lv_type].lv_missileType, 1);
        UnitSetPosition(libNtve_gf_LastReplacedUnit(), PointWithOffsetPolar(RegionGetCenter(lv_region), 6.8, 90.0), false);
        libNtve_gf_SendActorMessageToUnit(libNtve_gf_LastReplacedUnit(), "SetScale 10.000000");
        UnitSetHeight(libNtve_gf_LastReplacedUnit(), 4.25, 0.0);
        UnitSetFacing(libNtve_gf_LastReplacedUnit(), 90.0, 0.0);
        UnitBehaviorRemove(libNtve_gf_LastReplacedUnit(), "ScorpionLightMissileSplit", 1);
        gv_launchMissileUnit[lp_slot][lp_team] = gv_missiles[lv_type].lv_missileType;
        libNtve_gf_SetDialogItemImage(gv_launchMissileImage[lp_slot], gv_missiles[lv_type].lv_picture, GameAttributePlayersForTeam(lp_team));
        DialogControlSetEnabled(gv_launchMissileButton[lp_slot], GameAttributePlayersForTeam(lp_team), true);
        libNtve_gf_SetDialogItemTooltip(gv_launchMissileButton[lp_slot], (StringExternal("Param/Value/70F76E17") + gv_missiles[lv_type].lv_name), GameAttributePlayersForTeam(lp_team));
        gv_loadedMissiles[lp_team] += 1;
        libNtve_gf_AttachActorToUnit(lp_missileitem, "SoundLoadmissile", "Ref_Origin");
    }
    else {
    }
}

void gf_PreloadMissile (int lp_slot, int lp_team, unit lp_missileitem) {
    // Variable Declarations
    int lv_type;
    region lv_region;

    // Variable Initialization

    // Implementation
    if ((gv_disableweapons == false)) {
        lv_type = gf_GetMissileidItem(UnitGetType(lp_missileitem));
        lv_region = gv_missileBays[lp_slot][lp_team];
        if ((gv_preloading[lp_slot][lp_team] == false)) {
            gv_preloading[lp_slot][lp_team] = true;
            if ((lp_slot >= 3)) {
                UnitSetPosition(lp_missileitem, PointWithOffsetPolar(RegionGetCenter(lv_region), 4.4, 168.0), false);
            }
            else {
                UnitSetPosition(lp_missileitem, PointWithOffsetPolar(RegionGetCenter(lv_region), 4.4, 12.0), false);
            }
            UnitSetHeight(lp_missileitem, 0.5, 0.0);
            UnitSetFacing(lp_missileitem, 90.0, 0.0);
            libNtve_gf_AttachActorToUnit(lp_missileitem, "SoundLoadmissile", "Ref_Origin");
            UnitGroupAdd(gv_preloadingmissiles, lp_missileitem);
            UnitSetCustomValue(lp_missileitem, 36, lp_slot);
            UnitSetCustomValue(lp_missileitem, 37, lp_team);
        }
        else {
        }
    }
    else {
    }
}

void gf_MoveMissiles (unit lp_u) {
    // Variable Declarations
    int lv_slot;
    int lv_team;

    // Variable Initialization

    // Implementation
    if ((UnitGetType(lp_u) != "PathingBlocker1x1")) {
        if ((gf_GetMissileidItem(UnitGetType(lp_u)) != -1)) {
            lv_slot = FixedToInt(UnitGetCustomValue(lp_u, 36));
            lv_team = FixedToInt(UnitGetCustomValue(lp_u, 37));
            if ((UnitGetHeight(lp_u) < 2.0)) {
                UnitSetPosition(lp_u, Point((PointGetX(UnitGetPosition(lp_u)) + 0.0), (PointGetY(UnitGetPosition(lp_u)) + 0.05)), true);
                UnitSetHeight(lp_u, (UnitGetHeight(lp_u) + 0.02), 0.0);
            }
            else {
                gv_preloading[lv_slot][lv_team] = false;
                gf_LoadMissile(lv_slot, lv_team, lp_u);
            }
        }
        else {
            if (((UnitGetType(lp_u) == "HullFire") || (UnitGetType(lp_u) == "ScrapHuge"))) {
            }
            else {
                UnitSetPosition(lp_u, UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_u))), false);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitGroupClosestToPoint(UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_u)))), c_messageAreaSubtitle, StringExternal("Param/Value/0343AFAF"));
            }
        }
    }
    else {
    }
}

void gf_Firemissile (int lp_p, int lp_bay) {
    unitgroup autoC588B6A5_g;
    int autoC588B6A5_u;

    // Variable Declarations
    unit lv_bc;
    unit lv_u;
    unit lv_missile;
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_bc = gv_battlecruisers[gf_GetPlayerTeam(lp_p)];
    lv_i = lp_bay;
    if ((gv_launchMissileUnit[lv_i][gf_GetPlayerTeam(lp_p)] != "") && (gv_launchMissileUnit[lv_i][gf_GetPlayerTeam(lp_p)] != null)) {
        UnitCreate(1, gv_launchMissileUnit[lv_i][gf_GetPlayerTeam(lp_p)], c_unitCreateIgnorePlacement, gf_GetPlayerTeamAI(lp_p), UnitGetPosition(lv_bc), UnitGetFacing(lv_bc));
        lv_missile = UnitLastCreated();
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(gf_GetPlayerTeamAI(lp_p)));
        UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
        if ((lv_missile != null)) {
            gf_RegisterPhysics(lv_missile);
            gf_PhysicsApplyForcePolar(lv_missile, gv_missiles[gf_GetMissileidMissile(UnitGetType(lv_missile))].lv_speed, UnitGetFacing(lv_bc));
            gf_PhysicsApplyForceCartesian(lv_missile, UnitGetCustomValue(lv_bc, 1), UnitGetCustomValue(lv_bc, 2));
            gf_TimedLife(lv_missile, gv_missiles[gf_GetMissileidMissile(UnitGetType(lv_missile))].lv_duration);
            if (((UnitGetType(lv_missile) == "PiranhaLightMissile") || (UnitGetType(lv_missile) == "ScorpionLightMissile") || (UnitGetType(lv_missile) == "WaspLightMissile"))) {
                libNtve_gf_AttachActorToUnit(lv_bc, "SoundMissileSmall", "Ref_Origin");
            }
            else {
                libNtve_gf_AttachActorToUnit(lv_bc, "SoundMissileBig", "Ref_Origin");
            }
            if ((gv_infmis == false)) {
                gv_loadedMissiles[gf_GetPlayerTeam(lp_p)] -= 1;
                gv_launchMissileUnit[lv_i][gf_GetPlayerTeam(lp_p)] = null;
                libNtve_gf_SetDialogItemImage(gv_launchMissileImage[lv_i], "Assets\\Textures\\btn-command-cancel.dds", GameAttributePlayersForTeam(gf_GetPlayerTeam(lp_p)));
                DialogControlSetEnabled(gv_launchMissileButton[lv_i], GameAttributePlayersForTeam(gf_GetPlayerTeam(lp_p)), false);
                libNtve_gf_SetDialogItemTooltip(gv_launchMissileButton[lv_i], (StringExternal("Param/Value/1CFFEFFA") + IntToText((lv_i + 1)) + StringExternal("Param/Value/B86AA99B")), GameAttributePlayersForTeam(gf_GetPlayerTeam(lp_p)));
                autoC588B6A5_g = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(RegionGetCenter(gv_missileBays[lv_i][gf_GetPlayerTeam(lp_p)]), 2.0, 90.0), 6.8), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMassive), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoC588B6A5_u = 1;
                for ( ; autoC588B6A5_u <= UnitGroupCount(autoC588B6A5_g, c_unitCountAll) ; autoC588B6A5_u += BoolToInt(lv_u == UnitGroupUnit(autoC588B6A5_g, autoC588B6A5_u)) ) {
                    lv_u = UnitGroupUnit(autoC588B6A5_g, autoC588B6A5_u);
                    UnitRemove(lv_u);
                }
            }
            else {
            }
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/9ADA601C"), true);
        }
    }
    else {
    }
}

int gf_GetMissileidMissile (string lp_type) {
    int autoEB06FC8F_ae;
    int autoEB06FC8F_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    autoEB06FC8F_ae = gv_missileAmount;
    autoEB06FC8F_ai = 1;
    lv_a = 0;
    for ( ; ( (autoEB06FC8F_ai >= 0 && lv_a <= autoEB06FC8F_ae) || (autoEB06FC8F_ai <= 0 && lv_a >= autoEB06FC8F_ae) ) ; lv_a += autoEB06FC8F_ai ) {
        if ((gv_missiles[lv_a].lv_missileType == lp_type)) {
            return lv_a;
        }
        else {
        }
    }
    return -1;
}

int gf_GetMissileidItem (string lp_type) {
    int auto3375828B_ae;
    int auto3375828B_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto3375828B_ae = gv_missileAmount;
    auto3375828B_ai = 1;
    lv_a = 0;
    for ( ; ( (auto3375828B_ai >= 0 && lv_a <= auto3375828B_ae) || (auto3375828B_ai <= 0 && lv_a >= auto3375828B_ae) ) ; lv_a += auto3375828B_ai ) {
        if ((gv_missiles[lv_a].lv_itemType == lp_type)) {
            return lv_a;
        }
        else {
        }
    }
    return -1;
}

bool gf_UnitTypeIsMissile (string lp_type) {
    int auto34742546_ae;
    int auto34742546_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto34742546_ae = gv_missileAmount;
    auto34742546_ai = 1;
    lv_a = 0;
    for ( ; ( (auto34742546_ai >= 0 && lv_a <= auto34742546_ae) || (auto34742546_ai <= 0 && lv_a >= auto34742546_ae) ) ; lv_a += auto34742546_ai ) {
        if ((gv_missiles[lv_a].lv_itemType == lp_type)) {
            return true;
        }
        else {
        }
    }
    return false;
}

trigger auto_gf_C4countdown_Trigger = null;
unit auto_gf_C4countdown_lp_u;

void gf_C4countdown (unit lp_u) {
    auto_gf_C4countdown_lp_u = lp_u;

    if (auto_gf_C4countdown_Trigger == null) {
        auto_gf_C4countdown_Trigger = TriggerCreate("auto_gf_C4countdown_TriggerFunc");
    }

    TriggerExecute(auto_gf_C4countdown_Trigger, false, false);
}

bool auto_gf_C4countdown_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_C4countdown_lp_u;

    int auto290F585D_ae;
    int auto290F585D_ai;
    playergroup auto196BF5A0_g;
    int auto196BF5A0_p;

    // Variable Declarations
    int lv_texttag;
    int lv_a;
    int lv_enemyteam;
    int lv_p;

    // Variable Initialization
    lv_texttag = c_textTagNone;

    // Implementation
    if ((libNtve_gf_UnitInRegion(lp_u, gv_battlecruiserArea[1]) == true)) {
        lv_enemyteam = 1;
    }
    else {
        if ((libNtve_gf_UnitInRegion(lp_u, gv_battlecruiserArea[2]) == true)) {
            lv_enemyteam = 2;
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/0E098293"), true);
            return true;
        }
    }
    TextTagCreate(StringExternal("Param/Value/893C2574"), 35, UnitGetPosition(lp_u), 1.0, true, false, PlayerGroupAll());
    lv_texttag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    auto290F585D_ae = 1;
    auto290F585D_ai = -1;
    lv_a = 30;
    for ( ; ( (auto290F585D_ai >= 0 && lv_a <= auto290F585D_ae) || (auto290F585D_ai <= 0 && lv_a >= auto290F585D_ae) ) ; lv_a += auto290F585D_ai ) {
        if ((UnitIsAlive(lp_u) == true)) {
            TextTagSetText(lv_texttag, IntToText(lv_a));
            Wait(1.0, c_timeGame);
        }
        else {
            break;
        }
    }
    if ((lv_a <= 1)) {
        UnitSetPropertyFixed(gv_battlecruisers[lv_enemyteam], c_unitPropLife, (UnitGetPropertyFixed(gv_battlecruisers[lv_enemyteam], c_unitPropLife, c_unitPropCurrent) - 1000.0));
        auto196BF5A0_g = gv_players_inside[lv_enemyteam]; 
        auto196BF5A0_p = 1;
        for ( ; auto196BF5A0_p <= PlayerGroupCount(auto196BF5A0_g) ; auto196BF5A0_p += BoolToInt(lv_p == PlayerGroupPlayer(auto196BF5A0_g, auto196BF5A0_p)) ) {
            lv_p = PlayerGroupPlayer(auto196BF5A0_g, auto196BF5A0_p);
            CameraShake(lv_p, "Medium", "Shake", 0.0, 0.3, 1.0);
        }
    }
    else {
    }
    TextTagDestroy(lv_texttag);
    return true;
}

void gf_CloseNavigation (int lp_player) {
    // Variable Declarations
    int lv_index;
    unit lv_closestU;
    unit lv_closestConsole;
    unit lv_u;
    int lv_id;

    // Variable Initialization

    // Implementation
    lv_index = gf_PlayerToIndex(lp_player, false);
    lv_id = gf_shipToDroneIndex(gv_nav_ships[lv_index], gf_GetPlayerTeam(lp_player));
    lv_u = gf_shipToAvatar(gv_nav_ships[lv_index], gf_GetPlayerTeam(lp_player));
    if ((lp_player != gf_GetPlayerTeamAI(lp_player))) {
        TextTagAttachToUnit(gv_pilottexttags[lp_player], gv_pilots[lp_player], 1.0);
    }
    else {
        TextTagAttachToUnit(gv_aItexttags[gf_GetPlayerTeam(lp_player)][lv_id], lv_u, 1.0);
    }
    if ((UnitGetType(gv_nav_ships[lv_index]) == "Battlecruiser")) {
        gf_LeaveConsole(lp_player, gv_pilots[lp_player]);
    }
    else {
        DialogSetVisible(gv_hangarDialog, PlayerGroupSingle(lp_player), false);
        UnitSetOwner(gv_nav_navigators[lv_index], 15, false);
        while ((UnitGetOwner(gv_nav_navigators[lv_index]) == 15)) {
            Wait(1.0, c_timeGame);
        }
        UnitSetOwner(gv_pilots[lp_player], lp_player, false);
        UnitSelect(gv_pilots[lp_player], lp_player, true);
    }
}

void gf_CloseNavigationIndex (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_index;
    unit lv_closestU;
    unit lv_closestConsole;
    unit lv_u;
    int lv_id;

    // Variable Initialization

    // Implementation
    lv_index = lp_index;
    lv_id = gf_shipToDroneIndex(gv_nav_ships[lv_index], gf_GetPlayerTeam(lp_player));
    lv_u = gf_shipToAvatar(gv_nav_ships[lv_index], gf_GetPlayerTeam(lp_player));
    gv_drones[gf_GetPlayerTeam(lp_player)][lv_id].lv_ship = null;
    if ((lp_player != gf_GetPlayerTeamAI(lp_player))) {
        TextTagAttachToUnit(gv_pilottexttags[lp_player], gv_pilots[lp_player], 1.0);
    }
    else {
        TextTagAttachToUnit(gv_aItexttags[gf_GetPlayerTeam(lp_player)][lv_id], lv_u, 1.0);
    }
    if ((UnitGetType(gv_nav_ships[lv_index]) == "Battlecruiser")) {
        gf_LeaveConsole(lp_player, gv_pilots[lp_player]);
    }
    else {
        DialogSetVisible(gv_hangarDialog, PlayerGroupSingle(lp_player), false);
        UnitSetOwner(gv_nav_navigators[lv_index], 15, false);
        while ((UnitGetOwner(gv_nav_navigators[lv_index]) == 15)) {
            Wait(1.0, c_timeGame);
        }
        UnitSetOwner(gv_pilots[lp_player], lp_player, false);
        UnitSelect(gv_pilots[lp_player], lp_player, true);
    }
}

trigger auto_gf_EnterNavigation_Trigger = null;
int auto_gf_EnterNavigation_lp_player;
unit auto_gf_EnterNavigation_lp_ship;

void gf_EnterNavigation (int lp_player, unit lp_ship) {
    auto_gf_EnterNavigation_lp_player = lp_player;
    auto_gf_EnterNavigation_lp_ship = lp_ship;

    if (auto_gf_EnterNavigation_Trigger == null) {
        auto_gf_EnterNavigation_Trigger = TriggerCreate("auto_gf_EnterNavigation_TriggerFunc");
    }

    TriggerExecute(auto_gf_EnterNavigation_Trigger, false, false);
}

bool auto_gf_EnterNavigation_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_EnterNavigation_lp_player;
    unit lp_ship = auto_gf_EnterNavigation_lp_ship;

    // Variable Declarations
    unit lv_navigator;
    int lv_index;
    int lv_size;
    unit lv_avatar;
    int lv_id;

    // Variable Initialization

    // Implementation
    lv_index = gf_shipToIndex(lp_ship);
    lv_navigator = gv_nav_navigators[lv_index];
    UnitSetOwner(lv_navigator, lp_player, true);
    gf_SpaceView(lp_player, lp_ship);
    lv_avatar = gf_shipToAvatar(lp_ship, gf_GetPlayerTeam(lp_player));
    lv_id = gf_shipToDroneIndex(lp_ship, gf_GetPlayerTeam(lp_player));
    if ((lp_player != gf_GetPlayerTeamAI(lp_player))) {
        TextTagAttachToUnit(gv_pilottexttags[lp_player], lp_ship, 1.0);
    }
    else {
        TextTagAttachToUnit(gv_aItexttags[gf_GetPlayerTeam(lp_player)][lv_id], lp_ship, 1.0);
    }
    DialogSetVisible(gv_navigationUI[lp_player], PlayerGroupSingle(lp_player), true);
    DialogSetPositionRelativeToUnit(gv_navigationUI[lp_player], lp_ship, "Ref_Origin", FixedToInt((-150.0 * UnitGetPropertyFixed(lp_ship, c_unitPropRadius, c_unitPropCurrent))), -65);
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, (StringExternal("Param/Value/B382518A") + UnitTypeGetName(UnitGetType(lp_ship))));
    CameraLockInput(lp_player, true);
    while (((UnitGetOwner(lv_navigator) == lp_player) || (UnitGetOwner(lv_navigator) == gf_GetPlayerTeamAI(lp_player)))) {
        if ((lp_player != gf_GetPlayerTeamAI(lp_player))) {
            if ((UnitGroupSelected(lp_player) != libNtve_gf_ConvertUnitToUnitGroup(lv_navigator))) {
                UnitClearSelection(lp_player);
                UnitSelect(lv_navigator, lp_player, true);
            }
            else {
            }
            //Update navigator
            UnitSetPropertyFixed(lv_navigator, c_unitPropEnergyMax, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropEnergyMax, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropEnergy, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropEnergy, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropLifeMax, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropLifeMax, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropLife, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropLife, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropShieldsMax, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropShieldsMax, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropShields, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropShields, c_unitPropCurrent));
            //Draw UI
            if (gv_nav_speed[lv_index] == 0.0) {
              DialogControlSetVisible(gv_navigationUISetBar[lp_player], PlayerGroupSingle(lp_player), false);
            }else {
              DialogControlSetVisible(gv_navigationUISetBar[lp_player], PlayerGroupSingle(lp_player), true);
              lv_size = FixedToInt(100.0 * gv_nav_speed[lv_index]);
              DialogControlSetSize(gv_navigationUISetBar[lp_player], PlayerGroupSingle(lp_player), 4, lv_size);    
              DialogControlSetPosition(gv_navigationUISetBar[lp_player], PlayerGroupSingle(lp_player), c_anchorTopLeft, 30, 110 - lv_size);
            }
            if (UnitBehaviorCount(lp_ship, gf_getSpeedBuff(lp_ship)) == 0 && UnitBehaviorCount(lp_ship, "EngineBoost") == 0 && UnitBehaviorCount(lp_ship, "TurboJump") == 0) {
              DialogControlSetVisible(gv_navigationUIRealBar[lp_player], PlayerGroupSingle(lp_player), false);
            }else {
              DialogControlSetVisible(gv_navigationUIRealBar[lp_player], PlayerGroupSingle(lp_player), true);
              if(UnitBehaviorCount(lp_ship, "EngineBoost") > 0 || UnitBehaviorCount(lp_ship, "TurboJump") > 0){
                libNtve_gf_SetDialogItemColor(gv_navigationUIRealBar[lp_player], Color(254*100/255,138*100/255,14*100/255), PlayerGroupSingle(lp_player));
                lv_size = 100;
              }else{
                libNtve_gf_SetDialogItemColor(gv_navigationUIRealBar[lp_player], Color(0,66*100/255,100), PlayerGroupSingle(lp_player));
                if(gv_energy_engine[lv_index] == 0){
                  lv_size = MinI(100, 100 * UnitBehaviorCount(lp_ship, gf_getSpeedBuff(lp_ship)));
                }else{
                  lv_size = FixedToInt(100.0 * (IntToFixed(UnitBehaviorCount(lp_ship, gf_getSpeedBuff(lp_ship))) / IntToFixed(gv_energy_engine[lv_index] / gf_getSpeedCost(lp_ship))));
                }
              }
              DialogControlSetSize(gv_navigationUIRealBar[lp_player], PlayerGroupSingle(lp_player), 20, lv_size);
              DialogControlSetPosition(gv_navigationUIRealBar[lp_player], PlayerGroupSingle(lp_player), c_anchorTopLeft, 22, 110 - lv_size);
            }
            libNtve_gf_SetDialogItemText(gv_navigationUIText[lp_player], FixedToText(10.0 * gf_PhysicsGetSpeed(lp_ship), 0), PlayerGroupSingle(lp_player));
        }
        else {
            //Update navigator
            UnitSetPropertyFixed(lv_navigator, c_unitPropEnergyMax, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropEnergyMax, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropEnergy, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropEnergy, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropLifeMax, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropLifeMax, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropLife, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropLife, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropShieldsMax, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropShieldsMax, c_unitPropCurrent));
            UnitSetPropertyFixed(lv_navigator, c_unitPropShields, UnitGetPropertyFixed(gv_nav_ships[lv_index], c_unitPropShields, c_unitPropCurrent));
        }
        Wait(0.5, c_timeGame);
    }
    CameraLockInput(lp_player, false);
    UnitClearSelection(lp_player);
    DialogSetVisible(gv_navigationUI[lp_player], PlayerGroupSingle(lp_player), false);
    UnitSetOwner(lv_navigator, 0, true);
    if ((gv_gameover == false)) {
        if ((gv_blockNavigationZoom[lp_player] == true)) {
            if ((lp_player == gf_GetPlayerTeamAI(lp_player))) {
            }
            else {
            }
            gv_blockNavigationZoom[lp_player] = false;
            Wait((gv_respawntime - 2.0), c_timeGame);
            PlayerGroupAdd(gv_players_inside[gf_GetPlayerTeam(lp_player)], lp_player);
            DialogControlSetVisible(gv_switchViewButton, PlayerGroupSingle(lp_player), true);
            DialogSetVisible(gv_openDirectionsdialog, PlayerGroupSingle(lp_player), true);
            UIClearMessages(PlayerGroupSingle(lp_player), c_messageAreaDirective);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/1B71049D"), Color(0.00, 100.00, 0.00)));
            if ((gf_shipToIndex(lp_ship) != -1)) {
                CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), false, false);
            }
            else {
            }
            CameraPan(lp_player, UnitGetPosition(gv_nav_camera_offset[(gf_GetPlayerTeam(lp_player) - 1)]), 2.0, -1, 10, false);
            Wait(2.0, c_timeGame);
            UIClearMessages(PlayerGroupSingle(lp_player), c_messageAreaDirective);
            gv_playerRespawning[lp_player] = false;
            if ((lp_player != gf_GetPlayerTeamAI(lp_player))) {
                libNtve_gf_ShowHideUnit(gv_pilots[lp_player], true);
                UnitBehaviorRemove(gv_pilots[lp_player], "DisableAttack", 1);
            }
            else {
                libNtve_gf_ShowHideUnit(lv_avatar, true);
                UnitBehaviorRemove(lv_avatar, "DisableAttack", 1);
                gv_drones[gf_GetPlayerTeam(lp_player)][lv_id].lv_status = -1;
            }
            gf_ShipView(lp_player, gv_battlecruisers[gf_GetPlayerTeam(lp_player)]);
        }
        else {
            if ((gv_board[lp_player] == true)) {
                gv_board[lp_player] = false;
                gf_UnregisterPhysics(null);
                UnitBehaviorAdd(lp_ship, "Boardspeed", lp_ship, 1);
                UnitBehaviorAdd(lp_ship, "Boardignorecollision", lp_ship, 1);
                CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]), false, false);
                CameraPan(lp_player, UnitGetPosition(gv_battlecruisers[(3 - gf_GetPlayerTeam(lp_player))]), 0.8, -1, 10, false);
                Wait(0.8, c_timeGame);
                gf_ShipView(lp_player, gv_battlecruisers[(3 - gf_GetPlayerTeam(lp_player))]);
            }
            else {
                gf_ShipView(lp_player, lp_ship);
            }
        }
    }
    else {
    }
    Wait(1.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, StringExternal("Param/Value/7248E0A6"));
    return true;
}

void gf_InitNavigationControl () {
    int autoB1FBDB67_ae;
    int autoB1FBDB67_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    DialogCreate(400, 150, c_anchorTopLeft, 0, 50, true);
    gv_navigationDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 20, c_anchorTopLeft, 40, 40, StringExternal("Param/Value/21CC9CB0"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_navigationRow1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 20, c_anchorTopLeft, 40, 60, StringExternal("Param/Value/6B410D3C"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_navigationRow2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 20, c_anchorTopLeft, 40, 80, StringExternal("Param/Value/7769E66B"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_navigationRow3 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 20, c_anchorTopLeft, 40, 100, StringExternal("Param/Value/ECE51BB5"), ColorWithAlpha(0,0,0,0), false, 1.0);
    gv_navigationRow4 = DialogControlLastCreated();
    autoB1FBDB67_ae = 14;
    autoB1FBDB67_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB1FBDB67_ai >= 0 && lv_i <= autoB1FBDB67_ae) || (autoB1FBDB67_ai <= 0 && lv_i >= autoB1FBDB67_ae) ) ; lv_i += autoB1FBDB67_ai ) {
        DialogCreate(100, 140, c_anchorCenter, 0, 0, true);
        gv_navigationUI[lv_i] = DialogLastCreated();
        DialogSetTransparency(DialogLastCreated(), 50.0);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 100, c_anchorTopLeft, 22, 10, StringExternal("Param/Value/22C9DE46"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,66*100/255,100), c_triggerBlendModeNormal);
        gv_navigationUIRealBar[lv_i] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 4, 100, c_anchorTopLeft, 30, 10, StringExternal("Param/Value/3C270068"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,66*100/255,100), c_triggerBlendModeLighten);
        gv_navigationUISetBar[lv_i] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 5, c_anchorTopLeft, 17, 0, StringExternal("Param/Value/450A96B3"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(28*100/255,167*100/255,234*100/255), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 5, c_anchorTopLeft, 17, 115, StringExternal("Param/Value/8F34AB2A"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(28*100/255,167*100/255,234*100/255), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorTopLeft, -50, 120, StringExternal("Param/Value/D731A515"), Color(28*100/255,167*100/255,234*100/255), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModRightSize16", PlayerGroupAll());
        gv_navigationUIText[lv_i] = DialogControlLastCreated();
    }
}

void gf_InitConstruction () {
    int auto3EA27FC6_ae;
    int auto3EA27FC6_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    gv_items[1].lv_image = "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel2.dds";
    gv_items[1].lv_name = "Piranha Light Missile";
    gv_items[1].lv_type = "PiranhaLightMissileItem";
    gv_items[2].lv_image = "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level3.dds";
    gv_items[2].lv_name = "Scorpion Light Missile";
    gv_items[2].lv_type = "ScorpionLightMissileItem";
    gv_items[3].lv_image = "Assets\\Textures\\btn-upgrade-zerg-airattacks-level2.dds";
    gv_items[3].lv_name = "Wasp Light Missile";
    gv_items[3].lv_type = "WaspLightMissileItem";
    gv_items[4].lv_image = "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds";
    gv_items[4].lv_name = "Predator Heavy Missile";
    gv_items[4].lv_type = "PredatorHeavyMissileItem";
    gv_items[5].lv_image = "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel1.dds";
    gv_items[5].lv_name = "Sabretooth Heavy Missile";
    gv_items[5].lv_type = "SabretoothHeavyMissileItem";
    gv_items[6].lv_image = "Assets\\Textures\\btn-lostviking_sidemissiles.dds";
    gv_items[6].lv_name = "Hellfire Heavy Missile";
    gv_items[6].lv_type = "HellfireHeavyMissileItem";
    gv_items[7].lv_image = "Assets\\Textures\\btn-research-terran-ultracapacitors.dds";
    gv_items[7].lv_name = "Merculite Heavy Missile";
    gv_items[7].lv_type = "MerculiteHeavyMissileItem";
    gv_items[8].lv_image = "Assets\\Textures\\btn-ability-terran-repair.dds";
    gv_items[8].lv_name = "Repair Kit";
    gv_items[8].lv_type = "Repairkit";
    gv_items[9].lv_image = "Assets\\Textures\\btn-ability-terran-heal-color.dds";
    gv_items[9].lv_name = "Revive Kit";
    gv_items[9].lv_type = "Revivekit";
    gv_items[10].lv_image = "Assets\\Textures\\icon-mineral-protoss.dds";
    gv_items[10].lv_name = "Chalcorium";
    gv_items[10].lv_type = "ChalcoriumOre";
    gv_items[10].lv_stackable = true;
    gv_items[11].lv_image = "Assets\\Textures\\icon-highyieldmineral-protoss.dds";
    gv_items[11].lv_name = "Veldite";
    gv_items[11].lv_type = "VelditeOre";
    gv_items[11].lv_stackable = true;
    gv_items[12].lv_image = "mineral_red.dds";
    gv_items[12].lv_name = "Pyromanite";
    gv_items[12].lv_type = "PyromaniteOre";
    gv_items[12].lv_stackable = true;
    gv_items[13].lv_image = "mineral_greenNew.dds";
    gv_items[13].lv_name = "Kermiculite";
    gv_items[13].lv_type = "KermiculiteOre";
    gv_items[13].lv_stackable = true;
    gv_items[14].lv_image = "Assets\\Textures\\btn-tips-challengecounter.dds";
    gv_items[14].lv_name = "Counter-Missiles";
    gv_items[14].lv_type = "ItemDecoyFlare";
    gv_items[15].lv_image = "Assets\\Textures\\btn-ability-protoss-shieldbattery-color.dds";
    gv_items[15].lv_name = "Small Shield Generator";
    gv_items[15].lv_type = "SmallShieldGenerator";
    gv_items[16].lv_image = "Abilities\\EMPMine.dds";
    gv_items[16].lv_name = "EMP Mine";
    gv_items[16].lv_type = "EMPMine";
    gv_items[17].lv_image = "Assets\\Textures\\btn-lostvinking_drone.dds";
    gv_items[17].lv_name = "Opposer Proximity Mine";
    gv_items[17].lv_type = "OpposerProximityMine2";
    gv_items[18].lv_image = "Assets\\Textures\\btn-techupgrade-terran-crossspectrumdampeners.dds";
    gv_items[18].lv_name = "Frequency Nullifier";
    gv_items[18].lv_type = "FrequencyNullifier";
    gv_items[19].lv_image = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel2.dds";
    gv_items[19].lv_name = "G-20 Pulse Gun";
    gv_items[19].lv_type = "ARC12Rifle";
    gv_items[20].lv_image = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel1.dds";
    gv_items[20].lv_name = "TX Plasma Rifle";
    gv_items[20].lv_type = "C14GaussRifle";
    gv_items[21].lv_image = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds";
    gv_items[21].lv_name = "2-C Hellstorm Carbine";
    gv_items[21].lv_type = "DustCannon";
    gv_items[22].lv_image = "Assets\\Textures\\btn-unit-terran-targetingdrone.dds";
    gv_items[22].lv_name = "Distress Beacon";
    gv_items[22].lv_type = "DistressBeacon";
    gv_items[23].lv_type = "RepairStation";
    gv_items[24].lv_type = "Firesuit";
    gv_items[25].lv_type = "NanodocGloves";
    gv_items[26].lv_type = "AdaptivePhotoDisguise";
    gv_items[27].lv_type = "C4Charges";
    auto3EA27FC6_ae = 2;
    auto3EA27FC6_ai = 1;
    lv_a = 1;
    for ( ; ( (auto3EA27FC6_ai >= 0 && lv_a <= auto3EA27FC6_ae) || (auto3EA27FC6_ai <= 0 && lv_a >= auto3EA27FC6_ae) ) ; lv_a += auto3EA27FC6_ai ) {
        DialogCreate(500, 200, c_anchorBottomRight, 0, 400, true);
        gv_storageDialog[lv_a] = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 35, c_anchorTopLeft, 40, 30, StringExternal("Param/Value/5B1CA6AA"), Color(60.00, 60.00, 60.00), false, 2.0);
        IntLoopBegin(0, gv_itemStorageArraySize);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, (65 + (IntLoopCurrent() * 50)), StringExternal("Param/Value/DDEAAC32"), ColorWithAlpha(0,0,0,0), false, 2.0);
            gv_storagelist[lv_a][IntLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_storageDialog[lv_a], 15, 15, c_anchorTopLeft, 35, (66 + (IntLoopCurrent() * 50)), StringExternal("Param/Value/1636EC8D"), "Assets\\Textures\\btn-building-zerg-hatchery.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_storageicons[lv_a][IntLoopCurrent()] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemButton(gv_storageDialog[lv_a], 25, 25, c_anchorTopRight, 120, (64 + (IntLoopCurrent() * 50)), StringExternal("Param/Value/4D567CEA"), StringExternal("Param/Value/CABFC9F4"), "");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_storagewithdraw1[lv_a][IntLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_storageDialog[lv_a], 25, 25, c_anchorTopRight, 90, (64 + (IntLoopCurrent() * 50)), StringExternal("Param/Value/973821D2"), StringExternal("Param/Value/B38AE6BC"), "");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_storagewithdraw5[lv_a][IntLoopCurrent()] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_storageDialog[lv_a], 25, 25, c_anchorTopRight, 60, (64 + (IntLoopCurrent() * 50)), StringExternal("Param/Value/9D744260"), StringExternal("Param/Value/7CD69201"), "");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            gv_storagewithdraw10[lv_a][IntLoopCurrent()] = DialogControlLastCreated();
        }
        IntLoopEnd();
        gf_UpdateStorageList(lv_a);
    }
}

void gf_UpdateStorageList (int lp_team) {
    int auto10B09ECA_ae;
    int auto10B09ECA_ai;
    int auto579B38C4_ae;
    int auto579B38C4_ai;

    // Variable Declarations
    int lv_ind;
    int lv_a;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto10B09ECA_ae = gv_itemStorageArraySize;
    auto10B09ECA_ai = 1;
    lv_a = 0;
    for ( ; ( (auto10B09ECA_ai >= 0 && lv_a <= auto10B09ECA_ae) || (auto10B09ECA_ai <= 0 && lv_a >= auto10B09ECA_ae) ) ; lv_a += auto10B09ECA_ai ) {
        if ((gv_storageicons[lp_team][lv_a] != c_invalidDialogControlId)) {
            DialogControlSetVisible(gv_storageicons[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), false);
            DialogControlSetVisible(gv_storagewithdraw1[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), false);
            DialogControlSetEnabled(gv_storagewithdraw1[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), true);
            DialogControlSetVisible(gv_storagewithdraw5[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), false);
            DialogControlSetEnabled(gv_storagewithdraw5[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), true);
            DialogControlSetVisible(gv_storagewithdraw10[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), false);
            DialogControlSetEnabled(gv_storagewithdraw10[lp_team][lv_a], GameAttributePlayersForTeam(lp_team), true);
        }
        else {
        }
    }
    auto579B38C4_ae = gv_itemStorageArraySize;
    auto579B38C4_ai = 1;
    lv_ind = 0;
    for ( ; ( (auto579B38C4_ai >= 0 && lv_ind <= auto579B38C4_ae) || (auto579B38C4_ai <= 0 && lv_ind >= auto579B38C4_ae) ) ; lv_ind += auto579B38C4_ai ) {
        if ((gv_items[gv_itemStorage[lp_team][lv_ind].lv_itemid].lv_name != "")) {
            lv_count += 1;
            libNtve_gf_SetDialogItemImage(gv_storageicons[lp_team][lv_ind], gv_items[gv_itemStorage[lp_team][lv_ind].lv_itemid].lv_image, GameAttributePlayersForTeam(lp_team));
            DialogControlSetVisible(gv_storageicons[lp_team][lv_ind], GameAttributePlayersForTeam(lp_team), true);
            DialogControlSetVisible(gv_storagewithdraw1[lp_team][lv_ind], GameAttributePlayersForTeam(lp_team), true);
            DialogControlSetVisible(gv_storagewithdraw5[lp_team][lv_ind], GameAttributePlayersForTeam(lp_team), true);
            DialogControlSetVisible(gv_storagewithdraw10[lp_team][lv_ind], GameAttributePlayersForTeam(lp_team), true);
            if ((gv_itemStorage[lp_team][lv_ind].lv_amount < 10)) {
                DialogControlSetEnabled(gv_storagewithdraw10[lp_team][lv_ind], GameAttributePlayersForTeam(lp_team), false);
                if ((gv_itemStorage[lp_team][lv_ind].lv_amount < 5)) {
                    DialogControlSetEnabled(gv_storagewithdraw5[lp_team][lv_ind], GameAttributePlayersForTeam(lp_team), false);
                }
                else {
                }
            }
            else {
            }
            libNtve_gf_SetDialogItemText(gv_storagelist[lp_team][lv_ind], (IntToText(gv_itemStorage[lp_team][lv_ind].lv_amount) + (StringExternal("Param/Value/71059AB8") + StringToText(gv_items[gv_itemStorage[lp_team][lv_ind].lv_itemid].lv_name))), GameAttributePlayersForTeam(lp_team));
        }
        else {
        }
    }
    DialogSetSize(gv_storageDialog[lp_team], 500, (100 + (50 * lv_count)));
}

bool gf_getItemStackable (string lp_type) {
    int auto8010002B_ae;
    int auto8010002B_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto8010002B_ae = 20;
    auto8010002B_ai = 1;
    lv_a = 0;
    for ( ; ( (auto8010002B_ai >= 0 && lv_a <= auto8010002B_ae) || (auto8010002B_ai <= 0 && lv_a >= auto8010002B_ae) ) ; lv_a += auto8010002B_ai ) {
        if ((gv_items[lv_a].lv_type == lp_type)) {
            return gv_items[lv_a].lv_stackable;
        }
        else {
        }
    }
    return false;
}

int gf_getItemID (string lp_type) {
    int auto8DDB7E62_ae;
    int auto8DDB7E62_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto8DDB7E62_ae = 20;
    auto8DDB7E62_ai = 1;
    lv_a = 0;
    for ( ; ( (auto8DDB7E62_ai >= 0 && lv_a <= auto8DDB7E62_ae) || (auto8DDB7E62_ai <= 0 && lv_a >= auto8DDB7E62_ae) ) ; lv_a += auto8DDB7E62_ai ) {
        if ((gv_items[lv_a].lv_type == lp_type)) {
            return lv_a;
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/954D658C"), true);
    return -1;
}

void gf_MoveRefiningMinerals (unit lp_u) {
    // Implementation
    if ((UnitGetType(lp_u) != "PathingBlocker1x1")) {
        if ((UnitHasBehavior(lp_u, "Refining") == true) && ((UnitGetType(lp_u) == "VelditeOre") || (UnitGetType(lp_u) == "ChalcoriumOre") || (UnitGetType(lp_u) == "PyromaniteOre") || (UnitGetType(lp_u) == "KermiculiteOre"))) {
            UnitSetPosition(lp_u, Point((PointGetX(UnitGetPosition(lp_u)) + 0.07), PointGetY(UnitGetPosition(lp_u))), false);
        }
        else {
            if (((UnitGetType(lp_u) == "HullFire") || (UnitGetType(lp_u) == "ScrapHuge"))) {
            }
            else {
                UnitSetPosition(lp_u, UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_u))), false);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(UnitGroupClosestToPoint(UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_u)))), c_messageAreaSubtitle, StringExternal("Param/Value/4E973884"));
            }
        }
    }
    else {
    }
}

void gf_InitHangar () {
    int autoA1C724E2_ae;
    int autoA1C724E2_ai;
    int auto437AB171_val;
    int auto6D55657C_ae;
    int auto6D55657C_ai;
    int auto1CBFA521_ae;
    int auto1CBFA521_ai;

    // Variable Declarations
    int lv_a;
    int lv_buttonid;

    // Variable Initialization

    // Implementation
    gv_shiptypes[0].lv_buttonImage = "Ships\\blimpbutton2.dds";
    gv_shiptypes[0].lv_image = "Ships\\blimpimage.dds";
    gv_shiptypes[0].lv_description = StringExternal("Param/Value/6C31170F");
    gv_shiptypes[0].lv_chalcoriumcost = 60;
    gv_shiptypes[0].lv_kermiculitecost = 0;
    gv_shiptypes[0].lv_pyromanitecost = 0;
    gv_shiptypes[0].lv_velditecost = 60;
    gv_shiptypes[0].lv_unittype = "Medivac";
    gv_shiptypes[0].lv_respawntime = 180;
    gv_shiptypes[1].lv_chalcoriumcost = 30;
    gv_shiptypes[1].lv_kermiculitecost = 0;
    gv_shiptypes[1].lv_pyromanitecost = 50;
    gv_shiptypes[1].lv_velditecost = 30;
    gv_shiptypes[1].lv_description = StringExternal("Param/Value/1BE2A9F4");
    gv_shiptypes[1].lv_buttonImage = "Assets\\Textures\\btn-unit-terran-wraith.dds";
    gv_shiptypes[1].lv_image = "Ships\\wraithpic.dds";
    gv_shiptypes[1].lv_unittype = "Wraith";
    gv_shiptypes[1].lv_respawntime = 160;
    gv_shiptypes[1].lv_inventorySizeX = 3;
    gv_shiptypes[1].lv_inventorySizeY = 1;
    gv_shiptypes[2].lv_chalcoriumcost = 70;
    gv_shiptypes[2].lv_kermiculitecost = 0;
    gv_shiptypes[2].lv_pyromanitecost = 100;
    gv_shiptypes[2].lv_velditecost = 70;
    gv_shiptypes[2].lv_description = StringExternal("Param/Value/2394A276");
    gv_shiptypes[2].lv_buttonImage = "Ships\\corvettebuttonNEW.dds";
    gv_shiptypes[2].lv_image = "Ships\\corvette.dds";
    gv_shiptypes[2].lv_unittype = "Corvette";
    gv_shiptypes[2].lv_respawntime = 260;
    gv_shiptypes[3].lv_chalcoriumcost = 100;
    gv_shiptypes[3].lv_kermiculitecost = 75;
    gv_shiptypes[3].lv_pyromanitecost = 150;
    gv_shiptypes[3].lv_velditecost = 75;
    gv_shiptypes[3].lv_description = StringExternal("Param/Value/599F404C");
    gv_shiptypes[3].lv_buttonImage = "Ships\\destroyerbutton.dds";
    gv_shiptypes[3].lv_image = "Ships\\destroyer.dds";
    gv_shiptypes[3].lv_unittype = "Destroyer";
    gv_shiptypes[3].lv_respawntime = 600;
    gv_shiptypes[4].lv_chalcoriumcost = 75;
    gv_shiptypes[4].lv_kermiculitecost = 0;
    gv_shiptypes[4].lv_pyromanitecost = 25;
    gv_shiptypes[4].lv_velditecost = 100;
    gv_shiptypes[4].lv_description = StringExternal("Param/Value/31B9AA2F");
    gv_shiptypes[4].lv_buttonImage = "Ships\\btn-unit-terran-nomad.dds";
    gv_shiptypes[4].lv_image = "Ships\\minelayer-image.dds";
    gv_shiptypes[4].lv_unittype = "Minelayer";
    gv_shiptypes[4].lv_respawntime = 240;
    gv_shiptypes[5].lv_chalcoriumcost = 50;
    gv_shiptypes[5].lv_kermiculitecost = 0;
    gv_shiptypes[5].lv_pyromanitecost = 25;
    gv_shiptypes[5].lv_velditecost = 100;
    gv_shiptypes[5].lv_description = StringExternal("Param/Value/38D8CFCF");
    gv_shiptypes[5].lv_buttonImage = "Ships\\chomper-button.dds";
    gv_shiptypes[5].lv_image = "Ships\\chomper-image.dds";
    gv_shiptypes[5].lv_unittype = "Chomper";
    gv_shiptypes[5].lv_inventorySizeX = 5;
    gv_shiptypes[5].lv_inventorySizeY = 3;
    gv_shiptypes[5].lv_respawntime = 360;
    gv_shiptypes[6].lv_chalcoriumcost = 70;
    gv_shiptypes[6].lv_kermiculitecost = 0;
    gv_shiptypes[6].lv_pyromanitecost = 50;
    gv_shiptypes[6].lv_velditecost = 50;
    gv_shiptypes[6].lv_description = StringExternal("Param/Value/90447A34");
    gv_shiptypes[6].lv_buttonImage = "Ships\\infiltrator-button.dds";
    gv_shiptypes[6].lv_image = "Ships\\infiltrator-image.dds";
    gv_shiptypes[6].lv_unittype = "HelsAngelFighter";
    gv_shiptypes[6].lv_respawntime = 480;
    gv_shiptypes[7].lv_chalcoriumcost = 70;
    gv_shiptypes[7].lv_kermiculitecost = 75;
    gv_shiptypes[7].lv_pyromanitecost = 50;
    gv_shiptypes[7].lv_velditecost = 50;
    gv_shiptypes[7].lv_description = StringExternal("Param/Value/6E509A97");
    gv_shiptypes[7].lv_buttonImage = "Ships\\raven-button.dds";
    gv_shiptypes[7].lv_image = "Ships\\raven-image.dds";
    gv_shiptypes[7].lv_unittype = "Subjugator";
    gv_shiptypes[7].lv_respawntime = 480;
    gv_shiptypes[20].lv_unittype = "Battlecruiser";
    gv_shipList[1][0].lv_shipType = 0;
    gv_shipList[1][1].lv_shipType = 0;
    gv_shipList[1][2].lv_shipType = 0;
    gv_shipList[1][3].lv_shipType = 1;
    gv_shipList[1][4].lv_shipType = 1;
    gv_shipList[1][5].lv_shipType = 1;
    gv_shipList[1][6].lv_shipType = 2;
    gv_shipList[2][0].lv_shipType = 0;
    gv_shipList[2][1].lv_shipType = 0;
    gv_shipList[2][2].lv_shipType = 0;
    gv_shipList[2][3].lv_shipType = 1;
    gv_shipList[2][4].lv_shipType = 1;
    gv_shipList[2][5].lv_shipType = 1;
    gv_shipList[2][6].lv_shipType = 2;
    DialogCreate(1000, 700, c_anchorTopLeft, 0, 50, true);
    gv_hangarDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 35, 35, c_anchorTopRight, 100, 0, StringExternal("Param/Value/CFFFC7DD"), StringExternal("Param/Value/5A74F430"), "");
    gv_closeHangar = DialogControlLastCreated();
    autoA1C724E2_ae = (gv_hangarrows - 1);
    autoA1C724E2_ai = 1;
    lv_a = 0;
    for ( ; ( (autoA1C724E2_ai >= 0 && lv_a <= autoA1C724E2_ae) || (autoA1C724E2_ai <= 0 && lv_a >= autoA1C724E2_ae) ) ; lv_a += autoA1C724E2_ai ) {
        IntLoopBegin(0, (gv_hangarcolumns - 1));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_hangarbuttonsize, gv_hangarbuttonsize, c_anchorTopRight, (gv_hangarbuttonoffsetX + ((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent()))), (gv_hangarbuttonoffsetY + ((gv_hangarbuttonsize * lv_a) + (gv_hangarbuttongapY * lv_a))), StringExternal("Param/Value/677C7C8F"), StringExternal("Param/Value/E3E3CCC8"), "");
            lv_buttonid = ((gv_hangarcolumns * lv_a) + IntLoopCurrent());
            gv_shipListButtons[lv_buttonid] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), c_anchorTopRight, (gv_hangarbuttonoffsetX + (((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent())) + (gv_hangarbuttonimageshrink / 2))), (gv_hangarbuttonoffsetY + (((gv_hangarbuttonsize * lv_a) + (gv_hangarbuttongapY * lv_a)) + (gv_hangarbuttonimageshrink / 2))), StringExternal("Param/Value/1A35770E"), gv_shiptypes[gv_shipList[1][lv_buttonid].lv_shipType].lv_buttonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_shiptypes[gv_shipList[2][lv_buttonid].lv_shipType].lv_buttonImage, GameAttributePlayersForTeam(2));
            gv_shipListImages[lv_buttonid] = DialogControlLastCreated();
            if ((gv_shiptypes[gv_shipList[1][lv_buttonid].lv_shipType].lv_buttonImage == null)) {
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
            else {
            }
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gv_hangarInspacebuttonsize, gv_hangarInspacebuttonsize, c_anchorTopRight, ((gv_hangarbuttonoffsetX + (gv_hangarbuttonsize - FixedToInt((IntToFixed(gv_hangarInspacebuttonsize) * gv_spacebuttonoffsetmultiplier)))) + (((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent())) + (gv_hangarbuttonimageshrink / 2))), ((gv_hangarbuttonoffsetY + (gv_hangarbuttonsize - FixedToInt((IntToFixed(gv_hangarInspacebuttonsize) * gv_spacebuttonoffsetmultiplier)))) + (((gv_hangarbuttonsize * lv_a) + (gv_hangarbuttongapY * lv_a)) + (gv_hangarbuttonimageshrink / 2))), StringExternal("Param/Value/E9515334"), "Assets\\Textures\\btn-ability-terran-cloak-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_shipListImagesInspace[lv_buttonid] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), gv_hangarbuttonsize, gv_hangarbuttonsize, c_anchorTopRight, (gv_hangarbuttonoffsetX + ((gv_hangarbuttonsize * IntLoopCurrent()) + (IntLoopCurrent() * gv_hangarbuttongapX))), ((gv_hangarbuttonoffsetY + 10) + ((gv_hangarbuttonsize * lv_a) + ((lv_a + 1) * gv_hangarbuttongapY))), StringExternal("Param/Value/DDB059F9"), Color(100.00, 0.00, 0.00), false, 2.0);
            gv_shipListRespawnLabel[lv_buttonid] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
        IntLoopEnd();
    }
    IntLoopBegin(0, (gv_hangarActionButtons - 1));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        auto437AB171_val = IntLoopCurrent();
        if (auto437AB171_val == 0) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), (gv_hangarbuttonsize + 40), gv_hangarbuttonsize, c_anchorBottomLeft, ((gv_hangarbuttonpurchaseoffsetX - 40) + ((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent()))), 40, StringExternal("Param/Value/F63E7204"), StringExternal("Param/Value/9F1A128C"), "");
            gv_launchShipButton = DialogControlLastCreated();
        }
        else if (auto437AB171_val == 1) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_hangarbuttonsize, gv_hangarbuttonsize, c_anchorBottomLeft, (gv_hangarbuttonpurchaseoffsetX + ((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent()))), 40, StringExternal("Param/Value/7DB502B1"), StringExternal("Param/Value/2041A8A4"), "");
            gv_withdrawItemsButton = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), c_anchorBottomLeft, (gv_hangarbuttonpurchaseoffsetX + (((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent())) + (gv_hangarbuttonimageshrink / 2))), (40 + (gv_hangarbuttonimageshrink / 2)), StringExternal("Param/Value/FC3728E0"), "Assets\\Textures\\btn-ability-terran-land.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_withdrawItemsImage = DialogControlLastCreated();
        }
        else if (auto437AB171_val == 2) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_hangarbuttonsize, gv_hangarbuttonsize, c_anchorBottomLeft, (gv_hangarbuttonpurchaseoffsetX + ((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent()))), 40, StringExternal("Param/Value/330EB98D"), StringExternal("Param/Value/6F01EB94"), "");
            gv_depositItemButton = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), c_anchorBottomLeft, (gv_hangarbuttonpurchaseoffsetX + (((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent())) + (gv_hangarbuttonimageshrink / 2))), (40 + (gv_hangarbuttonimageshrink / 2)), StringExternal("Param/Value/9DC232AF"), "Assets\\Textures\\btn-ability-terran-liftoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_depositItemImage = DialogControlLastCreated();
        }
        else if (auto437AB171_val == 4) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_hangarbuttonsize, gv_hangarbuttonsize, c_anchorBottomLeft, (gv_hangarbuttonpurchaseoffsetX + ((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent()))), 40, StringExternal("Param/Value/D535FEDF"), StringExternal("Param/Value/D61441F1"), "");
            gv_salvageItemButton = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), c_anchorBottomLeft, (gv_hangarbuttonpurchaseoffsetX + (((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent())) + (gv_hangarbuttonimageshrink / 2))), (40 + (gv_hangarbuttonimageshrink / 2)), StringExternal("Param/Value/0EC97C7B"), "Abilities\\btn-ability-terran-immortalityprotocol-color2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_salvageItemImage = DialogControlLastCreated();
            auto6D55657C_ae = 2;
            auto6D55657C_ai = 1;
            lv_a = 1;
            for ( ; ( (auto6D55657C_ai >= 0 && lv_a <= auto6D55657C_ae) || (auto6D55657C_ai <= 0 && lv_a >= auto6D55657C_ae) ) ; lv_a += auto6D55657C_ai ) {
                libNtve_gf_SetDialogItemTooltip(gv_salvageItemButton, gf_CreateSalvageTooltip(gv_shipList[lv_a][0].lv_shipType, 1), PlayerGroupAll());
            }
        }
        else {
        }
    }
    IntLoopEnd();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 430, 430, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/5D1F4E64"), gv_shiptypes[gv_shipList[1][0].lv_shipType].lv_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_selectedShipImage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 250, c_anchorBottomRight, 150, 200, gv_shiptypes[0].lv_description, ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_hangarDescription = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 150, c_anchorBottomRight, 150, 350, (StringExternal("Param/Value/9E1C03F8") + UnitTypeGetName(gv_shiptypes[0].lv_unittype) + StringExternal("Param/Value/9ACAF3E5")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_hangarName = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 130, 150, c_anchorBottomRight, 300, 120, StringExternal("Param/Value/630ADF98"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_inventoryLabel = DialogControlLastCreated();
    DialogCreate(400, 150, c_anchorTopLeft, 65, 215, true);
    gv_shipInfoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 75, c_anchorTopLeft, 40, 37, StringExternal("Param/Value/075D1470"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 100, 75, StringExternal("Param/Value/A006399C"), StringExternal("Param/Value/B7422CC0"), "");
    gv_openPurchaseShip = DialogControlLastCreated();
    DialogCreate(500, 700, c_anchorTopLeft, 0, 50, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 35, 35, c_anchorTopRight, 0, 0, StringExternal("Param/Value/36902207"), StringExternal("Param/Value/423FF64B"), "");
    gv_closePurchaseShip = DialogControlLastCreated();
    gv_shipPurchaseDialog = DialogLastCreated();
    auto1CBFA521_ae = (gv_hangarPurchasecolumns - 1);
    auto1CBFA521_ai = 1;
    lv_a = 0;
    for ( ; ( (auto1CBFA521_ai >= 0 && lv_a <= auto1CBFA521_ae) || (auto1CBFA521_ai <= 0 && lv_a >= auto1CBFA521_ae) ) ; lv_a += auto1CBFA521_ai ) {
        IntLoopBegin(0, (gv_hangarPurchaserows - 1));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_buttonid = ((gv_hangarPurchaserows * lv_a) + IntLoopCurrent());
            if ((gv_shiptypes[lv_buttonid].lv_buttonImage != null)) {
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_hangarbuttonsize, gv_hangarbuttonsize, c_anchorTopRight, ((gv_hangarbuttonpurchaseoffsetX - 40) + ((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent()))), (gv_hangarbuttonoffsetY + ((gv_hangarbuttonsize * lv_a) + (gv_hangarbuttongapY * lv_a))), StringExternal("Param/Value/F35E336F"), StringExternal("Param/Value/5163765F"), "");
                gv_shipPurchaseButtons[lv_buttonid] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), (gv_hangarbuttonsize - gv_hangarbuttonimageshrink), c_anchorTopRight, ((gv_hangarbuttonpurchaseoffsetX - 40) + (((gv_hangarbuttonsize * IntLoopCurrent()) + (gv_hangarbuttongapX * IntLoopCurrent())) + (gv_hangarbuttonimageshrink / 2))), (gv_hangarbuttonoffsetY + (((gv_hangarbuttonsize * lv_a) + (gv_hangarbuttongapY * lv_a)) + (gv_hangarbuttonimageshrink / 2))), StringExternal("Param/Value/F9BB195F"), gv_shiptypes[lv_buttonid].lv_buttonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            else {
            }
        }
        IntLoopEnd();
    }
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 150, 25, StringExternal("Param/Value/27CA81CE"), StringExternal("Param/Value/88AB4D17"), "");
    gv_purchaseship = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 250, 250, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/F75D6553"), gv_shiptypes[0].lv_image, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_selectedPurchaseShipImage = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 150, c_anchorBottomLeft, 62, 235, (StringExternal("Param/Value/3173AF19") + UnitTypeGetName(gv_shiptypes[0].lv_unittype) + StringExternal("Param/Value/5134CCAE")), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_purchaseName = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 240, 250, c_anchorBottomLeft, 50, 100, gv_shiptypes[0].lv_description, ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_purchaseDescription = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 180, 150, c_anchorBottomLeft, 300, 100, StringExternal("Param/Value/4996E4CF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_purchaseCost = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/16699427") + (TextWithColor((StringExternal("Param/Value/918DCD0D") + IntToText(gf_GetShipPrice(1, 0, 0))), libNtve_gf_ConvertPlayerColorToColor(5)) + (TextWithColor((StringExternal("Param/Value/F960C6D5") + IntToText(gf_GetShipPrice(1, 0, 1))), libNtve_gf_ConvertPlayerColorToColor(3)) + (TextWithColor((StringExternal("Param/Value/E301D3B0") + IntToText(gf_GetShipPrice(1, 0, 2))), libNtve_gf_ConvertPlayerColorToColor(1)) + TextWithColor((StringExternal("Param/Value/D295A9C4") + IntToText(gf_GetShipPrice(1, 0, 3))), libNtve_gf_ConvertPlayerColorToColor(7)))))), PlayerGroupAll());
    DialogCreate(350, 200, c_anchorCenter, 0, 0, true);
    gv_salvageConfirmDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, 40, StringExternal("Param/Value/237CF5EC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_salvageConfirmText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomLeft, 80, 30, StringExternal("Param/Value/D0A06876"), StringExternal("Param/Value/C9118A9A"), "");
    gv_salvageConfirmYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomRight, 80, 30, StringExternal("Param/Value/33D14561"), StringExternal("Param/Value/61D0D2A9"), "");
    gv_salvageConfirmNo = DialogControlLastCreated();
}

unit gf_Launchship (int lp_trigPlayer, int lp_shipID, unit lp_avatar, int lp_team) {
    int autoD0A70AB2_ae;
    int autoD0A70AB2_ai;
    int autoD515B107_ae;
    int autoD515B107_ai;
    string auto0158F197_val;

    // Variable Declarations
    int lv_inventoryID;
    unit lv_u;
    int lv_i;
    int lv_i2;
    int lv_loopX;
    int lv_loopY;
    fixed lv_charges;
    abilcmd[7] lv_abilities;
    string lv_abiltype;
    fixed lv_energy;
    int lv_p;
    fixed lv_side;

    // Variable Initialization
    lv_abiltype = "Instant";
    lv_side = 90.0;

    // Implementation
    if (((lp_team != gf_GetPlayerTeam(lp_trigPlayer)) || (gv_shipList[lp_team][lp_shipID].lv_shipType != 20))) {
        if ((gv_shipList[lp_team][lp_shipID].lv_currentRespawn == 0)) {
            if (((lp_team != gf_GetPlayerTeam(lp_trigPlayer)) || (gv_shipList[lp_team][lp_shipID].lv_status == 0))) {
                if ((gv_tutorial_FirstTimeShipLaunching[lp_trigPlayer] == true) && (PlayerGroupHasPlayer(gv_newplayers, lp_trigPlayer) == true)) {
                    gf_TipShip(lp_trigPlayer);
                }
                else {
                }
                DialogSetTransparency(gv_powerdownoverlay[lp_trigPlayer], 100.0);
                if ((lp_trigPlayer < 13)) {
                    libNtve_gf_AttachActorToUnit(gv_pilots[lp_trigPlayer], "SoundLaunch", "Ref_Origin");
                }
                else {
                    libNtve_gf_AttachActorToUnit(lp_avatar, "SoundLaunch", "Ref_Origin");
                }
                PlayerGroupRemove(gv_consolePlayers, lp_trigPlayer);
                DialogSetVisible(gv_selectConsole, PlayerGroupSingle(lp_trigPlayer), false);
                DialogControlSetVisible(gv_switchViewButton, PlayerGroupSingle(lp_trigPlayer), false);
                DialogSetVisible(gv_openDirectionsdialog, PlayerGroupSingle(lp_trigPlayer), false);
                DialogSetVisible(gv_directionsdialog, PlayerGroupSingle(lp_trigPlayer), false);
                if ((lp_avatar == null)) {
                    if (((PointGetX(UnitGetPosition(gv_pilots[lp_trigPlayer])) - PointGetX(gv_mineraldropoff[lp_team])) > 0.0)) {
                        lv_side = -90.0;
                    }
                    else {
                    }
                }
                else {
                    if (((PointGetX(UnitGetPosition(lp_avatar)) - PointGetX(gv_mineraldropoff[lp_team])) > 0.0)) {
                        lv_side = -90.0;
                    }
                    else {
                    }
                }
                if ((lp_team == gf_GetPlayerTeam(lp_trigPlayer))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_shiptypes[gv_shipList[lp_team][lp_shipID].lv_shipType].lv_unittype, c_unitCreateIgnorePlacement, lp_trigPlayer, PointWithOffsetPolar(UnitGetPosition(gv_battlecruisers[lp_team]), 3.5, (UnitGetFacing(gv_battlecruisers[lp_team]) + lv_side)));
                    DialogControlSetVisible(gv_shipListImagesInspace[lp_shipID], GameAttributePlayersForTeam(gf_GetPlayerTeam(lp_trigPlayer)), true);
                    gv_shipList[gf_GetPlayerTeam(lp_trigPlayer)][lp_shipID].lv_status = 1;
                    UIDisplayMessage(gv_players_inside[lp_team], c_messageAreaChat, ((TextWithColor(PlayerName(lp_trigPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_trigPlayer, false))) + TextWithColor((StringExternal("Param/Value/92AF5659") + UnitTypeGetName(gv_shiptypes[gv_shipList[lp_team][lp_shipID].lv_shipType].lv_unittype)), Color(100.00, 100.00, 0.00))) + TextWithColor((StringExternal("Param/Value/1681939A") + FixedToText(UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyRegen, c_unitPropCurrent), 0) + StringExternal("Param/Value/3ADE9F09")), Color(100.00, 0.00, 0.00))));
                }
                else {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_shiptypes[gv_shipList[(3 - lp_team)][lp_shipID].lv_shipType].lv_unittype, c_unitCreateIgnorePlacement, lp_trigPlayer, PointWithOffsetPolar(UnitGetPosition(gv_battlecruisers[lp_team]), 3.5, (UnitGetFacing(gv_battlecruisers[lp_team]) + lv_side)));
                }
                PlayerGroupRemove(gv_players_inside[lp_team], lp_trigPlayer);
                if (((lp_trigPlayer == 13) || (lp_trigPlayer == 14))) {
                    gv_drones[lp_team][gf_avatarToIndex(lp_avatar, lp_team)].lv_ship = UnitLastCreated();
                    gv_selectedShip[lp_trigPlayer] = lp_shipID;
                    lib2_gv_selectedhangarinventory[lp_trigPlayer] = lp_shipID;
                }
                else {
                    lib2_gf_DisableEnableInventory(gf_getHangarInventory(lp_trigPlayer), true);
                    gf_ShowHideInventory(false, lp_trigPlayer);
                }
                lv_inventoryID = (((gv_hangarcolumns * gv_hangarrows) * (lp_team - 1)) + gv_selectedShip[lp_trigPlayer]);
                lv_u = UnitLastCreated();
                UnitSetFacing(lv_u, (UnitGetFacing(gv_battlecruisers[lp_team]) + lv_side), 0.0);
                UnitBehaviorAdd(lv_u, "RecentlyLaunched", lv_u, 1);
                gf_RegisterShipNavigation(lv_u);
                CameraFollowUnitGroup(lp_trigPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_battlecruisers[gf_GetPlayerTeam(lp_trigPlayer)]), false, false);
                CameraFollowUnitGroup(lp_trigPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_battlecruisers[lp_team]), false, false);
                CameraFollowUnitGroup(lp_trigPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(lv_u)]), true, false);
                gv_nav_speed[gf_shipToIndex(lv_u)] = 1.0;
                gv_nav_angles[gf_shipToIndex(lv_u)] = (UnitGetFacing(gv_battlecruisers[lp_team]) + lv_side);
                gv_nav_targets[gf_shipToIndex(lv_u)] = (UnitGetFacing(gv_battlecruisers[lp_team]) + lv_side);
                UnitSetCustomValue(lv_u, 6, IntToFixed(lp_shipID));
                CameraPan(lp_trigPlayer, UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(lv_u)]), 0.0, -1, 10, false);
                if ((lp_avatar == null)) {
                    libNtve_gf_ShowHideUnit(gv_pilots[lp_trigPlayer], false);
                    UnitBehaviorAdd(gv_pilots[lp_trigPlayer], "DisableAttack", gv_pilots[lp_trigPlayer], 1);
                }
                else {
                    libNtve_gf_ShowHideUnit(lp_avatar, false);
                    UnitBehaviorAdd(lp_avatar, "DisableAttack", lp_avatar, 1);
                }
                gf_Closehangar(lp_trigPlayer);
                UnitClearSelection(lp_trigPlayer);
                autoD0A70AB2_ae = lib2_gv_inventories[lv_inventoryID].lv_sizeX;
                autoD0A70AB2_ai = 1;
                lv_loopX = 0;
                for ( ; ( (autoD0A70AB2_ai >= 0 && lv_loopX <= autoD0A70AB2_ae) || (autoD0A70AB2_ai <= 0 && lv_loopX >= autoD0A70AB2_ae) ) ; lv_loopX += autoD0A70AB2_ai ) {
                    autoD515B107_ae = lib2_gv_inventories[lv_inventoryID].lv_sizeY;
                    autoD515B107_ai = 1;
                    lv_loopY = 0;
                    for ( ; ( (autoD515B107_ai >= 0 && lv_loopY <= autoD515B107_ae) || (autoD515B107_ai <= 0 && lv_loopY >= autoD515B107_ae) ) ; lv_loopY += autoD515B107_ai ) {
                        if ((lib2_gv_inventories[lv_inventoryID].lv_slots[lv_loopX][lv_loopY] != c_invalidDialogControlId) && (lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY] != null)) {
                            UnitInventoryCreate(gf_shipToNavigator(lv_u), lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY]);
                            auto0158F197_val = lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY];
                            if (auto0158F197_val == "SmallShieldGenerator") {
                                UnitBehaviorAdd(lv_u, "SmallShieldGenerator", lv_u, 1);
                            }
                            else if (auto0158F197_val == "EMPMine") {
                                UnitAbilityAddChargeUsed(gf_shipToNavigator(lv_u), "LayEMPMine", "Abil/LayEMPMine", -25.0);
                            }
                            else if (auto0158F197_val == "OpposerProximityMine2") {
                                UnitAbilityAddChargeUsed(gf_shipToNavigator(lv_u), "LayOpposerProximityMine", "Abil/LayOpposerProximityMine", -25.0);
                            }
                            else if (auto0158F197_val == "DistressBeacon") {
                                UnitAbilityAddChargeUsed(gf_shipToNavigator(lv_u), "LayDistressBecon", "Abil/LayDistressBecon", -5.0);
                            }
                            else {
                            }
                            if ((gf_getItemStackable(lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY]) == true)) {
                                lv_charges = lib2_gv_inventories[lv_inventoryID].lv_charges[lv_loopX][lv_loopY];
                                if ((lv_charges == 100.0)) {
                                    lib1_gf_ItemSetChargesRemaining(UnitInventoryLastCreated(), 99.0);
                                    lib1_gf_ItemAddCharges(UnitInventoryLastCreated(), 1.0);
                                }
                                else {
                                    lib1_gf_ItemSetChargesRemaining(UnitInventoryLastCreated(), lib2_gv_inventories[lv_inventoryID].lv_charges[lv_loopX][lv_loopY]);
                                }
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                }
                DialogSetVisible(gv_shipStatus, PlayerGroupSingle(lp_trigPlayer), false);
                gf_EnterNavigation(lp_trigPlayer, lv_u);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lp_trigPlayer), c_messageAreaChat, StringExternal("Param/Value/CEE11FC5"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lp_trigPlayer), c_messageAreaChat, StringExternal("Param/Value/78E9B7C7"));
        }
    }
    else {
    }
    return lv_u;
}

void gf_Closehangar (int lp_player) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Implementation
    if (((lp_player == 13) || (lp_player == 14))) {
    }
    else {
        DialogSetVisible(gv_salvageConfirmDialog, PlayerGroupSingle(lp_player), false);
        PlayerGroupRemove(gv_consolePlayers, lp_player);
        DialogSetVisible(gv_selectConsole, PlayerGroupSingle(lp_player), false);
        lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[lp_player]));
        lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("Hangarconsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[lp_player]));
        UnitBehaviorRemove(gv_pilots[lp_player], "InConsole", 1);
        DialogSetVisible(gv_hangarDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_shipPurchaseDialog, PlayerGroupSingle(lp_player), false);
        UnitBehaviorRemove(lv_closestU, "ConsoleOccupied", 1);
        UnitClearSelection(lp_player);
        UnitSelect(gv_pilots[lp_player], lp_player, true);
        UnitSetOwner(lv_closestConsole, 0, false);
        UnitSetOwner(gv_pilots[lp_player], lp_player, false);
    }
}

int gf_getHangarInventory (int lp_player) {
    // Implementation
    return (((gv_hangarcolumns * gv_hangarrows) * (gf_GetPlayerTeam(lp_player) - 1)) + lib2_gv_selectedhangarinventory[lp_player]);
}

int gf_getHangarInventory2 (int lp_slot, int lp_team) {
    // Implementation
    return (((gv_hangarcolumns * gv_hangarrows) * (lp_team - 1)) + lp_slot);
}

int gf_getShipID (string lp_type) {
    int auto9914430E_ae;
    int auto9914430E_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto9914430E_ae = 20;
    auto9914430E_ai = 1;
    lv_i = 0;
    for ( ; ( (auto9914430E_ai >= 0 && lv_i <= auto9914430E_ae) || (auto9914430E_ai <= 0 && lv_i >= auto9914430E_ae) ) ; lv_i += auto9914430E_ai ) {
        if ((gv_shiptypes[lv_i].lv_unittype == lp_type)) {
            return lv_i;
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/8D4013B5"), true);
    return -1;
}

int gf_countShips (int lp_team, string lp_type) {
    int auto99CEB077_ae;
    int auto99CEB077_ai;

    // Variable Declarations
    int lv_a;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto99CEB077_ae = ((gv_hangarcolumns * gv_hangarrows) - 1);
    auto99CEB077_ai = 1;
    lv_a = 0;
    for ( ; ( (auto99CEB077_ai >= 0 && lv_a <= auto99CEB077_ae) || (auto99CEB077_ai <= 0 && lv_a >= auto99CEB077_ae) ) ; lv_a += auto99CEB077_ai ) {
        if ((gv_shiptypes[gv_shipList[lp_team][lv_a].lv_shipType].lv_unittype == lp_type)) {
            lv_count += 1;
        }
        else {
        }
    }
    return lv_count;
}

int gf_firstEmptySlot (int lp_team) {
    int auto9CF08391_ae;
    int auto9CF08391_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto9CF08391_ae = ((gv_hangarcolumns * gv_hangarrows) - 1);
    auto9CF08391_ai = 1;
    lv_a = 0;
    for ( ; ( (auto9CF08391_ai >= 0 && lv_a <= auto9CF08391_ae) || (auto9CF08391_ai <= 0 && lv_a >= auto9CF08391_ae) ) ; lv_a += auto9CF08391_ai ) {
        if ((gv_shipList[lp_team][lv_a].lv_shipType == 20)) {
            return lv_a;
        }
        else {
        }
    }
    return -1;
}

text gf_CreateSalvageTooltip (int lp_shipID, int lp_p) {
    // Variable Declarations
    text lv_shipname;
    int lv_veld;
    int lv_chalc;
    int lv_pyro;
    int lv_kerm;
    int lv_team;
    int lv_slot;

    // Variable Initialization
    lv_shipname = UnitTypeGetName(gv_shiptypes[lp_shipID].lv_unittype);

    // Implementation
    lv_slot = gv_selectedShip[lp_p];
    lv_team = gf_GetPlayerTeam(lp_p);
    lv_veld = (gf_GetShipPrice(lp_p, gv_shipList[lv_team][lv_slot].lv_shipType, 0) / 2);
    lv_chalc = (gf_GetShipPrice(lp_p, gv_shipList[lv_team][lv_slot].lv_shipType, 1) / 2);
    lv_pyro = (gf_GetShipPrice(lp_p, gv_shipList[lv_team][lv_slot].lv_shipType, 2) / 2);
    lv_kerm = (gf_GetShipPrice(lp_p, gv_shipList[lv_team][lv_slot].lv_shipType, 3) / 2);
    return (StringExternal("Param/Value/4D3B4DB1") + lv_shipname + StringExternal("Param/Value/67860B4B") + TextWithColor((StringExternal("Param/Value/A7B3E9B8") + IntToText(lv_veld)), Color(100.00, 100.00, 0.00)) + StringExternal("Param/Value/8EB088AC") + TextWithColor((StringExternal("Param/Value/8E27DD50") + IntToText(lv_chalc)), Color(0.00, 100.00, 100.00)) + StringExternal("Param/Value/05146155") + TextWithColor((StringExternal("Param/Value/29B1ECC4") + IntToText(lv_pyro)), Color(100.00, 0.00, 0.00)) + StringExternal("Param/Value/DDB47F6D") + TextWithColor((StringExternal("Param/Value/F94F15B0") + IntToText(lv_kerm)), Color(0.00, 100.00, 0.00)));
}

trigger auto_gf_ReconstructShip_Trigger = null;
int auto_gf_ReconstructShip_lp_shipID;
int auto_gf_ReconstructShip_lp_team;

void gf_ReconstructShip (int lp_shipID, int lp_team) {
    auto_gf_ReconstructShip_lp_shipID = lp_shipID;
    auto_gf_ReconstructShip_lp_team = lp_team;

    if (auto_gf_ReconstructShip_Trigger == null) {
        auto_gf_ReconstructShip_Trigger = TriggerCreate("auto_gf_ReconstructShip_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReconstructShip_Trigger, false, false);
}

bool auto_gf_ReconstructShip_TriggerFunc (bool testConds, bool runActions) {
    int lp_shipID = auto_gf_ReconstructShip_lp_shipID;
    int lp_team = auto_gf_ReconstructShip_lp_team;

    // Variable Declarations
    fixed lv_respawntime;

    // Variable Initialization
    lv_respawntime = gv_shiptypes[gv_shipList[lp_team][lp_shipID].lv_shipType].lv_respawntime;

    // Implementation
    DialogControlSetVisible(gv_shipListRespawnLabel[lp_shipID], GameAttributePlayersForTeam(lp_team), true);
    libNtve_gf_SetDialogItemColor(gv_shipListButtons[lp_shipID], Color(100.00, 0.00, 0.00), GameAttributePlayersForTeam(lp_team));
    if ((TechTreeUpgradeCount((lp_team + 12), "TierOffensive2", c_techCountCompleteOnly) == 1) && ((gv_shipList[lp_team][lp_shipID].lv_shipType == 1) || (gv_shipList[lp_team][lp_shipID].lv_shipType == 2) || (gv_shipList[lp_team][lp_shipID].lv_shipType == 3))) {
        lv_respawntime *= 0.75;
    }
    else {
    }
    if ((TechTreeUpgradeCount((lp_team + 12), "TierEconomy2", c_techCountCompleteOnly) == 1) && (gv_shipList[lp_team][lp_shipID].lv_shipType == 0)) {
        lv_respawntime -= 90.0;
    }
    else {
    }
    gv_shipList[lp_team][lp_shipID].lv_currentRespawn = FixedToInt(lv_respawntime);
    while ((gv_shipList[lp_team][lp_shipID].lv_currentRespawn > 0)) {
        Wait(1.0, c_timeGame);
        gv_shipList[lp_team][lp_shipID].lv_currentRespawn -= 1;
        libNtve_gf_SetDialogItemText(gv_shipListRespawnLabel[lp_shipID], (StringExternal("Param/Value/88254BC6") + IntToText(gv_shipList[lp_team][lp_shipID].lv_currentRespawn) + StringExternal("Param/Value/F89078B0")), GameAttributePlayersForTeam(lp_team));
    }
    UIDisplayMessage(GameAttributePlayersForTeam(lp_team), c_messageAreaSubtitle, (TextWithColor((StringExternal("Param/Value/F0D3FBF0") + UnitTypeGetName(gv_shiptypes[gv_shipList[lp_team][lp_shipID].lv_shipType].lv_unittype)), Color(100.00, 100.00, 0.00))));
    DialogControlSetVisible(gv_shipListRespawnLabel[lp_shipID], GameAttributePlayersForTeam(lp_team), false);
    libNtve_gf_SetDialogItemColor(gv_shipListButtons[lp_shipID], Color(100,100,100), GameAttributePlayersForTeam(lp_team));
    return true;
}

trigger auto_gf_createMiner_Trigger = null;
int auto_gf_createMiner_lp_team;

void gf_createMiner (int lp_team) {
    auto_gf_createMiner_lp_team = lp_team;

    if (auto_gf_createMiner_Trigger == null) {
        auto_gf_createMiner_Trigger = TriggerCreate("auto_gf_createMiner_TriggerFunc");
    }

    TriggerExecute(auto_gf_createMiner_Trigger, false, false);
}

bool auto_gf_createMiner_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_createMiner_lp_team;

    playergroup autoB6423189_g;
    int autoB6423189_p;
    int autoDF1248D2_ae;
    int autoDF1248D2_ai;

    // Variable Declarations
    int lv_id;
    int lv_p;
    int lv_a;

    // Variable Initialization

    // Implementation
    gv_buildingMiner[lp_team] = true;
    Wait(gv_emergencyminertime, c_timeGame);
    lv_id = gf_firstEmptySlot(lp_team);
    if ((lv_id == -1)) {
        UIDisplayMessage(GameAttributePlayersForTeam(lp_team), c_messageAreaSubtitle, StringExternal("Param/Value/8A83548D"));
    }
    else {
        UIDisplayMessage(GameAttributePlayersForTeam(lp_team), c_messageAreaSubtitle, StringExternal("Param/Value/FDD021F0"));
        libNtve_gf_SetDialogItemImage(gv_shipListImages[lv_id], gv_shiptypes[0].lv_buttonImage, GameAttributePlayersForTeam(lp_team));
        DialogControlSetVisible(gv_shipListImages[lv_id], GameAttributePlayersForTeam(lp_team), true);
        gv_shipList[lp_team][lv_id].lv_shipType = 0;
        gf_RemoveInventory(lv_id, lp_team);
        lib2_gf_CreateInventorySetup(lv_id, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_inventorySizeX, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_inventorySizeY, UnitFromId(8), "HangarInventory");
        autoB6423189_g = GameAttributePlayersForTeam(lp_team); 
        autoB6423189_p = 1;
        for ( ; autoB6423189_p <= PlayerGroupCount(autoB6423189_g) ; autoB6423189_p += BoolToInt(lv_p == PlayerGroupPlayer(autoB6423189_g, autoB6423189_p)) ) {
            lv_p = PlayerGroupPlayer(autoB6423189_g, autoB6423189_p);
            if ((gv_selectedShip[lv_p] == lv_id)) {
                DialogSetVisible(gv_shipPurchaseDialog, PlayerGroupSingle(lv_p), false);
                DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(lv_p), true);
                libNtve_gf_SetDialogItemText(gv_hangarDescription, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_description, PlayerGroupSingle(lv_p));
                libNtve_gf_SetDialogItemImage(gv_selectedShipImage, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_image, PlayerGroupSingle(lv_p));
                DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(lv_p), true);
                if ((DialogIsVisible(gv_hangarDialog, lv_p) == true)) {
                    gf_ShowHideInventory(true, lv_p);
                }
                else {
                    gf_ShowHideInventory(false, lv_p);
                }
                autoDF1248D2_ae = 15;
                autoDF1248D2_ai = 1;
                lv_a = 0;
                for ( ; ( (autoDF1248D2_ai >= 0 && lv_a <= autoDF1248D2_ae) || (autoDF1248D2_ai <= 0 && lv_a >= autoDF1248D2_ae) ) ; lv_a += autoDF1248D2_ai ) {
                    if ((gv_shipListButtons[lv_a] != c_invalidDialogControlId)) {
                        DialogControlSetEnabled(gv_shipListButtons[lv_a], PlayerGroupSingle(lv_p), true);
                    }
                    else {
                    }
                }
                DialogControlSetEnabled(gv_shipListButtons[lv_id], PlayerGroupSingle(lv_p), false);
            }
            else {
            }
        }
    }
    gv_buildingMiner[lp_team] = false;
    return true;
}

trigger auto_gf_createWraith_Trigger = null;
int auto_gf_createWraith_lp_team;

void gf_createWraith (int lp_team) {
    auto_gf_createWraith_lp_team = lp_team;

    if (auto_gf_createWraith_Trigger == null) {
        auto_gf_createWraith_Trigger = TriggerCreate("auto_gf_createWraith_TriggerFunc");
    }

    TriggerExecute(auto_gf_createWraith_Trigger, false, false);
}

bool auto_gf_createWraith_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_gf_createWraith_lp_team;

    playergroup auto80E26D21_g;
    int auto80E26D21_p;
    int autoA27BBEC0_ae;
    int autoA27BBEC0_ai;

    // Variable Declarations
    int lv_id;
    int lv_p;
    int lv_a;

    // Variable Initialization

    // Implementation
    gv_buildingWraith[lp_team] = true;
    Wait(gv_emergencyWraithtime, c_timeGame);
    lv_id = gf_firstEmptySlot(lp_team);
    if ((lv_id == -1)) {
        UIDisplayMessage(GameAttributePlayersForTeam(lp_team), c_messageAreaSubtitle, StringExternal("Param/Value/EC66D88D"));
    }
    else {
        UIDisplayMessage(GameAttributePlayersForTeam(lp_team), c_messageAreaSubtitle, StringExternal("Param/Value/80EAFE1A"));
        libNtve_gf_SetDialogItemImage(gv_shipListImages[lv_id], gv_shiptypes[1].lv_buttonImage, GameAttributePlayersForTeam(lp_team));
        DialogControlSetVisible(gv_shipListImages[lv_id], GameAttributePlayersForTeam(lp_team), true);
        gv_shipList[lp_team][lv_id].lv_shipType = 1;
        gf_RemoveInventory(lv_id, lp_team);
        lib2_gf_CreateInventorySetup(lv_id, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_inventorySizeX, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_inventorySizeY, UnitFromId(8), "HangarInventory");
        auto80E26D21_g = GameAttributePlayersForTeam(lp_team); 
        auto80E26D21_p = 1;
        for ( ; auto80E26D21_p <= PlayerGroupCount(auto80E26D21_g) ; auto80E26D21_p += BoolToInt(lv_p == PlayerGroupPlayer(auto80E26D21_g, auto80E26D21_p)) ) {
            lv_p = PlayerGroupPlayer(auto80E26D21_g, auto80E26D21_p);
            if ((gv_selectedShip[lv_p] == lv_id)) {
                DialogSetVisible(gv_shipPurchaseDialog, PlayerGroupSingle(lv_p), false);
                DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(lv_p), true);
                libNtve_gf_SetDialogItemText(gv_hangarDescription, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_description, PlayerGroupSingle(lv_p));
                libNtve_gf_SetDialogItemImage(gv_selectedShipImage, gv_shiptypes[gv_shipList[lp_team][lv_id].lv_shipType].lv_image, PlayerGroupSingle(lv_p));
                DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(lv_p), true);
                DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(lv_p), true);
                if ((DialogIsVisible(gv_hangarDialog, lv_p) == true)) {
                    gf_ShowHideInventory(true, lv_p);
                }
                else {
                    gf_ShowHideInventory(false, lv_p);
                }
                autoA27BBEC0_ae = 15;
                autoA27BBEC0_ai = 1;
                lv_a = 0;
                for ( ; ( (autoA27BBEC0_ai >= 0 && lv_a <= autoA27BBEC0_ae) || (autoA27BBEC0_ai <= 0 && lv_a >= autoA27BBEC0_ae) ) ; lv_a += autoA27BBEC0_ai ) {
                    if ((gv_shipListButtons[lv_a] != c_invalidDialogControlId)) {
                        DialogControlSetEnabled(gv_shipListButtons[lv_a], PlayerGroupSingle(lv_p), true);
                    }
                    else {
                    }
                }
                DialogControlSetEnabled(gv_shipListButtons[lv_id], PlayerGroupSingle(lv_p), false);
            }
            else {
            }
        }
    }
    gv_buildingWraith[lp_team] = false;
    return true;
}

void gf_createShip (int lp_team, int lp_type, int lp_slot) {
    playergroup auto47CE6EDD_g;
    int auto47CE6EDD_p;

    // Variable Declarations
    int lv_id;
    int lv_p;
    int lv_a;
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((gv_shipList[lp_team][lp_slot].lv_shipType != 20)) {
    }
    else {
    }
    gv_shipList[lp_team][lp_slot].lv_shipType = lp_type;
    gf_RemoveInventory(lp_slot, lp_team);
    lib2_gf_CreateInventorySetup(gf_getHangarInventory2(lp_slot, lp_team), gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_inventorySizeX, gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_inventorySizeY, UnitFromId(8), "HangarInventory");
    auto47CE6EDD_g = GameAttributePlayersForTeam(lp_team); 
    auto47CE6EDD_p = 1;
    for ( ; auto47CE6EDD_p <= PlayerGroupCount(auto47CE6EDD_g) ; auto47CE6EDD_p += BoolToInt(lv_p == PlayerGroupPlayer(auto47CE6EDD_g, auto47CE6EDD_p)) ) {
        lv_p = PlayerGroupPlayer(auto47CE6EDD_g, auto47CE6EDD_p);
        if ((lp_slot == gv_selectedShip[lv_p])) {
            DialogSetVisible(gv_shipPurchaseDialog, PlayerGroupSingle(lv_p), false);
            DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(lv_p), false);
            DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(lv_p), true);
            libNtve_gf_SetDialogItemText(gv_hangarDescription, gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_description, PlayerGroupSingle(lv_p));
            libNtve_gf_SetDialogItemText(gv_hangarName, (StringExternal("Param/Value/DFC395FC") + UnitTypeGetName(gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_unittype) + StringExternal("Param/Value/E1CB2CA4")), PlayerGroupSingle(lv_p));
            libNtve_gf_SetDialogItemImage(gv_selectedShipImage, gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_image, PlayerGroupSingle(lv_p));
            DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_salvageItemButton, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_salvageItemImage, PlayerGroupSingle(lv_p), true);
            DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(lv_p), true);
            libNtve_gf_SetDialogItemTooltip(gv_salvageItemButton, gf_CreateSalvageTooltip(gv_shipList[lp_team][lp_slot].lv_shipType, lv_p), PlayerGroupSingle(lv_p));
            if ((DialogIsVisible(gv_hangarDialog, lv_p) == true)) {
                gf_ShowHideInventory(true, lv_p);
            }
            else {
                gf_ShowHideInventory(false, lv_p);
            }
        }
        else {
        }
    }
    libNtve_gf_SetDialogItemImage(gv_shipListImages[lp_slot], gv_shiptypes[lp_type].lv_buttonImage, GameAttributePlayersForTeam(lp_team));
    DialogControlSetVisible(gv_shipListImages[lp_slot], GameAttributePlayersForTeam(lp_team), true);
}

void gf_removeShip (int lp_team, int lp_slot) {
    playergroup autoA04703D7_g;
    int autoA04703D7_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Implementation
    if ((lp_slot != -1)) {
        gv_shipList[lp_team][lp_slot].lv_shipType = 20;
        gv_shipList[lp_team][lp_slot].lv_status = 0;
        DialogControlSetVisible(gv_shipListImagesInspace[lp_slot], GameAttributePlayersForTeam(lp_team), false);
        DialogControlSetVisible(gv_shipListImages[lp_slot], GameAttributePlayersForTeam(lp_team), false);
        gf_RemoveInventory(lp_slot, lp_team);
        autoA04703D7_g = GameAttributePlayersForTeam(lp_team); 
        autoA04703D7_p = 1;
        for ( ; autoA04703D7_p <= PlayerGroupCount(autoA04703D7_g) ; autoA04703D7_p += BoolToInt(lv_p == PlayerGroupPlayer(autoA04703D7_g, autoA04703D7_p)) ) {
            lv_p = PlayerGroupPlayer(autoA04703D7_g, autoA04703D7_p);
            if ((lp_slot == gv_selectedShip[lv_p])) {
                libNtve_gf_SetDialogItemText(gv_hangarDescription, StringExternal("Param/Value/F1D14E70"), PlayerGroupSingle(lv_p));
                libNtve_gf_SetDialogItemText(gv_hangarName, StringExternal("Param/Value/3A2701CF"), PlayerGroupSingle(lv_p));
                DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_salvageItemButton, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_salvageItemImage, PlayerGroupSingle(lv_p), false);
                DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(lv_p), false);
                if ((DialogIsVisible(gv_hangarDialog, lv_p) == true)) {
                    DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(lv_p), true);
                }
                else {
                }
            }
            else {
            }
        }
    }
    else {
    }
}

void gf_destroyShip (int lp_team, int lp_slot) {
    int autoD48B9155_ae;
    int autoD48B9155_ai;
    int autoD54F1F82_ae;
    int autoD54F1F82_ai;

    // Variable Declarations
    int lv_p;
    int lv_x;
    int lv_y;
    string lv_removesuccess;

    // Variable Initialization

    // Implementation
    if ((lp_slot != -1)) {
        DialogControlSetVisible(gv_shipListImagesInspace[lp_slot], GameAttributePlayersForTeam(lp_team), false);
        gv_shipList[lp_team][lp_slot].lv_status = 0;
        autoD48B9155_ae = gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_inventorySizeX;
        autoD48B9155_ai = 1;
        lv_x = 1;
        for ( ; ( (autoD48B9155_ai >= 0 && lv_x <= autoD48B9155_ae) || (autoD48B9155_ai <= 0 && lv_x >= autoD48B9155_ae) ) ; lv_x += autoD48B9155_ai ) {
            autoD54F1F82_ae = gv_shiptypes[gv_shipList[lp_team][lp_slot].lv_shipType].lv_inventorySizeY;
            autoD54F1F82_ai = 1;
            lv_y = 1;
            for ( ; ( (autoD54F1F82_ai >= 0 && lv_y <= autoD54F1F82_ae) || (autoD54F1F82_ai <= 0 && lv_y >= autoD54F1F82_ae) ) ; lv_y += autoD54F1F82_ai ) {
                lv_removesuccess = lib2_gf_RemoveItemfromPosition(gf_getHangarInventory2(lp_slot, lp_team), (lv_x - 1), (lv_y - 1), 1, 1);
            }
        }
        gf_ReconstructShip(lp_slot, lp_team);
    }
    else {
    }
}

int gf_findShip (int lp_team, string lp_unit_type) {
    int autoEBC8FA1B_ae;
    int autoEBC8FA1B_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoEBC8FA1B_ae = ((gv_hangarcolumns * gv_hangarrows) - 1);
    autoEBC8FA1B_ai = 1;
    lv_i = 0;
    for ( ; ( (autoEBC8FA1B_ai >= 0 && lv_i <= autoEBC8FA1B_ae) || (autoEBC8FA1B_ai <= 0 && lv_i >= autoEBC8FA1B_ae) ) ; lv_i += autoEBC8FA1B_ai ) {
        if ((gv_shiptypes[gv_shipList[lp_team][lv_i].lv_shipType].lv_unittype == lp_unit_type)) {
            return lv_i;
        }
        else {
        }
    }
    return -1;
}

int gf_GetShipPrice (int lp_p, int lp_shiptype, int lp_mineraltype) {
    int auto736E34FB_val;

    // Variable Declarations
    fixed lv_cost;

    // Variable Initialization

    // Implementation
    auto736E34FB_val = lp_mineraltype;
    if (auto736E34FB_val == 0) {
        lv_cost = gv_shiptypes[lp_shiptype].lv_velditecost;
    }
    else if (auto736E34FB_val == 1) {
        lv_cost = gv_shiptypes[lp_shiptype].lv_chalcoriumcost;
    }
    else if (auto736E34FB_val == 2) {
        lv_cost = gv_shiptypes[lp_shiptype].lv_pyromanitecost;
    }
    else if (auto736E34FB_val == 3) {
        lv_cost = gv_shiptypes[lp_shiptype].lv_kermiculitecost;
    }
    else {
    }
    if ((TechTreeUpgradeCount(lp_p, "TierUtility3", c_techCountCompleteOnly) == 1)) {
        lv_cost *= 0.6;
    }
    else {
    }
    if ((TechTreeUpgradeCount(lp_p, "TierOffensive1", c_techCountCompleteOnly) == 1) && ((lp_shiptype == 1) || (lp_shiptype == 2))) {
        lv_cost *= 0.7;
    }
    else {
    }
    return FixedToInt(lv_cost);
}

void gf_ShowHideInventory (bool lp_showHide, int lp_player) {
    // Variable Declarations
    int lv_d;

    // Variable Initialization

    // Implementation
    lv_d = gf_getHangarInventory2(gv_selectedShip[lp_player], gf_GetPlayerTeam(lp_player));
    if ((lib2_gv_inventories[lv_d].lv_screen != c_invalidDialogId)) {
        DialogSetVisible(lib2_gv_inventories[lv_d].lv_screen, PlayerGroupSingle(lp_player), lp_showHide);
    }
    else {
    }
}

void gf_RemoveInventory (int lp_slot, int lp_team) {
    int auto4993E540_ae;
    int auto4993E540_ai;
    int autoCA5FC0D6_ae;
    int autoCA5FC0D6_ai;

    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_id;
    string lv_success;

    // Variable Initialization

    // Implementation
    lv_id = gf_getHangarInventory2(lp_slot, lp_team);
    if ((lib2_gv_inventories[lv_id].lv_screen != c_invalidDialogId)) {
        auto4993E540_ae = lib2_gv_inventories[lv_id].lv_sizeX;
        auto4993E540_ai = 1;
        lv_x = 0;
        for ( ; ( (auto4993E540_ai >= 0 && lv_x <= auto4993E540_ae) || (auto4993E540_ai <= 0 && lv_x >= auto4993E540_ae) ) ; lv_x += auto4993E540_ai ) {
            autoCA5FC0D6_ae = lib2_gv_inventories[lv_id].lv_sizeY;
            autoCA5FC0D6_ai = 1;
            lv_y = 0;
            for ( ; ( (autoCA5FC0D6_ai >= 0 && lv_y <= autoCA5FC0D6_ae) || (autoCA5FC0D6_ai <= 0 && lv_y >= autoCA5FC0D6_ae) ) ; lv_y += autoCA5FC0D6_ai ) {
                if ((lib2_gv_inventories[lv_id].lv_items[lv_x][lv_y] != null)) {
                    lv_success = lib2_gf_RemoveItemfromPosition(lv_id, lv_x, lv_y, 1, 1);
                }
                else {
                }
            }
        }
        DialogDestroy(lib2_gv_inventories[lv_id].lv_screen);
        lib2_gv_inventories[lv_id].lv_screen = c_invalidDialogId;
    }
    else {
    }
}

trigger auto_gf_Unexploreafterdelay_Trigger = null;
fixed auto_gf_Unexploreafterdelay_lp_delay;
int auto_gf_Unexploreafterdelay_lp_p;

void gf_Unexploreafterdelay (fixed lp_delay, int lp_p) {
    auto_gf_Unexploreafterdelay_lp_delay = lp_delay;
    auto_gf_Unexploreafterdelay_lp_p = lp_p;

    if (auto_gf_Unexploreafterdelay_Trigger == null) {
        auto_gf_Unexploreafterdelay_Trigger = TriggerCreate("auto_gf_Unexploreafterdelay_TriggerFunc");
    }

    TriggerExecute(auto_gf_Unexploreafterdelay_Trigger, false, false);
}

bool auto_gf_Unexploreafterdelay_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_gf_Unexploreafterdelay_lp_delay;
    int lp_p = auto_gf_Unexploreafterdelay_lp_p;

    // Implementation
    Wait(lp_delay, c_timeGame);
    VisExploreArea(lp_p, RegionEntireMap(), false, false);
    return true;
}

trigger auto_gf_Returntractorbeam_Trigger = null;
unit auto_gf_Returntractorbeam_lp_u;
fixed auto_gf_Returntractorbeam_lp_time;

void gf_Returntractorbeam (unit lp_u, fixed lp_time) {
    auto_gf_Returntractorbeam_lp_u = lp_u;
    auto_gf_Returntractorbeam_lp_time = lp_time;

    if (auto_gf_Returntractorbeam_Trigger == null) {
        auto_gf_Returntractorbeam_Trigger = TriggerCreate("auto_gf_Returntractorbeam_TriggerFunc");
    }

    TriggerExecute(auto_gf_Returntractorbeam_Trigger, false, false);
}

bool auto_gf_Returntractorbeam_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_Returntractorbeam_lp_u;
    fixed lp_time = auto_gf_Returntractorbeam_lp_time;

    // Implementation
    Wait(lp_time, c_timeGame);
    UnitGroupAdd(gv_tractorbeamreturningmissiles, lp_u);
    return true;
}

void gf_InitSensors () {
    // Implementation
    libNtve_gf_ShowHideUnit(UnitFromId(231), false);
    libNtve_gf_ShowHideUnit(UnitFromId(232), false);
}

trigger auto_gf_createKermiculite_Trigger = null;
point auto_gf_createKermiculite_lp_p;

void gf_createKermiculite (point lp_p) {
    auto_gf_createKermiculite_lp_p = lp_p;

    if (auto_gf_createKermiculite_Trigger == null) {
        auto_gf_createKermiculite_Trigger = TriggerCreate("auto_gf_createKermiculite_TriggerFunc");
    }

    TriggerExecute(auto_gf_createKermiculite_Trigger, false, false);
}

bool auto_gf_createKermiculite_TriggerFunc (bool testConds, bool runActions) {
    point lp_p = auto_gf_createKermiculite_lp_p;

    // Implementation
    gv_waitingForSpawn = true;
    Wait(30.0, c_timeReal);
    gv_kermGroup = gf_GenerateAsteroidField(4, 1, lp_p, false, true);
    gf_DisplayDirectiveMessage(StringExternal("Param/Value/BD729516"), PlayerGroupAll(), 5.0);
    gv_waitingForSpawn = false;
    return true;
}

string gf_IntToMineralName (int lp_id) {
    int auto4832008F_val;

    // Implementation
    auto4832008F_val = lp_id;
    if (auto4832008F_val == 1) {
        return "Veldite";
    }
    else if (auto4832008F_val == 2) {
        return "Chalcorium";
    }
    else if (auto4832008F_val == 3) {
        return "Pyromanite";
    }
    else if (auto4832008F_val == 4) {
        return "Kermiculite";
    }
    else {
        return "[Error: id doesn't correspond to a valid mineral type]";
    }
}

trigger auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_Trigger = null;
int auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argDialog;
unit auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argUnit;
int auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argHeightOffset;

void gf_AttachDialogToUnitWithAutohideOutOfScreen (int lp_argDialog, unit lp_argUnit, int lp_argHeightOffset) {
    auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argDialog = lp_argDialog;
    auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argUnit = lp_argUnit;
    auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argHeightOffset = lp_argHeightOffset;

    if (auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_Trigger == null) {
        auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_Trigger = TriggerCreate("auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_TriggerFunc");
    }

    TriggerExecute(auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_Trigger, false, false);
}

bool auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_TriggerFunc (bool testConds, bool runActions) {
    int lp_argDialog = auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argDialog;
    unit lp_argUnit = auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argUnit;
    int lp_argHeightOffset = auto_gf_AttachDialogToUnitWithAutohideOutOfScreen_lp_argHeightOffset;

    // Implementation
    DialogSetPositionRelativeToUnit(lp_argDialog, lp_argUnit, "Ref_Overhead", (DialogGetWidth(lp_argDialog) / -2), ((DialogGetHeight(lp_argDialog) * -1) - lp_argHeightOffset));
    while ((lp_argDialog != c_invalidDialogId)) {
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                if ((libNtve_gf_UnitIsVisibleToPlayer(lp_argUnit, PlayerGroupLoopCurrent()) == true) && (gf_IsDialogInsideScreenForPlayer(lp_argDialog, lp_argUnit, PlayerGroupLoopCurrent()) == true)) {
                    DialogSetVisible(lp_argDialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                }
                else {
                    DialogSetVisible(lp_argDialog, PlayerGroupSingle(PlayerGroupLoopCurrent()), false);
                }
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        Wait(0.1, c_timeGame);
    }
    return true;
}

bool gf_IsDialogInsideScreenForPlayer (int lp_argDialog, unit lp_argUnit, int lp_argPlayer) {
    // Variable Declarations
    fixed lv_angleBetweenUnitAndCam;
    fixed lv_distanceBetweenUnitAndCam;
    string lv_distanceBetweenUnitAndCamVector;
    string lv_distanceBetweenUnitAndCamNormalizedVector;
    fixed lv_distanceBetweenUnitAndCamY;
    fixed lv_distanceBetweenUnitAndCamX;
    fixed lv_playerCameraYaw;
    fixed lv_playerCameraPitch;
    point lv_playerCameraTargetPosition;
    fixed lv_cameraZ;
    fixed lv_cameraBaseLength;
    fixed lv_cameraTopAngle;
    fixed lv_blindTriangleTopAngleY;
    fixed lv_blindTriangleBaseLengthY;
    fixed lv_maxDistanceY;
    fixed lv_blindTriangleTopAngleX;
    fixed lv_blindTriangleBaseLengthX;
    fixed lv_maxDistanceX;

    // Variable Initialization
    lv_distanceBetweenUnitAndCamVector = "";
    lv_distanceBetweenUnitAndCamNormalizedVector = "";
    lv_playerCameraYaw = CameraGetYaw(lp_argPlayer);
    lv_playerCameraPitch = CameraGetPitch(lp_argPlayer);
    lv_playerCameraTargetPosition = CameraGetTarget(lp_argPlayer);

    // Implementation
    lv_angleBetweenUnitAndCam = AngleBetweenPoints(lv_playerCameraTargetPosition, UnitGetPosition(lp_argUnit));
    lv_distanceBetweenUnitAndCam = DistanceBetweenPoints(lv_playerCameraTargetPosition, UnitGetPosition(lp_argUnit));
    lv_cameraZ = (Sin(lv_playerCameraPitch) * gv_playersCameraDistance[lp_argPlayer]);
    lv_cameraBaseLength = (Cos(lv_playerCameraPitch) * gv_playersCameraDistance[lp_argPlayer]);
    lv_cameraTopAngle = (90.0 - lv_playerCameraPitch);
    lv_blindTriangleTopAngleX = (0.0 - ((gv_playersCameraFieldOfView[lp_argPlayer] / 2.0) * 0.5));
    lv_blindTriangleBaseLengthX = (Tan(lv_blindTriangleTopAngleX) * gv_playersCameraDistance[lp_argPlayer]);
    lv_maxDistanceX = (0.0 - lv_blindTriangleBaseLengthX);
    if ((lv_distanceBetweenUnitAndCamX > lv_maxDistanceX)) {
        lv_blindTriangleTopAngleY = (lv_cameraTopAngle - ((gv_playersCameraFieldOfView[lp_argPlayer] / 2.0) * 0.435));
    }
    else if ((lv_distanceBetweenUnitAndCamX < (-1.0 * lv_maxDistanceX))) {
        lv_blindTriangleTopAngleY = (lv_cameraTopAngle - ((gv_playersCameraFieldOfView[lp_argPlayer] / 2.0) * 0.475));
    }
    else if (true) {
        lv_blindTriangleTopAngleY = (lv_cameraTopAngle - ((gv_playersCameraFieldOfView[lp_argPlayer] / 2.0) * 0.6));
    }
    lv_blindTriangleBaseLengthY = (Tan(lv_blindTriangleTopAngleY) * lv_cameraZ);
    lv_maxDistanceY = (lv_cameraBaseLength - lv_blindTriangleBaseLengthY);
    if ((lv_distanceBetweenUnitAndCamY > lv_maxDistanceY)) {
        return false;
    }
    else {
        return true;
    }
}

int gf_GetHighestReputationPlayer () {
    playergroup auto376F5A3F_g;
    int auto376F5A3F_p;

    // Variable Declarations
    int lv_p;
    fixed lv_max;
    int lv_maxp;

    // Variable Initialization
    lv_max = -100000.0;

    // Implementation
    auto376F5A3F_g = PlayerGroupActive(); 
    auto376F5A3F_p = 1;
    for ( ; auto376F5A3F_p <= PlayerGroupCount(auto376F5A3F_g) ; auto376F5A3F_p += BoolToInt(lv_p == PlayerGroupPlayer(auto376F5A3F_g, auto376F5A3F_p)) ) {
        lv_p = PlayerGroupPlayer(auto376F5A3F_g, auto376F5A3F_p);
        if ((gv_reputation[lv_p] > lv_max)) {
            lv_max = gv_reputation[lv_p];
            lv_maxp = lv_p;
        }
        else {
        }
    }
    return lv_maxp;
}

color gf_MineralColor (int lp_type) {
    int autoF2B5C18A_val;

    // Implementation
    autoF2B5C18A_val = lp_type;
    if (autoF2B5C18A_val == 1) {
        return Color(100.00, 100.00, 0.00);
    }
    else if (autoF2B5C18A_val == 2) {
        return Color(0.00, 100.00, 100.00);
    }
    else if (autoF2B5C18A_val == 3) {
        return Color(100.00, 0.00, 0.00);
    }
    else if (autoF2B5C18A_val == 4) {
        return Color(0.00, 100.00, 0.00);
    }
    else {
        return Color(100.00, 100.00, 100.00);
    }
}

int gf_GetPlayerTeam (int lp_player) {
    // Implementation
    if (((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lp_player) == true) || (lp_player == 13))) {
        return 1;
    }
    else {
        if (((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), lp_player) == true) || (lp_player == 14))) {
            return 2;
        }
        else {
            return 0;
        }
    }
}

int gf_GetPlayerTeamAI (int lp_player) {
    // Implementation
    if (((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lp_player) == true) || (lp_player == 13))) {
        return 13;
    }
    else {
        return 14;
    }
}

point gf_PointBetweenPoints (point lp_p1, point lp_p2) {
    // Implementation
    return Point(((PointGetX(lp_p1) + PointGetX(lp_p2)) / 2.0), ((PointGetY(lp_p1) + PointGetY(lp_p2)) / 2.0));
}

trigger auto_gf_DisplayDirectiveMessage_Trigger = null;
text auto_gf_DisplayDirectiveMessage_lp_message;
playergroup auto_gf_DisplayDirectiveMessage_lp_players;
fixed auto_gf_DisplayDirectiveMessage_lp_time;

void gf_DisplayDirectiveMessage (text lp_message, playergroup lp_players, fixed lp_time) {
    auto_gf_DisplayDirectiveMessage_lp_message = lp_message;
    auto_gf_DisplayDirectiveMessage_lp_players = lp_players;
    auto_gf_DisplayDirectiveMessage_lp_time = lp_time;

    if (auto_gf_DisplayDirectiveMessage_Trigger == null) {
        auto_gf_DisplayDirectiveMessage_Trigger = TriggerCreate("auto_gf_DisplayDirectiveMessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisplayDirectiveMessage_Trigger, false, false);
}

bool auto_gf_DisplayDirectiveMessage_TriggerFunc (bool testConds, bool runActions) {
    text lp_message = auto_gf_DisplayDirectiveMessage_lp_message;
    playergroup lp_players = auto_gf_DisplayDirectiveMessage_lp_players;
    fixed lp_time = auto_gf_DisplayDirectiveMessage_lp_time;

    // Implementation
    UIDisplayMessage(lp_players, c_messageAreaDirective, lp_message);
    Wait(lp_time, c_timeGame);
    UIClearMessages(lp_players, c_messageAreaDirective);
    return true;
}

int gf_getRandomPlayerFromPG (playergroup lp_p_group) {
    // Implementation
    if ((PlayerGroupCount(lp_p_group) == 0)) {
        return 0;
    }
    else {
        return PlayerGroupPlayer(lp_p_group, RandomInt(1, PlayerGroupCount(lp_p_group)));
    }
}

playergroup gf_getActivePlayersOnTeam (int lp_team) {
    // Variable Declarations
    playergroup lv_p_group;

    // Variable Initialization
    lv_p_group = GameAttributePlayersForTeam(lp_team);

    // Implementation
    PlayerGroupLoopBegin(lv_p_group);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((PlayerStatus(PlayerGroupLoopCurrent()) != c_playerStatusActive) || (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusLeft) || (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeComputer))) {
            PlayerGroupRemove(lv_p_group, PlayerGroupLoopCurrent());
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_disconnectedplayers, lv_p_group);
    PlayerGroupAdd(lv_p_group, gf_GetPlayerTeamAI(lp_team));
    return lv_p_group;
}

unitgroup gf_getEnemyUnitsInUG (unitgroup lp_group, int lp_player) {
    unitgroup auto948B4A46_g;
    int auto948B4A46_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Implementation
    auto948B4A46_g = lp_group;
    auto948B4A46_u = 1;
    for ( ; auto948B4A46_u <= UnitGroupCount(auto948B4A46_g, c_unitCountAll) ; auto948B4A46_u += BoolToInt(lv_u == UnitGroupUnit(auto948B4A46_g, auto948B4A46_u)) ) {
        lv_u = UnitGroupUnit(auto948B4A46_g, auto948B4A46_u);
        if ((gf_GetPlayerTeam(lp_player) == gf_GetPlayerTeam(UnitGetOwner(lv_u)))) {
            UnitGroupRemove(lp_group, lv_u);
        }
        else {
        }
    }
    return lp_group;
}

unitgroup gf_getActiveConsolesInUG (unitgroup lp_group) {
    unitgroup auto311E32DD_g;
    int auto311E32DD_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Implementation
    auto311E32DD_g = lp_group;
    auto311E32DD_u = 1;
    for ( ; auto311E32DD_u <= UnitGroupCount(auto311E32DD_g, c_unitCountAll) ; auto311E32DD_u += BoolToInt(lv_u == UnitGroupUnit(auto311E32DD_g, auto311E32DD_u)) ) {
        lv_u = UnitGroupUnit(auto311E32DD_g, auto311E32DD_u);
        if (((UnitGetOwner(lv_u) == 13) || (UnitGetOwner(lv_u) == 14) || (UnitGetOwner(lv_u) == 0))) {
            UnitGroupRemove(lp_group, lv_u);
        }
        else {
        }
    }
    return lp_group;
}

region gf_getShipRegion (unit lp_u) {
    // Implementation
    if ((gf_GetPlayerTeam(UnitGetOwner(lp_u)) == 1)) {
        return gv_battlecruiserArea[1];
    }
    else {
        if ((gf_GetPlayerTeam(UnitGetOwner(lp_u)) == 2)) {
            return gv_battlecruiserArea[2];
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/D113FE72"), true);
    return null;
}

void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, 2);
    UIFlyerHelperOverride(lv_otherPlayers, 0);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

void gf_DestroyActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_immediate) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, 2);
    UIFlyerHelperOverride(lv_otherPlayers, 0);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_immediate == true)) {
        ActorSend(lv_agent, "Signal Destroy_Immediate");
    }
    else {
        ActorSend(lv_agent, "Signal Destroy_Normal");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

trigger auto_gf_CustomFadeInOut_Trigger = null;
int auto_gf_CustomFadeInOut_lp_player;
fixed auto_gf_CustomFadeInOut_lp_time;
fixed auto_gf_CustomFadeInOut_lp_start;
fixed auto_gf_CustomFadeInOut_lp_stop;
soundlink auto_gf_CustomFadeInOut_lp_sound;

void gf_CustomFadeInOut (int lp_player, fixed lp_time, fixed lp_start, fixed lp_stop, soundlink lp_sound) {
    auto_gf_CustomFadeInOut_lp_player = lp_player;
    auto_gf_CustomFadeInOut_lp_time = lp_time;
    auto_gf_CustomFadeInOut_lp_start = lp_start;
    auto_gf_CustomFadeInOut_lp_stop = lp_stop;
    auto_gf_CustomFadeInOut_lp_sound = lp_sound;

    if (auto_gf_CustomFadeInOut_Trigger == null) {
        auto_gf_CustomFadeInOut_Trigger = TriggerCreate("auto_gf_CustomFadeInOut_TriggerFunc");
    }

    TriggerExecute(auto_gf_CustomFadeInOut_Trigger, false, false);
}

bool auto_gf_CustomFadeInOut_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_CustomFadeInOut_lp_player;
    fixed lp_time = auto_gf_CustomFadeInOut_lp_time;
    fixed lp_start = auto_gf_CustomFadeInOut_lp_start;
    fixed lp_stop = auto_gf_CustomFadeInOut_lp_stop;
    soundlink lp_sound = auto_gf_CustomFadeInOut_lp_sound;

    fixed autoF263EE87_ae;
    fixed autoF263EE87_ai;

    // Variable Declarations
    fixed lv_i;

    // Variable Initialization

    // Implementation
    DialogSetTransparency(gv_powerdownoverlay[lp_player], lp_start);
    DialogSetVisible(gv_powerdownoverlay[lp_player], PlayerGroupSingle(lp_player), true);
    SoundPlay(lp_sound, PlayerGroupSingle(lp_player), 150.0, 0.0);
    if ((lp_start > lp_stop)) {
        autoF263EE87_ae = lp_stop;
        autoF263EE87_ai = ((lp_stop - lp_start) / (lp_time / 0.0625));
        lv_i = lp_start;
        for ( ; ( (autoF263EE87_ai >= 0 && lv_i <= autoF263EE87_ae) || (autoF263EE87_ai <= 0 && lv_i >= autoF263EE87_ae) ) ; lv_i += autoF263EE87_ai ) {
            DialogSetTransparency(gv_powerdownoverlay[lp_player], lv_i);
            Wait(0.0, c_timeGame);
        }
    }
    else {
    }
    return true;
}

trigger auto_gf_TimedLife_Trigger = null;
unit auto_gf_TimedLife_lp_unit;
fixed auto_gf_TimedLife_lp_delay;

void gf_TimedLife (unit lp_unit, fixed lp_delay) {
    auto_gf_TimedLife_lp_unit = lp_unit;
    auto_gf_TimedLife_lp_delay = lp_delay;

    if (auto_gf_TimedLife_Trigger == null) {
        auto_gf_TimedLife_Trigger = TriggerCreate("auto_gf_TimedLife_TriggerFunc");
    }

    TriggerExecute(auto_gf_TimedLife_Trigger, false, false);
}

bool auto_gf_TimedLife_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TimedLife_lp_unit;
    fixed lp_delay = auto_gf_TimedLife_lp_delay;

    // Implementation
    if ((gf_GetMissileidMissile(UnitGetType(lp_unit)) != -1)) {
        UnitBehaviorAdd(lp_unit, "MineSearchCollision", lp_unit, 1);
    }
    else {
    }
    UnitBehaviorAdd(lp_unit, "Collisiondetection", lp_unit, 1);
    Wait(lp_delay, c_timeGame);
    UnitKill(lp_unit);
    return true;
}

trigger auto_gf_TimedActorLife_Trigger = null;
actor auto_gf_TimedActorLife_lp_actor;
fixed auto_gf_TimedActorLife_lp_delay;

void gf_TimedActorLife (actor lp_actor, fixed lp_delay) {
    auto_gf_TimedActorLife_lp_actor = lp_actor;
    auto_gf_TimedActorLife_lp_delay = lp_delay;

    if (auto_gf_TimedActorLife_Trigger == null) {
        auto_gf_TimedActorLife_Trigger = TriggerCreate("auto_gf_TimedActorLife_TriggerFunc");
    }

    TriggerExecute(auto_gf_TimedActorLife_Trigger, false, false);
}

bool auto_gf_TimedActorLife_TriggerFunc (bool testConds, bool runActions) {
    actor lp_actor = auto_gf_TimedActorLife_lp_actor;
    fixed lp_delay = auto_gf_TimedActorLife_lp_delay;

    // Implementation
    Wait(lp_delay, c_timeGame);
    gf_DestroyActorForPlayerGroup(PlayerGroupAll(), lp_actor, true);
    return true;
}

int gf_GetPilotOwner (unit lp_u) {
    int auto2F0C7DAB_ae;
    int auto2F0C7DAB_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    auto2F0C7DAB_ae = 12;
    auto2F0C7DAB_ai = 1;
    lv_a = 1;
    for ( ; ( (auto2F0C7DAB_ai >= 0 && lv_a <= auto2F0C7DAB_ae) || (auto2F0C7DAB_ai <= 0 && lv_a >= auto2F0C7DAB_ae) ) ; lv_a += auto2F0C7DAB_ai ) {
        if ((gv_pilots[lv_a] == lp_u)) {
            return lv_a;
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/47D8C4AC"), true);
    return -1;
}

unitgroup gf_ItemsNotEquipped (unit lp_carryingunit) {
    unitgroup auto561DBB46_g;
    int auto561DBB46_u;

    // Variable Declarations
    unitgroup lv_ug;
    unit lv_u;

    // Variable Initialization
    lv_ug = UnitGroupEmpty();

    // Implementation
    lv_ug = UnitInventoryGroup(lp_carryingunit);
    auto561DBB46_g = UnitInventoryGroup(lp_carryingunit);
    auto561DBB46_u = 1;
    for ( ; auto561DBB46_u <= UnitGroupCount(auto561DBB46_g, c_unitCountAll) ; auto561DBB46_u += BoolToInt(lv_u == UnitGroupUnit(auto561DBB46_g, auto561DBB46_u)) ) {
        lv_u = UnitGroupUnit(auto561DBB46_g, auto561DBB46_u);
        if ((UnitInventorySlot(lv_u) <= 2)) {
            UnitGroupRemove(lv_ug, lv_u);
        }
        else {
        }
    }
    return lv_ug;
}

text gf_ColorRealRedGreenWhite (fixed lp_r) {
    // Implementation
    if ((lp_r > 0.0)) {
        return TextWithColor(FixedToText(lp_r, c_fixedPrecisionAny), Color(0.00, 100.00, 0.00));
    }
    else {
        if ((lp_r < 0.0)) {
            return TextWithColor(FixedToText(lp_r, c_fixedPrecisionAny), Color(100.00, 0.00, 0.00));
        }
        else {
            return FixedToText(lp_r, c_fixedPrecisionAny);
        }
    }
}

bool gf_IsReal (string lp_str) {
    int autoF5F039D2_ae;
    int autoF5F039D2_ai;

    // Variable Declarations
    int lv_a;
    bool lv_firstDot;
    string lv_sub;

    // Variable Initialization
    lv_firstDot = true;
    lv_sub = "";

    // Implementation
    autoF5F039D2_ae = StringLength(lp_str);
    autoF5F039D2_ai = 1;
    lv_a = 1;
    for ( ; ( (autoF5F039D2_ai >= 0 && lv_a <= autoF5F039D2_ae) || (autoF5F039D2_ai <= 0 && lv_a >= autoF5F039D2_ae) ) ; lv_a += autoF5F039D2_ai ) {
        lv_sub = StringSub(lp_str, lv_a, lv_a);
        if ((lv_sub != "1") && (lv_sub != "2") && (lv_sub != "3") && (lv_sub != "4") && (lv_sub != "5") && (lv_sub != "6") && (lv_sub != "7") && (lv_sub != "8") && (lv_sub != "9") && (lv_sub != "0") && (((lv_sub == ".") && (lv_firstDot == false)) || (lv_sub != "."))) {
            return false;
        }
        else {
            if ((lv_sub == ".")) {
                lv_firstDot = false;
            }
            else {
            }
        }
    }
    return true;
}

fixed gf_MapXofPoint (point lp_p) {
    // Implementation
    return (PointGetX(lp_p) - 8.0);
}

fixed gf_MapYofPoint (point lp_p) {
    // Implementation
    return (PointGetY(lp_p) - 140.0);
}

fixed gf_DistanceBetweenPointsCustom (point lp_p1, point lp_p2) {
    // Implementation
    return (Pow(Pow((PointGetX(lp_p1) - PointGetX(lp_p2)), 2.0) + Pow((PointGetY(lp_p1) - PointGetY(lp_p2)), 2.0),0.5));
}

text gf_ConvertPointToText (point lp_point) {
    // Implementation
    return (StringExternal("Param/Value/3D6987ED") + FixedToText(PointGetX(lp_point), c_fixedPrecisionAny) + StringExternal("Param/Value/35D85C77") + FixedToText(PointGetY(lp_point), c_fixedPrecisionAny) + StringExternal("Param/Value/0852C2FC"));
}

int gf_MiddleWeightedRandom (int lp_in, int lp_range) {
    // Implementation
    return ((0 - AbsI(lp_in)) + lp_range);
}

fixed gf_Minus (fixed lp_a) {
    // Implementation
    return (0.0 - lp_a);
}

fixed gf_AngleBetweenAngles (fixed lp_x, fixed lp_y) {
    // Implementation
    return MinF(AbsF((lp_x - lp_y)), (360.0 - AbsF((lp_x - lp_y))));
}

bool gf_useEnergy (fixed lp_amount, unit lp_ship) {
    // Implementation
    if ((UnitGetPropertyFixed(lp_ship, c_unitPropEnergy, c_unitPropCurrent) >= lp_amount)) {
        UnitSetPropertyFixed(lp_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lp_ship, c_unitPropEnergy, c_unitPropCurrent) - lp_amount));
        return true;
    }
    else {
        return false;
    }
}

bool gf_useWeaponEnergy (int lp_amount, unit lp_ship) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = gf_shipToIndex(lp_ship);
    if ((gv_energy_weapons_capacitor[lv_index] >= lp_amount)) {
        gv_energy_weapons_capacitor[lv_index] = (gv_energy_weapons_capacitor[lv_index] - lp_amount);
        return true;
    }
    else {
        return false;
    }
}

void gf_RandomPowerSurge (int lp_team) {
    int auto0D172FFD_val;

    // Variable Declarations
    const int lv_effects = 5;
    unit lv_u;
    fixed lv_speed;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = gf_shipToIndex(gv_battlecruisers[lp_team]);
    auto0D172FFD_val = RandomInt(1, lv_effects);
    if (auto0D172FFD_val == 1) {
        lv_u = UnitGroupRandomUnit(gf_getActiveConsolesInUG(UnitGroup(null, c_playerAny, gv_battlecruiserArea[lp_team], UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), c_unitCountAlive);
        if ((lv_u != null)) {
            if ((UnitHasBehavior(lv_u, "ConsoleDisconnectionCooldown") == false) && (gv_energy_core_stability[lv_index] <= 45.0)) {
                UnitBehaviorAdd(lv_u, "ConsoleDisconnectionCooldown", lv_u, 1);
                UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_u)), c_messageAreaDebug, StringExternal("Param/Value/C46BF571"));
                gf_LeaveConsole(UnitGetOwner(lv_u), gv_pilots[UnitGetOwner(lv_u)]);
            }
            else {
            }
        }
        else {
        }
    }
    else if (auto0D172FFD_val == 2) {
        if ((gv_poweredDown[lp_team] == false) && (gv_energy_core_stability[lv_index] <= 92.87)) {
            UIDisplayMessage(gv_players_inside[lp_team], c_messageAreaDebug, StringExternal("Param/Value/B2374A1C"));
            gf_Blackout(gv_players_inside[lp_team], 5.0);
        }
        else {
        }
    }
    else if (auto0D172FFD_val == 3) {
        if ((gv_energy_core_stability[lv_index] <= 65.0)) {
            lv_speed = gv_nav_speed[gf_shipToIndex(gv_battlecruisers[lp_team])];
            UIDisplayMessage(gv_players_inside[lp_team], c_messageAreaDebug, StringExternal("Param/Value/395DC6F3"));
            gv_nav_speed[gf_shipToIndex(gv_battlecruisers[lp_team])] = (lv_speed - RandomFixed((lv_speed / 4.0), (lv_speed / 2.0)));
        }
        else {
        }
    }
    else if (auto0D172FFD_val == 4) {
        if ((gv_energy_core_stability[lv_index] <= 80.0)) {
            UnitBehaviorAdd(UnitGroupRandomUnit(UnitGroup("WeaponsConsole", c_playerAny, gv_battlecruiserArea[lp_team], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "WeaponPowerSurge", UnitGroupRandomUnit(UnitGroup("WeaponsConsole", c_playerAny, gv_battlecruiserArea[lp_team], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), 1);
        }
        else {
        }
    }
    else if (auto0D172FFD_val == 5) {
        if ((gv_energy_core_stability[lv_index] <= 90.0)) {
            gv_energy_engine[lv_index] += RandomInt(0,1)*(10*RandomInt(1,2)-15);
            gv_energy_shields[lv_index] += RandomInt(0,1)*(10*RandomInt(1,2)-15);
            gv_energy_weapons[lv_index] += RandomInt(0,1)*(10*RandomInt(1,2)-15);
            if(gv_energy_engine[lv_index] < 0){
                gv_energy_engine[lv_index] = 0;
            }
            if(gv_energy_shields[lv_index] < 0){
                gv_energy_shields[lv_index] = 0;
            }
            if(gv_energy_weapons[lv_index] < -20){
                gv_energy_weapons[lv_index] = -20;
            }
            if ((gv_energy_core_stability[lv_index] <= 50.0)) {
                gv_energy_core_output[lv_index] += RandomInt(0,1)*(10*RandomInt(1,2)-15);
                if(gv_energy_core_output[lv_index] < 0){
                    gv_energy_core_output[lv_index] = 0;
                } else if(gv_energy_engine[lv_index] > 200){
                    gv_energy_engine[lv_index] = 200;
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
}

trigger auto_gf_Blackout_Trigger = null;
playergroup auto_gf_Blackout_lp_players;
fixed auto_gf_Blackout_lp_time;

void gf_Blackout (playergroup lp_players, fixed lp_time) {
    auto_gf_Blackout_lp_players = lp_players;
    auto_gf_Blackout_lp_time = lp_time;

    if (auto_gf_Blackout_Trigger == null) {
        auto_gf_Blackout_Trigger = TriggerCreate("auto_gf_Blackout_TriggerFunc");
    }

    TriggerExecute(auto_gf_Blackout_Trigger, false, false);
}

bool auto_gf_Blackout_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_gf_Blackout_lp_players;
    fixed lp_time = auto_gf_Blackout_lp_time;

    playergroup auto0C0FD092_g;
    int auto0C0FD092_p;
    fixed autoC4EE9A45_ae;
    fixed autoC4EE9A45_ai;
    playergroup auto617C2D7D_g;
    int auto617C2D7D_p;
    fixed autoA99896A0_ae;
    fixed autoA99896A0_ai;
    playergroup auto15D14B99_g;
    int auto15D14B99_p;
    playergroup auto18F12CB5_g;
    int auto18F12CB5_p;

    // Variable Declarations
    fixed lv_i;
    int lv_a;

    // Variable Initialization

    // Implementation
    if ((gv_poweredDown[gf_GetPlayerTeam(gf_getRandomPlayerFromPG(lp_players))] == false)) {
        gv_poweredDown[gf_GetPlayerTeam(gf_getRandomPlayerFromPG(lp_players))] = true;
        auto0C0FD092_g = lp_players; 
        auto0C0FD092_p = 1;
        for ( ; auto0C0FD092_p <= PlayerGroupCount(auto0C0FD092_g) ; auto0C0FD092_p += BoolToInt(lv_a == PlayerGroupPlayer(auto0C0FD092_g, auto0C0FD092_p)) ) {
            lv_a = PlayerGroupPlayer(auto0C0FD092_g, auto0C0FD092_p);
            if ((gv_powerdownoverlay[lv_a] != c_invalidDialogId)) {
                DialogSetTransparency(gv_powerdownoverlay[lv_a], 100.0);
                DialogSetVisible(gv_powerdownoverlay[lv_a], PlayerGroupSingle(lv_a), true);
            }
            else {
            }
        }
        SoundPlay(SoundLink("Purifier_PowerDown", -1), lp_players, 150.0, 0.0);
        autoC4EE9A45_ae = 20.0;
        autoC4EE9A45_ai = -5.0;
        lv_i = 90.0;
        for ( ; ( (autoC4EE9A45_ai >= 0 && lv_i <= autoC4EE9A45_ae) || (autoC4EE9A45_ai <= 0 && lv_i >= autoC4EE9A45_ae) ) ; lv_i += autoC4EE9A45_ai ) {
            auto617C2D7D_g = lp_players; 
            auto617C2D7D_p = 1;
            for ( ; auto617C2D7D_p <= PlayerGroupCount(auto617C2D7D_g) ; auto617C2D7D_p += BoolToInt(lv_a == PlayerGroupPlayer(auto617C2D7D_g, auto617C2D7D_p)) ) {
                lv_a = PlayerGroupPlayer(auto617C2D7D_g, auto617C2D7D_p);
                if ((gv_powerdownoverlay[lv_a] != c_invalidDialogId)) {
                    DialogSetTransparency(gv_powerdownoverlay[lv_a], lv_i);
                }
                else {
                }
            }
            Wait(0.0, c_timeGame);
        }
        Wait(lp_time, c_timeGame);
        SoundPlay(SoundLink("Purifier_PowerUp", -1), lp_players, 150.0, 0.0);
        autoA99896A0_ae = 100.0;
        autoA99896A0_ai = 5.0;
        lv_i = 20.0;
        for ( ; ( (autoA99896A0_ai >= 0 && lv_i <= autoA99896A0_ae) || (autoA99896A0_ai <= 0 && lv_i >= autoA99896A0_ae) ) ; lv_i += autoA99896A0_ai ) {
            auto15D14B99_g = lp_players; 
            auto15D14B99_p = 1;
            for ( ; auto15D14B99_p <= PlayerGroupCount(auto15D14B99_g) ; auto15D14B99_p += BoolToInt(lv_a == PlayerGroupPlayer(auto15D14B99_g, auto15D14B99_p)) ) {
                lv_a = PlayerGroupPlayer(auto15D14B99_g, auto15D14B99_p);
                if ((gv_powerdownoverlay[lv_a] != c_invalidDialogId)) {
                    DialogSetTransparency(gv_powerdownoverlay[lv_a], lv_i);
                }
                else {
                }
            }
            Wait(0.0, c_timeGame);
        }
        auto18F12CB5_g = lp_players; 
        auto18F12CB5_p = 1;
        for ( ; auto18F12CB5_p <= PlayerGroupCount(auto18F12CB5_g) ; auto18F12CB5_p += BoolToInt(lv_a == PlayerGroupPlayer(auto18F12CB5_g, auto18F12CB5_p)) ) {
            lv_a = PlayerGroupPlayer(auto18F12CB5_g, auto18F12CB5_p);
            if ((gv_powerdownoverlay[lv_a] != c_invalidDialogId)) {
                DialogSetVisible(gv_powerdownoverlay[lv_a], lp_players, false);
            }
            else {
            }
        }
        gv_poweredDown[gf_GetPlayerTeam(gf_getRandomPlayerFromPG(lp_players))] = false;
    }
    else {
    }
    return true;
}

trigger auto_gf_SplitScorpionLightMissile_Trigger = null;
unit auto_gf_SplitScorpionLightMissile_lp_u;
int auto_gf_SplitScorpionLightMissile_lp_p;

void gf_SplitScorpionLightMissile (unit lp_u, int lp_p) {
    auto_gf_SplitScorpionLightMissile_lp_u = lp_u;
    auto_gf_SplitScorpionLightMissile_lp_p = lp_p;

    if (auto_gf_SplitScorpionLightMissile_Trigger == null) {
        auto_gf_SplitScorpionLightMissile_Trigger = TriggerCreate("auto_gf_SplitScorpionLightMissile_TriggerFunc");
    }

    TriggerExecute(auto_gf_SplitScorpionLightMissile_Trigger, false, false);
}

bool auto_gf_SplitScorpionLightMissile_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_SplitScorpionLightMissile_lp_u;
    int lp_p = auto_gf_SplitScorpionLightMissile_lp_p;

    int auto02F1FAEF_ae;
    int auto02F1FAEF_ai;

    // Variable Declarations
    int lv_i;
    fixed lv_a;
    fixed lv_b;
    point lv_p;

    // Variable Initialization

    // Implementation
    lv_p = UnitGetPosition(lp_u);
    lv_a = UnitGetCustomValue(lp_u, 7);
    lv_b = UnitGetCustomValue(lp_u, 8);
    UnitKill(lp_u);
    auto02F1FAEF_ae = 316;
    auto02F1FAEF_ai = 22;
    lv_i = 0;
    for ( ; ( (auto02F1FAEF_ai >= 0 && lv_i <= auto02F1FAEF_ae) || (auto02F1FAEF_ai <= 0 && lv_i >= auto02F1FAEF_ae) ) ; lv_i += auto02F1FAEF_ai ) {
        UnitCreate(1, "ScorpionLightMissile", c_unitCreateIgnorePlacement, lp_p, lv_p, (IntToFixed(lv_i) + UnitGetFacing(lp_u)));
        UnitSetCustomValue(UnitLastCreated(), 7, lv_a);
        UnitSetCustomValue(UnitLastCreated(), 8, lv_b);
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForcePolar(UnitLastCreated(), 20.0, (IntToFixed(lv_i) + UnitGetFacing(lp_u)));
        gf_TimedLife(UnitLastCreated(), 5.0);
        UnitBehaviorRemove(UnitLastCreated(), "ScorpionLightMissileSplit", 1);
        Wait(0.05, c_timeGame);
    }
    return true;
}

trigger auto_gf_Rushtowardspoint_Trigger = null;
unit auto_gf_Rushtowardspoint_lp_u;
unit auto_gf_Rushtowardspoint_lp_nav;
point auto_gf_Rushtowardspoint_lp_p;

void gf_Rushtowardspoint (unit lp_u, unit lp_nav, point lp_p) {
    auto_gf_Rushtowardspoint_lp_u = lp_u;
    auto_gf_Rushtowardspoint_lp_nav = lp_nav;
    auto_gf_Rushtowardspoint_lp_p = lp_p;

    if (auto_gf_Rushtowardspoint_Trigger == null) {
        auto_gf_Rushtowardspoint_Trigger = TriggerCreate("auto_gf_Rushtowardspoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_Rushtowardspoint_Trigger, false, false);
}

bool auto_gf_Rushtowardspoint_TriggerFunc (bool testConds, bool runActions) {
    unit lp_u = auto_gf_Rushtowardspoint_lp_u;
    unit lp_nav = auto_gf_Rushtowardspoint_lp_nav;
    point lp_p = auto_gf_Rushtowardspoint_lp_p;

    // Variable Declarations
    const fixed lv_speed = 0.5;
    point lv_currpos;

    // Variable Initialization

    // Implementation
    lv_currpos = UnitGetPosition(lp_u);
    while ((DistanceBetweenPoints(lv_currpos, lp_p) > 0.1) && (UnitHasBehavior(lp_u, "PhotonRush") == true)) {
        lv_currpos = PointWithOffsetPolar(lv_currpos, MinF(lv_speed, DistanceBetweenPoints(lv_currpos, lp_p)), AngleBetweenPoints(lv_currpos, lp_p));
        UnitSetPosition(lp_u, lv_currpos, true);
        Wait(0.05, c_timeGame);
    }
    UnitBehaviorRemove(lp_u, "PhotonRush", 1);
    UnitBehaviorRemove(lp_u, "IgnoreCollision", 1);
    libNtve_gf_MakeUnitUncommandable(lp_nav, false);
    return true;
}

void gf_RegisterCollision (unit lp_u) {
    // Implementation
    if ((UnitGroupHasUnit(gv_collisiongroup, lp_u) == false)) {
        UnitGroupAdd(gv_collisiongroup, lp_u);
    }
    else {
    }
}

void gf_UnregisterCollision (unit lp_u) {
    // Implementation
    if ((UnitGroupHasUnit(gv_collisiongroup, lp_u) == true)) {
        UnitGroupRemove(gv_collisiongroup, lp_u);
    }
    else {
    }
}

void gf_RegisterShipNavigation (unit lp_ship) {
    int autoB9A1085F_ae;
    int autoB9A1085F_ai;
    string autoB908D319_val;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoB9A1085F_ae = 23;
    autoB9A1085F_ai = 1;
    lv_i = 0;
    for ( ; ( (autoB9A1085F_ai >= 0 && lv_i <= autoB9A1085F_ae) || (autoB9A1085F_ai <= 0 && lv_i >= autoB9A1085F_ae) ) ; lv_i += autoB9A1085F_ai ) {
        if ((gv_nav_ships[lv_i] == null)) {
            gv_nav_ships[lv_i] = lp_ship;
            gf_RegisterCollision(lp_ship);
            gf_RegisterPhysics(lp_ship);
            UnitBehaviorAdd(lp_ship, "MineSearch", lp_ship, 1);
            UnitRemove(gv_nav_camera_offset[gf_shipToIndex(lp_ship)]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShapePineapple", c_unitCreateIgnorePlacement, UnitGetOwner(lp_ship), PointWithOffsetPolar(UnitGetPosition(lp_ship), 1.75, 270.0));
            gv_nav_camera_offset[lv_i] = UnitLastCreated();
            autoB908D319_val = UnitGetType(lp_ship);
            if (autoB908D319_val == "Medivac") {
                UnitCreate(1, "NavigatorMiner", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 15;
            }
            else if (autoB908D319_val == "Wraith") {
                UnitCreate(1, "NavigatorWraith", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 15;
            }
            else if (autoB908D319_val == "HelsAngelFighter") {
                UnitCreate(1, "NavigatorInfiltrator", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 20;
            }
            else if (autoB908D319_val == "Corvette") {
                UnitCreate(1, "NavigatorCorvette", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 25;
            }
            else if (autoB908D319_val == "Destroyer") {
                UnitCreate(1, "NavigatorDestroyer", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 30;
            }
            else if (autoB908D319_val == "Chomper") {
                UnitCreate(1, "NavigatorChomper", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 20;
            }
            else if (autoB908D319_val == "Minelayer") {
                UnitCreate(1, "NavigatorMinelayer", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 25;
            }
            else if (autoB908D319_val == "Subjugator") {
                UnitCreate(1, "NavigatorSubjugator", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 25;
            }
            else if (autoB908D319_val == "Battlecruiser") {
                UnitCreate(1, "NavigatorBattlecruiser", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
                gv_energy_engine[lv_i] = 100;
            }
            else {
                UnitCreate(1, "Navigator", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_nav_navigator_regions[lv_i]), 270.0);
            }
            gv_nav_navigators[lv_i] = UnitLastCreated();
            return ;
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/900A87EF"), true);
}

void gf_UnregisterShipNavigation (unit lp_ship) {
    int autoC141FEE0_ae;
    int autoC141FEE0_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoC141FEE0_ae = 23;
    autoC141FEE0_ai = 1;
    lv_i = 0;
    for ( ; ( (autoC141FEE0_ai >= 0 && lv_i <= autoC141FEE0_ae) || (autoC141FEE0_ai <= 0 && lv_i >= autoC141FEE0_ae) ) ; lv_i += autoC141FEE0_ai ) {
        if (((gv_nav_ships[lv_i] == lp_ship) || ((lp_ship == null) && (gv_nav_navigators[lv_i] != null) && (gv_nav_ships[lv_i] != null)))) {
            UnitRemove(gv_nav_camera_offset[lv_i]);
            gv_nav_camera_offset[lv_i] = null;
            UnitRemove(gv_nav_navigators[lv_i]);
            gv_nav_navigators[lv_i] = null;
            gf_UnregisterCollision(lp_ship);
            gf_UnregisterPhysics(lp_ship);
            gv_nav_ships[lv_i] = null;
            return ;
        }
        else {
        }
    }
}

void gf_InitNavigation () {
    // Variable Declarations
    int lv_tmp;
    unit lv_unit;

    // Variable Initialization

    // Implementation
    gv_nav_navigator_regions[0] = RegionFromId(4);
    gv_nav_navigator_regions[1] = RegionFromId(5);
    gv_nav_navigator_regions[2] = RegionFromId(6);
    gv_nav_navigator_regions[3] = RegionFromId(7);
    gv_nav_navigator_regions[4] = RegionFromId(8);
    gv_nav_navigator_regions[5] = RegionFromId(9);
    gv_nav_navigator_regions[6] = RegionFromId(10);
    gv_nav_navigator_regions[7] = RegionFromId(11);
    gv_nav_navigator_regions[8] = RegionFromId(12);
    gv_nav_navigator_regions[9] = RegionFromId(13);
    gv_nav_navigator_regions[10] = RegionFromId(14);
    gv_nav_navigator_regions[11] = RegionFromId(15);
    gv_nav_navigator_regions[12] = RegionFromId(59);
    gv_nav_navigator_regions[13] = RegionFromId(60);
    gv_nav_navigator_regions[14] = RegionFromId(65);
    gv_nav_navigator_regions[15] = RegionFromId(66);
    gv_nav_navigator_regions[16] = RegionFromId(67);
    gv_nav_navigator_regions[17] = RegionFromId(68);
    gv_nav_navigator_regions[18] = RegionFromId(69);
    gv_nav_navigator_regions[19] = RegionFromId(70);
    gv_nav_navigator_regions[20] = RegionFromId(71);
    gv_nav_navigator_regions[21] = RegionFromId(72);
    gv_nav_navigator_regions[22] = RegionFromId(73);
    gv_nav_navigator_regions[23] = RegionFromId(74);
    gf_RegisterShipNavigation(gv_battlecruisers[1]);
    gf_RegisterShipNavigation(gv_battlecruisers[2]);
}

int gf_shipToIndex (unit lp_ship) {
    int auto1AC34BF6_ae;
    int auto1AC34BF6_ai;

    // Variable Declarations
    int lv_tmp;

    // Variable Initialization

    // Implementation
    auto1AC34BF6_ae = 23;
    auto1AC34BF6_ai = 1;
    lv_tmp = 0;
    for ( ; ( (auto1AC34BF6_ai >= 0 && lv_tmp <= auto1AC34BF6_ae) || (auto1AC34BF6_ai <= 0 && lv_tmp >= auto1AC34BF6_ae) ) ; lv_tmp += auto1AC34BF6_ai ) {
        if ((gv_nav_ships[lv_tmp] == lp_ship)) {
            return lv_tmp;
        }
        else {
        }
    }
    return -1;
}

region gf_shipToRegion (unit lp_spaceship) {
    // Implementation
    if ((lp_spaceship == UnitFromId(3))) {
        return RegionFromId(2);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/315DC4A5"), true);
    return null;
}

unit gf_shipToNavigator (unit lp_spaceship) {
    // Variable Declarations
    int lv_tmp;

    // Variable Initialization

    // Implementation
    if ((gf_shipToIndex(lp_spaceship) == -1)) {
        return null;
    }
    else {
        return gv_nav_navigators[gf_shipToIndex(lp_spaceship)];
    }
}

unit gf_navigatorToShip (unit lp_navigator) {
    int auto956653BC_ae;
    int auto956653BC_ai;

    // Variable Declarations
    int lv_tmp;

    // Variable Initialization

    // Implementation
    auto956653BC_ae = 23;
    auto956653BC_ai = 1;
    lv_tmp = 0;
    for ( ; ( (auto956653BC_ai >= 0 && lv_tmp <= auto956653BC_ae) || (auto956653BC_ai <= 0 && lv_tmp >= auto956653BC_ae) ) ; lv_tmp += auto956653BC_ai ) {
        if ((gv_nav_navigators[lv_tmp] == lp_navigator)) {
            return gv_nav_ships[lv_tmp];
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/7126B686"), true);
    return null;
}

int gf_navigatorToIndex (unit lp_navigator) {
    int autoADA92769_ae;
    int autoADA92769_ai;

    // Variable Declarations
    int lv_tmp;

    // Variable Initialization

    // Implementation
    autoADA92769_ae = 23;
    autoADA92769_ai = 1;
    lv_tmp = 0;
    for ( ; ( (autoADA92769_ai >= 0 && lv_tmp <= autoADA92769_ae) || (autoADA92769_ai <= 0 && lv_tmp >= autoADA92769_ae) ) ; lv_tmp += autoADA92769_ai ) {
        if ((gv_nav_navigators[lv_tmp] == lp_navigator)) {
            return lv_tmp;
        }
        else {
        }
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/330A0A59"), true);
    return -1;
}

int gf_PlayerToIndex (int lp_player, bool lp_supress) {
    int autoD5786659_ae;
    int autoD5786659_ai;

    // Variable Declarations
    int lv_tmp;

    // Variable Initialization

    // Implementation
    autoD5786659_ae = 23;
    autoD5786659_ai = 1;
    lv_tmp = 0;
    for ( ; ( (autoD5786659_ai >= 0 && lv_tmp <= autoD5786659_ae) || (autoD5786659_ai <= 0 && lv_tmp >= autoD5786659_ae) ) ; lv_tmp += autoD5786659_ai ) {
        if ((UnitGroupCount(UnitGroup(null, lp_player, gv_nav_navigator_regions[lv_tmp], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) != 0)) {
            return lv_tmp;
        }
        else {
        }
    }
    if ((lp_supress == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/35F1DFBD"), true);
    }
    else {
    }
    return -1;
}

int gf_getSpeedCost (unit lp_unit) {
    string auto6C2DC381_val;

    // Variable Declarations
    int lv_cost;

    // Variable Initialization

    // Implementation
    auto6C2DC381_val = UnitGetType(lp_unit);
    if (auto6C2DC381_val == "Battlecruiser") {
        lv_cost = 5;
    }
    else {
        lv_cost = 1;
    }
    return lv_cost;
}

string gf_getSpeedBuff (unit lp_unit) {
    string auto4D29C0AC_val;

    // Variable Declarations
    string lv_buff;

    // Variable Initialization

    // Implementation
    auto4D29C0AC_val = UnitGetType(lp_unit);
    if (auto4D29C0AC_val == "Battlecruiser") {
        lv_buff = "Speed";
    }
    else if (auto4D29C0AC_val == "Wraith") {
        lv_buff = "SpeedWraith";
    }
    else if (auto4D29C0AC_val == "Chomper") {
        lv_buff = "SpeedChomper";
    }
    else if (auto4D29C0AC_val == "Corvette") {
        lv_buff = "SpeedCorvette";
    }
    else {
        lv_buff = "Speed2";
    }
    return lv_buff;
}

void gf_PhysicsSetMass (unit lp_unit, fixed lp_mass) {
    // Implementation
    UnitSetCustomValue(lp_unit, 5, lp_mass);
}

fixed gf_PhysicsGetMass (unit lp_unit) {
    // Implementation
    return UnitGetCustomValue(lp_unit, 5);
}

fixed gf_PhysicsGetSpeed (unit lp_unit) {
    // Implementation
    return gf_VectorMagnitude(UnitGetCustomValue(lp_unit, 1), UnitGetCustomValue(lp_unit, 2));
}

fixed gf_PhysicsGetSpeed2 (unit lp_unit) {
    // Implementation
    return (AbsF(UnitGetCustomValue(lp_unit, 1)) + AbsF(UnitGetCustomValue(lp_unit, 2)));
}

fixed gf_PhysicsGetDirection (unit lp_unit) {
    // Implementation
    return ATan2(UnitGetCustomValue(lp_unit, 2), UnitGetCustomValue(lp_unit, 1));
}

void gf_PhysicsSetFriction (unit lp_unit, fixed lp_friction) {
    // Implementation
    UnitSetCustomValue(lp_unit, 4, lp_friction);
}

fixed gf_PhysicsGetFriction (unit lp_unit) {
    // Implementation
    return UnitGetCustomValue(lp_unit, 4);
}

fixed gf_PhysicsGetDefaultMass (unit lp_unit) {
    string auto2949984E_val;

    // Variable Declarations
    fixed lv_mass;

    // Variable Initialization
    lv_mass = 1.0;

    // Implementation
    auto2949984E_val = UnitGetType(lp_unit);
    if (auto2949984E_val == "Medivac") {
        lv_mass = 60.0;
    }
    else if (auto2949984E_val == "Wraith") {
        lv_mass = 70.0;
    }
    else if (auto2949984E_val == "HelsAngelFighter") {
        lv_mass = 55.0;
    }
    else if (auto2949984E_val == "Corvette") {
        lv_mass = 110.0;
    }
    else if (auto2949984E_val == "Destroyer") {
        lv_mass = 250.0;
    }
    else if (auto2949984E_val == "Minelayer") {
        lv_mass = 120.0;
    }
    else if (auto2949984E_val == "Chomper") {
        lv_mass = 180.0;
    }
    else if (auto2949984E_val == "Subjugator") {
        lv_mass = 140.0;
    }
    else if (auto2949984E_val == "Asteroid1") {
        lv_mass = 65.0;
    }
    else if (auto2949984E_val == "Asteroid2") {
        lv_mass = 90.0;
    }
    else if (auto2949984E_val == "Asteroid3") {
        lv_mass = 40.0;
    }
    else if (auto2949984E_val == "Asteroid4") {
        lv_mass = 75.0;
    }
    else if (auto2949984E_val == "Asteroid5") {
        lv_mass = 100.0;
    }
    else if (auto2949984E_val == "Asteroid6") {
        lv_mass = 60.0;
    }
    else if (auto2949984E_val == "AsteroidMineralVent") {
        lv_mass = 60.0;
    }
    else if (auto2949984E_val == "AsteroidMineralVentOld") {
        lv_mass = 40.0;
    }
    else if (auto2949984E_val == "Battlecruiser") {
        lv_mass = 1000.0;
    }
    else {
    }
    return lv_mass;
}

fixed gf_PhysicsGetDefaultFriction (unit lp_unit) {
    string auto9B586615_val;

    // Variable Declarations
    fixed lv_friction;

    // Variable Initialization
    lv_friction = 1.0;

    // Implementation
    if ((UnitFilterMatch(lp_unit, UnitGetOwner(lp_unit), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitGetPropertyFixed(lp_unit, c_unitPropTurnRate, c_unitPropCurrent) > 0.0)) {
        lv_friction = 0.5;
    }
    else {
    }
    auto9B586615_val = UnitGetType(lp_unit);
    if (auto9B586615_val == "Medivac") {
        lv_friction = 0.94;
    }
    else if (auto9B586615_val == "Wraith") {
        lv_friction = 0.94;
    }
    else if (auto9B586615_val == "HelsAngelFighter") {
        lv_friction = 0.94;
    }
    else if (auto9B586615_val == "Corvette") {
        lv_friction = 0.94;
    }
    else if (auto9B586615_val == "Chomper") {
        lv_friction = 0.94;
    }
    else if (auto9B586615_val == "Minelayer") {
        lv_friction = 0.94;
    }
    else if (auto9B586615_val == "Destroyer") {
        lv_friction = 0.95;
    }
    else if (auto9B586615_val == "Subjugator") {
        lv_friction = 0.95;
    }
    else if (auto9B586615_val == "Battlecruiser") {
        lv_friction = 0.965;
    }
    else if (auto9B586615_val == "Asteroid1") {
        lv_friction = 0.98;
    }
    else if (auto9B586615_val == "Asteroid2") {
        lv_friction = 0.98;
    }
    else if (auto9B586615_val == "Asteroid3") {
        lv_friction = 0.98;
    }
    else if (auto9B586615_val == "Asteroid4") {
        lv_friction = 0.98;
    }
    else if (auto9B586615_val == "Asteroid5") {
        lv_friction = 0.98;
    }
    else if (auto9B586615_val == "Asteroid6") {
        lv_friction = 0.98;
    }
    else if (auto9B586615_val == "AsteroidMineralVentOld") {
        lv_friction = 0.96;
    }
    else if (auto9B586615_val == "AsteroidMineralVent") {
        lv_friction = 0.96;
    }
    else if (auto9B586615_val == "OpposerProximityMine") {
        lv_friction = 0.5;
    }
    else if (auto9B586615_val == "PiranhaLightMissile") {
        lv_friction = 0.5;
    }
    else if (auto9B586615_val == "EMPMine2") {
        lv_friction = 0.5;
    }
    else {
    }
    return lv_friction;
}

void gf_RegisterPhysics (unit lp_u) {
    // Implementation
    if ((UnitGroupHasUnit(gv_physicgroup, lp_u) == false) && (UnitGroupHasUnit(gv_physicasteroids, lp_u) == false)) {
        gf_PhysicsSetMass(lp_u, gf_PhysicsGetDefaultMass(lp_u));
        gf_PhysicsSetFriction(lp_u, gf_PhysicsGetDefaultFriction(lp_u));
        UnitGroupAdd(gv_physicgroup, lp_u);
        if (((UnitTypeTestAttribute(UnitGetType(lp_u), c_unitAttributeHover) == true) || (UnitGetType(lp_u) == "DecoyFlare"))) {
            UnitGroupAdd(gv_physicasteroids, lp_u);
            UnitGroupRemove(gv_physicgroup, lp_u);
        }
        else {
            if ((UnitFilterMatch(lp_u, UnitGetOwner(lp_u), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                UnitGroupAdd(gv_physiccolliders, lp_u);
            }
            else {
            }
        }
    }
    else {
    }
}

void gf_UnregisterPhysics (unit lp_u) {
    // Implementation
    if ((UnitGroupHasUnit(gv_physicgroup, lp_u) == true)) {
        UnitGroupRemove(gv_physicgroup, lp_u);
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_physicasteroids, lp_u) == true)) {
        UnitGroupRemove(gv_physicasteroids, lp_u);
    }
    else {
    }
    if ((UnitGroupHasUnit(gv_physiccolliders, lp_u) == true)) {
        UnitGroupRemove(gv_physiccolliders, lp_u);
    }
    else {
    }
}

fixed gf_PhysicsDistance3D (unit lp_unit1, unit lp_unit2) {
    // Implementation
    return SquareRoot((Pow((PointGetX(UnitGetPosition(lp_unit1)) - PointGetX(UnitGetPosition(lp_unit2))), 2.0) + (Pow((PointGetY(UnitGetPosition(lp_unit1)) - PointGetY(UnitGetPosition(lp_unit2))), 2.0) + Pow((UnitGetPropertyFixed(lp_unit1, c_unitPropHeight, c_unitPropCurrent) - UnitGetPropertyFixed(lp_unit2, c_unitPropHeight, c_unitPropCurrent)), 2.0))));
}

fixed gf_VectorMagnitude (fixed lp_vectorX, fixed lp_vectorY) {
    // Implementation
    return SquareRoot((Pow(lp_vectorX, 2.0) + Pow(lp_vectorY, 2.0)));
}

fixed gf_DotProduct (fixed lp_x1, fixed lp_y1, fixed lp_x2, fixed lp_y2) {
    // Implementation
    return ((lp_x1 * lp_x2) + (lp_y1 * lp_y2));
}

void gf_PhysicsCollision (unit lp_object1, unit lp_object2) {
    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_object1), c_unitAttributeHover) == true)) {
        UnitGroupAdd(gv_physicgroup, lp_object1);
    }
    else {
    }
    if ((UnitTypeTestAttribute(UnitGetType(lp_object2), c_unitAttributeHover) == true)) {
        UnitGroupAdd(gv_physicgroup, lp_object2);
    }
    else {
    }
    if ((gf_GetPlayerTeam(UnitGetOwner(lp_object1)) == gf_GetPlayerTeam(UnitGetOwner(lp_object2))) && ((UnitBehaviorDuration(lp_object1, "RecentlyLaunched") > 8.0) || (UnitBehaviorDuration(lp_object2, "RecentlyLaunched") > 8.0))) {
        return ;
    }
    else {
    }
    if (((UnitHasBehavior(lp_object1, "Boardignorecollision") == true) || (UnitHasBehavior(lp_object1, "PhaseShift") == true) || (UnitHasBehavior(lp_object1, "IgnoreCollision") == true) || (UnitHasBehavior(lp_object2, "Boardignorecollision") == true) || (UnitHasBehavior(lp_object2, "PhaseShift") == true) || (UnitHasBehavior(lp_object2, "IgnoreCollision") == true))) {
        return ;
    }
    else {
    }
    gf_PhysicsCollisionBounce(lp_object1, lp_object2);
}

trigger auto_gf_PhysicsCollisionBounce_Trigger = null;
unit auto_gf_PhysicsCollisionBounce_lp_object1;
unit auto_gf_PhysicsCollisionBounce_lp_object2;

void gf_PhysicsCollisionBounce (unit lp_object1, unit lp_object2) {
    auto_gf_PhysicsCollisionBounce_lp_object1 = lp_object1;
    auto_gf_PhysicsCollisionBounce_lp_object2 = lp_object2;

    if (auto_gf_PhysicsCollisionBounce_Trigger == null) {
        auto_gf_PhysicsCollisionBounce_Trigger = TriggerCreate("auto_gf_PhysicsCollisionBounce_TriggerFunc");
    }

    TriggerExecute(auto_gf_PhysicsCollisionBounce_Trigger, false, false);
}

bool auto_gf_PhysicsCollisionBounce_TriggerFunc (bool testConds, bool runActions) {
    unit lp_object1 = auto_gf_PhysicsCollisionBounce_lp_object1;
    unit lp_object2 = auto_gf_PhysicsCollisionBounce_lp_object2;

    unitgroup auto0C98E057_g;
    int auto0C98E057_u;

    // Variable Declarations
    point lv_impactPoint;
    fixed lv_k;
    fixed lv_impulseX1;
    fixed lv_impulseY1;
    fixed lv_impulseX2;
    fixed lv_impulseY2;
    fixed lv_normalX;
    fixed lv_normalY;
    fixed lv_velocityDiffX;
    fixed lv_velocityDiffY;
    fixed lv_dmg1;
    fixed lv_dmg2;
    fixed lv_maxImpulse1;
    fixed lv_maxImpulse2;
    unitgroup lv_t_group;
    unit lv_u;
    int lv_count;
    unit lv_energy_console;
    fixed lv_dmg_scale;
    unit lv_closestConsole;

    // Variable Initialization
    lv_impactPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_object1), (DistanceBetweenPoints(UnitGetPosition(lp_object1), UnitGetPosition(lp_object2)) / 2.0), UnitGetPosition(lp_object2));
    lv_normalX = (PointGetX(UnitGetPosition(lp_object2)) - PointGetX(UnitGetPosition(lp_object1)));
    lv_normalY = (PointGetY(UnitGetPosition(lp_object2)) - PointGetY(UnitGetPosition(lp_object1)));
    lv_velocityDiffX = (UnitGetCustomValue(lp_object1, 1) - UnitGetCustomValue(lp_object2, 1));
    lv_velocityDiffY = (UnitGetCustomValue(lp_object1, 2) - UnitGetCustomValue(lp_object2, 2));
    lv_maxImpulse1 = 1.0;
    lv_maxImpulse2 = 1.0;
    lv_t_group = UnitGroupEmpty();
    lv_count = 2;
    lv_dmg_scale = 0.5;

    // Implementation
    gf_PhysicsSeparateUnits(lp_object1, lp_object2);
    lv_normalX = (PointGetX(UnitGetPosition(lp_object2)) - PointGetX(UnitGetPosition(lp_object1)));
    lv_normalY = (PointGetY(UnitGetPosition(lp_object2)) - PointGetY(UnitGetPosition(lp_object1)));
    lv_normalX /=  gf_VectorMagnitude(lv_normalX, lv_normalY);
    lv_normalY /=  gf_VectorMagnitude(lv_normalX, lv_normalY);
    lv_impulseX1 = ((3.0 * (lv_normalX * gf_DotProduct(lv_velocityDiffX, lv_velocityDiffY, lv_normalX, lv_normalY))) / ((1.0 / UnitGetCustomValue(lp_object1, 5)) + (1.0 / UnitGetCustomValue(lp_object2, 5))));
    lv_impulseY1 = ((3.0 * (lv_normalY * gf_DotProduct(lv_velocityDiffX, lv_velocityDiffY, lv_normalX, lv_normalY))) / ((1.0 / UnitGetCustomValue(lp_object1, 5)) + (1.0 / UnitGetCustomValue(lp_object2, 5))));
    lv_impulseX2 = lv_impulseX1;
    lv_impulseY2 = lv_impulseY1;
    if (UnitGetType(lp_object1) == "Battlecruiser") {
    //  lv_maxImpulse1 = UnitGetCustomValue(lp_object1, 5) / 3.0;
      lv_k = 0.3;
    }else{
    //  lv_maxImpulse1 = UnitGetCustomValue(lp_object1, 5) * 4.0;
      lv_k = 0.5;
    }
    lv_k = 0.5;
    lv_dmg1 = lv_dmg_scale * (1 - lv_k) * gf_VectorMagnitude(lv_impulseX1, lv_impulseY1);
    lv_impulseX1 *= lv_k;
    lv_impulseY1 *= lv_k;
    if (UnitGetType(lp_object2) == "Battlecruiser") {
    //  lv_maxImpulse2 = UnitGetCustomValue(lp_object2, 5) / 3.0;
      lv_k = 0.3;
    }else{
    //  lv_maxImpulse2 = UnitGetCustomValue(lp_object2, 5) * 4.0;
      lv_k = 0.5;
    }
    lv_k = 0.5;
    lv_dmg2 = lv_dmg_scale * (1 - lv_k) * gf_VectorMagnitude(lv_impulseX2, lv_impulseY2);
    lv_impulseX2 *= lv_k;
    lv_impulseY2 *= lv_k;
    lv_dmg1 /= 15.0;
    lv_dmg2 /= 15.0;
    if ((gf_GetPlayerTeam(UnitGetOwner(lp_object1)) == gf_GetPlayerTeam(UnitGetOwner(lp_object2))) && ((UnitGetType(lp_object1) == "Battlecruiser"))) {
    }
    else {
        UnitSetCustomValue(lp_object1, 1, (UnitGetCustomValue(lp_object1, 1) - (lv_impulseX1 / UnitGetCustomValue(lp_object1, 5))));
        UnitSetCustomValue(lp_object1, 2, (UnitGetCustomValue(lp_object1, 2) - (lv_impulseY1 / UnitGetCustomValue(lp_object1, 5))));
    }
    if ((gf_GetPlayerTeam(UnitGetOwner(lp_object1)) == gf_GetPlayerTeam(UnitGetOwner(lp_object2))) && ((UnitGetType(lp_object2) == "Battlecruiser"))) {
    }
    else {
        UnitSetCustomValue(lp_object2, 1, (UnitGetCustomValue(lp_object2, 1) + (lv_impulseX2 / UnitGetCustomValue(lp_object2, 5))));
        UnitSetCustomValue(lp_object2, 2, (UnitGetCustomValue(lp_object2, 2) + (lv_impulseY2 / UnitGetCustomValue(lp_object2, 5))));
    }
    UnitGroupAdd(lv_t_group, lp_object1);
    UnitGroupAdd(lv_t_group, lp_object2);
    if ((gf_GetPlayerTeam(UnitGetOwner(lp_object1)) == gf_GetPlayerTeam(UnitGetOwner(lp_object2))) && ((UnitGetType(lp_object1) == "Battlecruiser") || (UnitGetType(lp_object2) == "Battlecruiser"))) {
        return true;
    }
    else {
    }
    if (((lv_dmg1 >= 1.0) || (lv_dmg2 >= 1.0))) {
        libNtve_gf_CreateActorAtPoint("UltrasonicPulseAttackImpactEffect", lv_impactPoint);
        libNtve_gf_CreateActorAtPoint("SoundCollision", lv_impactPoint);
    }
    else {
    }
    auto0C98E057_g = lv_t_group;
    auto0C98E057_u = 1;
    for ( ; auto0C98E057_u <= UnitGroupCount(auto0C98E057_g, c_unitCountAll) ; auto0C98E057_u += BoolToInt(lv_u == UnitGroupUnit(auto0C98E057_g, auto0C98E057_u)) ) {
        lv_u = UnitGroupUnit(auto0C98E057_g, auto0C98E057_u);
        if ((gf_shipToIndex(lv_u) != -1) && (UnitHasBehavior(gf_shipToNavigator(lv_u), "Magneticpullramprotection") == false)) {
            if ((UnitHasBehavior(lv_u, "IronCurtain") == true)) {
                lv_dmg1 *= 0.1;
                UnitSetPropertyFixed(lv_u, c_unitPropEnergy, (UnitGetPropertyFixed(lv_u, c_unitPropEnergy, c_unitPropCurrent) + (lv_dmg1 * 50.0)));
            }
            else {
            }
            UnitDamage(UnitGroupUnit(lv_t_group, lv_count), "DummyAttack2", lv_u, lv_dmg1);
            if ((UnitGetType(lv_u) == "Battlecruiser")) {
                PlayerGroupLoopBegin(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_u))]);
                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                    CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionXYZ, (lv_dmg1 / 700.0), 1.0, 100.0, 1.0);
                }
                PlayerGroupLoopEnd();
            }
            else {
            }
        }
        else {
        }
        if ((UnitGetPropertyFixed(lv_u, c_unitPropShields, c_unitPropCurrent) == 0.0)) {
            if ((UnitGetType(lv_u) == "Battlecruiser")) {
                lv_energy_console = UnitGroupRandomUnit(UnitGroup("EnergyConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(UnitGetOwner(lv_u))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if ((UnitHasBehavior(lv_energy_console, "ShieldBoost") == false)) {
                    UnitBehaviorAdd(UnitGroupRandomUnit(UnitGroup("EnergyConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(UnitGetOwner(lv_u))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll), "ShieldOverwhelmed", UnitGroupUnit(lv_t_group, lv_count), 1);
                    UnitBehaviorAdd(lv_u, "ShieldOverwhelmed", UnitGroupUnit(lv_t_group, lv_count), 1);
                    if ((UnitHasBehavior(lv_u, "ShieldOverwhelmed") == false)) {
                        libNtve_gf_AttachActorToUnit(lv_u, "SoundShieldBoost2", "Ref_Origin");
                    }
                    else {
                    }
                }
                else {
                }
            }
            else {
                UnitBehaviorAdd(lv_u, "ShieldOverwhelmed", UnitGroupUnit(lv_t_group, lv_count), 1);
            }
        }
        else {
        }
        lv_count = 1;
    }
    return true;
}

void gf_PhysicsApplyForceCartesian (unit lp_unit, fixed lp_forceX, fixed lp_forceY) {
    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHover) == true)) {
        UnitGroupAdd(gv_physicgroup, lp_unit);
    }
    else {
    }
    UnitSetCustomValue(lp_unit, 1, (UnitGetCustomValue(lp_unit, 1) + (lp_forceX / UnitGetCustomValue(lp_unit, 5))));
    UnitSetCustomValue(lp_unit, 2, (UnitGetCustomValue(lp_unit, 2) + (lp_forceY / UnitGetCustomValue(lp_unit, 5))));
}

void gf_PhysicsApplyForcePolar (unit lp_unit, fixed lp_force, fixed lp_angle) {
    // Implementation
    if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHover) == true)) {
        UnitGroupAdd(gv_physicgroup, lp_unit);
    }
    else {
    }
    UnitSetCustomValue(lp_unit, 1, (UnitGetCustomValue(lp_unit, 1) + ((lp_force * Cos(lp_angle)) / UnitGetCustomValue(lp_unit, 5))));
    UnitSetCustomValue(lp_unit, 2, (UnitGetCustomValue(lp_unit, 2) + ((lp_force * Sin(lp_angle)) / UnitGetCustomValue(lp_unit, 5))));
}

void gf_PhysicsSeparateUnits (unit lp_unit1, unit lp_unit2) {
    // Variable Declarations
    point lv_startPoint1;
    point lv_startPoint2;
    point lv_impactPoint1;
    point lv_impactPoint2;
    point lv_impactpointaverage;

    // Variable Initialization
    lv_startPoint1 = UnitGetPosition(lp_unit1);
    lv_startPoint2 = UnitGetPosition(lp_unit2);
    lv_impactPoint1 = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_unit1), UnitGetPropertyFixed(lp_unit1, c_unitPropRadius, c_unitPropCurrent), UnitGetPosition(lp_unit2));
    lv_impactPoint2 = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_unit1), UnitGetPropertyFixed(lp_unit1, c_unitPropRadius, c_unitPropCurrent), UnitGetPosition(lp_unit2));
    lv_impactpointaverage = libNtve_gf_PointOffsetTowardsPoint(lv_impactPoint1, (DistanceBetweenPoints(lv_impactPoint1, lv_impactPoint2) / 2.0), lv_impactPoint2);

    // Implementation
    UnitSetPosition(lp_unit1, PointWithOffsetPolar(lv_impactpointaverage, (UnitGetPropertyFixed(lp_unit1, c_unitPropRadius, c_unitPropCurrent) + 0.01), AngleBetweenPoints(lv_startPoint2, lv_startPoint1)), true);
    UnitSetPosition(lp_unit2, PointWithOffsetPolar(lv_impactpointaverage, (UnitGetPropertyFixed(lp_unit2, c_unitPropRadius, c_unitPropCurrent) + 0.01), AngleBetweenPoints(lv_startPoint1, lv_startPoint2)), true);
}

trigger auto_gf_PhysicsRemoveAsteroid_Trigger = null;
unit auto_gf_PhysicsRemoveAsteroid_lp_unit;

void gf_PhysicsRemoveAsteroid (unit lp_unit) {
    auto_gf_PhysicsRemoveAsteroid_lp_unit = lp_unit;

    if (auto_gf_PhysicsRemoveAsteroid_Trigger == null) {
        auto_gf_PhysicsRemoveAsteroid_Trigger = TriggerCreate("auto_gf_PhysicsRemoveAsteroid_TriggerFunc");
    }

    TriggerExecute(auto_gf_PhysicsRemoveAsteroid_Trigger, false, false);
}

bool auto_gf_PhysicsRemoveAsteroid_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_PhysicsRemoveAsteroid_lp_unit;

    // Implementation
    UnitBehaviorAdd(lp_unit, "Slowdowncheck", lp_unit, 1);
    Wait(1.0, c_timeGame);
    if ((gf_PhysicsGetSpeed2(lp_unit) <= 0.1) && (UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeHover) == true)) {
        UnitGroupRemove(gv_physicgroup, lp_unit);
    }
    else {
    }
    return true;
}

void gf_InitVoteKick () {
    int auto80A2CB2A_ae;
    int auto80A2CB2A_ai;
    playergroup auto9438085E_g;
    int auto9438085E_p;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Implementation
    DialogCreate(250, 100, c_anchorBottomLeft, 0, 350, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 30, 30, StringExternal("Param/Value/54F084D4"), StringExternal("Param/Value/C114CAF1"), "");
    gv_voteKick_OpenButton = DialogControlLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(325, 450, c_anchorBottomLeft, 0, 500, true);
    gv_voteKickPick_Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 50, 40, StringExternal("Param/Value/0BC25A44"), ColorWithAlpha(0,0,0,0), false, 2.0);
    auto80A2CB2A_ae = 4;
    auto80A2CB2A_ai = 1;
    lv_a = 0;
    for ( ; ( (auto80A2CB2A_ai >= 0 && lv_a <= auto80A2CB2A_ae) || (auto80A2CB2A_ai <= 0 && lv_a >= auto80A2CB2A_ae) ) ; lv_a += auto80A2CB2A_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), gv_voteKick_PlayerButtons_Size_X, gv_voteKick_PlayerButtons_Size_Y, c_anchorTopLeft, gv_voteKick_PlayerButtons_StartOffset_X, (gv_voteKick_PlayerButtons_StartOffset_Y + (lv_a * (gv_voteKick_PlayerButtons_Size_Y + gv_voteKick_PlayerButtons_Gap))), StringExternal("Param/Value/8CA5698E"), StringExternal("Param/Value/FDA0349F"), "");
        gv_voteKick_PlayerButtons[lv_a] = DialogControlLastCreated();
    }
    DialogCreate(350, 150, c_anchorLeft, 0, 0, true);
    gv_voteKick_VoteDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 50, 40, StringExternal("Param/Value/A6CDFAA5"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_voteKick_VoteDialogText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomLeft, 80, 30, StringExternal("Param/Value/46DB6A35"), StringExternal("Param/Value/C7901EB0"), "");
    gv_voteKick_YesButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 80, 50, c_anchorBottomRight, 80, 30, StringExternal("Param/Value/F13280F5"), StringExternal("Param/Value/8FCFFBA5"), "");
    gv_voteKick_NoButton = DialogControlLastCreated();
    auto9438085E_g = PlayerGroupAll(); 
    auto9438085E_p = 1;
    for ( ; auto9438085E_p <= PlayerGroupCount(auto9438085E_g) ; auto9438085E_p += BoolToInt(lv_a == PlayerGroupPlayer(auto9438085E_g, auto9438085E_p)) ) {
        lv_a = PlayerGroupPlayer(auto9438085E_g, auto9438085E_p);
        if ((gv_reputation[lv_a] <= 0.0)) {
            libNtve_gf_SetDialogItemTooltip(gv_voteKick_OpenButton, StringExternal("Param/Value/E639B685"), PlayerGroupSingle(lv_a));
            DialogControlSetEnabled(gv_voteKick_OpenButton, PlayerGroupSingle(lv_a), false);
        }
        else {
        }
    }
}

void gf_Finalizevotes (int lp_team) {
    int autoD0A83653_ae;
    int autoD0A83653_ai;
    int autoEE5FCB6A_ae;
    int autoEE5FCB6A_ai;

    // Variable Declarations
    int lv_a;
    int lv_b;

    // Variable Initialization

    // Implementation
    TimerPause(gv_voteKick_Timeout[lp_team], true);
    UIDisplayMessage(GameAttributePlayersForTeam(lp_team), c_messageAreaSubtitle, (StringExternal("Param/Value/FA5E2EB7") + TextWithColor(IntToText(gv_voteKick_YesVotes[lp_team]), Color(100.00, 50.20, 25.10)) + StringExternal("Param/Value/6D8919A3") + StringExternal("Param/Value/546464E7") + StringExternal("Param/Value/ACE12556") + TextWithColor(IntToText(gv_voteKick_NoVotes[lp_team]), Color(100.00, 50.20, 25.10)) + StringExternal("Param/Value/B4E3F13A") + StringExternal("Param/Value/44A149EB") + StringExternal("Param/Value/2D04CBB2") + TextWithColor(PlayerName(gv_voteKick_KickPlayer[lp_team]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_voteKick_KickPlayer[lp_team], false)))));
    if ((gv_voteKick_YesVotes[lp_team] > gv_voteKick_NoVotes[lp_team])) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/ADAB9FDE") + TextWithColor(PlayerName(gv_voteKick_KickPlayer[lp_team]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gv_voteKick_KickPlayer[lp_team], false))) + StringExternal("Param/Value/66CE2FCD")));
        GameOver(gv_voteKick_KickPlayer[lp_team], c_gameOverDefeat, true, false);
    }
    else {
    }
    autoD0A83653_ae = 5;
    autoD0A83653_ai = 1;
    lv_a = 0;
    for ( ; ( (autoD0A83653_ai >= 0 && lv_a <= autoD0A83653_ae) || (autoD0A83653_ai <= 0 && lv_a >= autoD0A83653_ae) ) ; lv_a += autoD0A83653_ai ) {
        autoEE5FCB6A_ae = 12;
        autoEE5FCB6A_ai = 1;
        lv_b = 0;
        for ( ; ( (autoEE5FCB6A_ai >= 0 && lv_b <= autoEE5FCB6A_ae) || (autoEE5FCB6A_ai <= 0 && lv_b >= autoEE5FCB6A_ae) ) ; lv_b += autoEE5FCB6A_ai ) {
            gv_voteKick_Players[lp_team][lv_a][lv_b] = 0;
        }
        gv_voteKick_Players[lp_team][lv_a][0] = 0;
    }
    gv_voteKick_TotalVotes[lp_team] = 0;
    gv_voteKick_YesVotes[lp_team] = 0;
    gv_voteKick_NoVotes[lp_team] = 0;
    gv_voteKick_KickPlayer[lp_team] = 0;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(lp_team));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_votekick_Block[PlayerGroupLoopCurrent()] = false;
        if ((gv_reputation[PlayerGroupLoopCurrent()] > 0.0)) {
            if ((PlayerGroupLoopCurrent() == gv_voteKick_InitiatingPlayer[lp_team])) {
                libNtve_gf_SetDialogItemTooltip(gv_voteKick_OpenButton, StringExternal("Param/Value/DB78652B"), PlayerGroupSingle(PlayerGroupLoopCurrent()));
                TimerStart(gv_voteKick_Cooldown[PlayerGroupLoopCurrent()], 60.0, false, c_timeGame);
                TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/FE600F8D"), true, false);
                TimerWindowSetPosition(TimerWindowLastCreated(), 190, 675);
                TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
                TimerWindowShow(TimerWindowLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
                gv_voteKick_CooldownWindow[PlayerGroupLoopCurrent()] = TimerWindowLastCreated();
            }
            else {
                DialogControlSetEnabled(gv_voteKick_OpenButton, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
                libNtve_gf_SetDialogItemTooltip(gv_voteKick_OpenButton, StringExternal("Param/Value/DCB6EA86"), PlayerGroupSingle(PlayerGroupLoopCurrent()));
            }
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_voteKick_OpenButton, StringExternal("Param/Value/9A2E81CF"), PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
    }
    PlayerGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Text tags
//--------------------------------------------------------------------------------------------------
bool gt_Texttags_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/6058E0AE"), 24, PointFromId(1109), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/6AEE100E"), 24, PointFromId(1110), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/04526645"), 24, PointFromId(1358), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/44288B62"), 24, PointFromId(1359), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/13C3EB21"), 24, UnitGetPosition(UnitFromId(4242)), 1.0, true, true, PlayerGroupAll());
    TextTagCreate(StringExternal("Param/Value/B6C6A033"), 24, UnitGetPosition(UnitFromId(4243)), 1.0, true, true, PlayerGroupAll());
    TextTagCreate(StringExternal("Param/Value/F2930B4B"), 24, UnitGetPosition(UnitFromId(4188)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/413C16D4"), 24, UnitGetPosition(UnitFromId(4189)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/0BB04F8C"), 24, UnitGetPosition(UnitFromId(4186)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/D74BE54D"), 24, UnitGetPosition(UnitFromId(4187)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/53684AC4"), 24, UnitGetPosition(UnitFromId(2378)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/A4CCC49D"), 24, UnitGetPosition(UnitFromId(2239)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/1FE00D1C"), 24, PointFromId(233), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/2622764B"), 24, PointFromId(234), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 100.00));
    TextTagCreate(StringExternal("Param/Value/7FC56403"), 24, RegionGetCenter(RegionFromId(20)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/4F22DEAC"), 24, RegionGetCenter(RegionFromId(39)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/C0DCCD11"), 24, UnitGetPosition(UnitFromId(3081)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 100.00));
    TextTagCreate(StringExternal("Param/Value/A8029E3F"), 24, UnitGetPosition(UnitFromId(4106)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 50.20, 100.00));
    TextTagCreate(StringExternal("Param/Value/36235A7D"), 24, UnitGetPosition(UnitFromId(4110)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
    TextTagCreate(StringExternal("Param/Value/209F4B99"), 24, UnitGetPosition(UnitFromId(4107)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
    TextTagCreate(StringExternal("Param/Value/C3865B64"), 24, PointWithOffsetPolar(RegionGetCenter(RegionFromId(22)), 7.0, 270.0), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 50.20));
    TextTagCreate(StringExternal("Param/Value/1FD56206"), 24, PointWithOffsetPolar(RegionGetCenter(RegionFromId(25)), 7.0, 270.0), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 50.20));
    TextTagCreate(StringExternal("Param/Value/864C775E"), 24, PointWithOffsetPolar(RegionGetCenter(RegionFromId(32)), 7.0, 270.0), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 50.20));
    TextTagCreate(StringExternal("Param/Value/41F4D82C"), 24, PointWithOffsetPolar(RegionGetCenter(RegionFromId(30)), 7.0, 270.0), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 50.20));
    TextTagCreate(StringExternal("Param/Value/3234A44E"), 24, RegionGetCenter(RegionFromId(57)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/0337175B"), 24, RegionGetCenter(RegionFromId(58)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/E08F9F25"), 24, UnitGetPosition(UnitFromId(107)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagCreate(StringExternal("Param/Value/F412548B"), 24, UnitGetPosition(UnitFromId(226)), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Texttags_Init () {
    gt_Texttags = TriggerCreate("gt_Texttags_Func");
    TriggerAddEventMapInit(gt_Texttags);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start tutorial
//--------------------------------------------------------------------------------------------------
bool gt_Starttutorial_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", SoundLink("ChallengescombinedAdjutant00005", -1), StringExternal("Param/Value/3B0790DB"), StringExternal("Param/Value/46B6CD4A"), 7.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/4A656BE3"), StringExternal("Param/Value/CF0E24E1"), 9999.0, c_transmissionDurationAdd, false);
    Wait(3.0, c_timeGame);
    DialogCreate(500, 400, c_anchorLeft, 0, 70, true);
    gv_pickTutorialDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/045BE7F7"), StringExternal("Param/Value/5B9ABB07"), "");
    gv_tutorialIntroductionButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 110, StringExternal("Param/Value/9B75633E"), StringExternal("Param/Value/A6BD051B"), "");
    gv_miningButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Starttutorial_Init () {
    gt_Starttutorial = TriggerCreate("gt_Starttutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Tutorial Introduction
//--------------------------------------------------------------------------------------------------
bool gt_StartTutorialIntroduction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_tutorialIntroductionButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_pickTutorialDialog, PlayerGroupAll(), false);
    TransmissionClearAll();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/42473594"), StringExternal("Param/Value/5383B45F"), 12.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/4A359F3B"), StringExternal("Param/Value/FE09842B"), 12.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/B4E76AB5"), StringExternal("Param/Value/2C12B1D3"), 12.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/CFC67FE2"), StringExternal("Param/Value/4FC08916"), 8.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/06B54C1A"), StringExternal("Param/Value/11EC8F62"), 9.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/20CB5681"), StringExternal("Param/Value/499B0AF9"), 12.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/FD0EE3C7"), StringExternal("Param/Value/B41B0963"), 18.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/DC69AC7F"), StringExternal("Param/Value/B7170C43"), 18.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/691C1447"), StringExternal("Param/Value/BB69915D"), 18.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/E33C81BD"), StringExternal("Param/Value/E802FD82"), 14.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/E4B85DFB"), StringExternal("Param/Value/759CD567"), 14.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/BB88BADE"), StringExternal("Param/Value/57FA86F8"), 12.0, c_transmissionDurationAdd, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromModel("AdjutantPortrait"), libNtve_gf_CinematicPortrait(0), "Talk", null, StringExternal("Param/Value/2AB52F3A"), StringExternal("Param/Value/161A1BDE"), 14.0, c_transmissionDurationAdd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartTutorialIntroduction_Init () {
    gt_StartTutorialIntroduction = TriggerCreate("gt_StartTutorialIntroduction_Func");
    TriggerAddEventDialogControl(gt_StartTutorialIntroduction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable tips
//--------------------------------------------------------------------------------------------------
bool gt_Disabletips_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_newplayers, EventPlayer());
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/292BF94E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disabletips_Init () {
    gt_Disabletips = TriggerCreate("gt_Disabletips_Func");
    TriggerAddEventChatMessage(gt_Disabletips, c_playerAny, "-disabletutorial", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable tips
//--------------------------------------------------------------------------------------------------
bool gt_Enabletips_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_newplayers, EventPlayer());
    libNtve_gf_SetDialogItemText(gv_introductionLabel, gv_tutorialText[gv_currentTutorialText[EventPlayer()]], PlayerGroupSingle(EventPlayer()));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/CE90735A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Enabletips_Init () {
    gt_Enabletips = TriggerCreate("gt_Enabletips_Func");
    TriggerAddEventChatMessage(gt_Enabletips, c_playerAny, "-enabletutorial", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Next Introduction text
//--------------------------------------------------------------------------------------------------
bool gt_NextIntroductiontext_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_introductionNextButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true)) {
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/ACE55B2F"), gv_tutorialText[gv_currentTutorialText[EventPlayer()]], StringExternal("Param/Value/4F651BD7"), "Assets\\Textures\\btn-tips-tutorial.dds");
        gv_currentTutorialText[EventPlayer()] += 1;
        libNtve_gf_SetDialogItemText(gv_introductionLabel, gv_tutorialText[gv_currentTutorialText[EventPlayer()]], PlayerGroupSingle(EventPlayer()));
        if ((gv_currentTutorialText[EventPlayer()] == gv_closeTutorialText1)) {
            libNtve_gf_SetDialogItemText(gv_introductionNextButton, StringExternal("Param/Value/6B0E78A3"), PlayerGroupSingle(EventPlayer()));
            lv_index = 0;
            UnitGroupLoopBegin(UnitGroup("Beacon_Zerg", c_playerAny, gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "BeaconCustomPing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                gv_tutorial_TeleporterPing[EventPlayer()][lv_index] = PingLastCreated();
                lv_index += 1;
            }
            UnitGroupLoopEnd();
        }
        else {
            if ((gv_currentTutorialText[EventPlayer()] == (gv_closeTutorialText1 + 1))) {
                DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
            }
            else {
                if ((gv_currentTutorialText[EventPlayer()] == gv_closeTutorialText2)) {
                    libNtve_gf_SetDialogItemText(gv_introductionNextButton, StringExternal("Param/Value/6903F0AD"), PlayerGroupSingle(EventPlayer()));
                    lv_index = 0;
                    UnitGroupLoopBegin(UnitGroup("Hangarconsole", c_playerAny, gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        libNtve_gf_CreatePingFacingAngle(PlayerGroupSingle(EventPlayer()), "BeaconCustomPing", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 0.0, 270.0);
                        gv_tutorial_HangarPing[EventPlayer()][lv_index] = PingLastCreated();
                        lv_index += 1;
                    }
                    UnitGroupLoopEnd();
                }
                else {
                    if ((gv_currentTutorialText[EventPlayer()] == (gv_closeTutorialText2 + 1))) {
                        DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
                    }
                    else {
                        if ((gv_currentTutorialText[EventPlayer()] == gv_closeTutorialText3)) {
                            UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("CutEngines", 0), false);
                            UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("Accelerate", 0), true);
                            UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("Decelerate", 0), true);
                            libNtve_gf_SetDialogItemText(gv_introductionNextButton, StringExternal("Param/Value/EF2C6832"), PlayerGroupSingle(EventPlayer()));
                        }
                        else {
                            if ((gv_currentTutorialText[EventPlayer()] == (gv_closeTutorialText3 + 1))) {
                                DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
                                UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("Accelerate", 0), false);
                                UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("Decelerate", 0), false);
                            }
                            else {
                                if ((gv_currentTutorialText[EventPlayer()] == (gv_closeTutorialText4 + 1))) {
                                    DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
                                    UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("ReturnMineralsDummy", 0), false);
                                }
                                else {
                                    if ((gv_currentTutorialText[EventPlayer()] == (gv_closeTutorialText5 + 1))) {
                                        DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
                                        UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("AccelerateMiningBeam", 0), false);
                                    }
                                    else {
                                        if ((gv_currentTutorialText[EventPlayer()] == (gv_closeTutorialText6 + 1))) {
                                            DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
                                            UISetButtonHighlighted(PlayerGroupSingle(EventPlayer()), AbilityCommand("Dock", 0), true);
                                        }
                                        else {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        DialogSetVisible(gv_introductionDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NextIntroductiontext_Init () {
    gt_NextIntroductiontext = TriggerCreate("gt_NextIntroductiontext_Func");
    TriggerAddEventDialogControl(gt_NextIntroductiontext, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable tutorial
//--------------------------------------------------------------------------------------------------
bool gt_Disabletutorial_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_disableTutorialNo) || (EventDialogControl() == gv_disableTutorialYes)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_disableTutorialDialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_disableTutorialYes)) {
        PlayerGroupRemove(gv_newplayers, EventPlayer());
        libNtve_gf_SetDialogItemText(gv_introductionLabel, StringExternal("Param/Value/56566657"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_introductionNextButton, StringExternal("Param/Value/4E625CBF"), PlayerGroupSingle(EventPlayer()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disabletutorial_Init () {
    gt_Disabletutorial = TriggerCreate("gt_Disabletutorial_Func");
    TriggerAddEventDialogControl(gt_Disabletutorial, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable tutorial confirmation
//--------------------------------------------------------------------------------------------------
bool gt_Disabletutorialconfirmation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_introductionCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_disableTutorialDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disabletutorialconfirmation_Init () {
    gt_Disabletutorialconfirmation = TriggerCreate("gt_Disabletutorialconfirmation_Func");
    TriggerAddEventDialogControl(gt_Disabletutorialconfirmation, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ship takes a lot of damage
//--------------------------------------------------------------------------------------------------
bool gt_Shiptakesalotofdamage_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 40.0))) {
            return false;
        }

        if (!((gv_tutorial_FirstTimeTakingDamage[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TipDamage(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shiptakesalotofdamage_Init () {
    gt_Shiptakesalotofdamage = TriggerCreate("gt_Shiptakesalotofdamage_Func");
    TriggerAddEventUnitDamaged(gt_Shiptakesalotofdamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: BC dies
//--------------------------------------------------------------------------------------------------
bool gt_BCdies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    text lv_rep;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/6B7121FD") + gf_ConvertPointToText(EventUnitDamageSourcePoint())), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/228BE642") + IntToText(libNtve_gf_KillingPlayer())), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/1E885EE9") + UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit()))), true);
    gf_Endgame((3 - gf_GetPlayerTeam(EventPlayer())), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BCdies_Init () {
    gt_BCdies = TriggerCreate("gt_BCdies_Func");
    TriggerAddEventUnitDied(gt_BCdies, UnitRefFromUnit(UnitFromId(3)));
    TriggerAddEventUnitDied(gt_BCdies, UnitRefFromUnit(UnitFromId(8)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: BC targeted (Debug)
//--------------------------------------------------------------------------------------------------
bool gt_BCtargetedDebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Battlecruiser"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/7B40EF9E"), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/C15F40FB") + gf_ConvertPointToText(EventUnitDamageSourcePoint())), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/6EAC3656") + IntToText(EventUnitDamageSourcePlayer())), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/BF28AF76") + UnitTypeGetName(UnitGetType(EventUnitDamageSourceUnit()))), true);
    TriggerDebugOutput(1, (StringExternal("Param/Value/45DA584F") + FixedToText(EventUnitDamageAmount(), c_fixedPrecisionAny)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BCtargetedDebug_Init () {
    gt_BCtargetedDebug = TriggerCreate("gt_BCtargetedDebug_Func");
    TriggerAddEventUnitDamaged(gt_BCtargetedDebug, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave game
//--------------------------------------------------------------------------------------------------
bool gt_Leavegame_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_leavegamebutton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_winningplayers, EventPlayer()) == true)) {
        GameOver(EventPlayer(), c_gameOverVictory, true, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leavegame_Init () {
    gt_Leavegame = TriggerCreate("gt_Leavegame_Func");
    TriggerAddEventDialogControl(gt_Leavegame, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 016
//--------------------------------------------------------------------------------------------------
bool gt_UntitledTrigger016_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(gv_pilots[1], gv_battlecruiserArea[gf_GetPlayerTeam(1)]) == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/C2F03A61"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/638550C2"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UntitledTrigger016_Init () {
    gt_UntitledTrigger016 = TriggerCreate("gt_UntitledTrigger016_Func");
    TriggerAddEventChatMessage(gt_UntitledTrigger016, c_playerAny, "region", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 017
//--------------------------------------------------------------------------------------------------
bool gt_UntitledTrigger017_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, FixedToText((UnitGetPropertyFixed(gv_battlecruisers[1], c_unitPropMovementSpeed, c_unitPropCurrent) * 20.0), c_fixedPrecisionAny), true);
    TriggerDebugOutput(1, FixedToText((TechTreeUpgradeCount(UnitGetOwner(gv_battlecruisers[1]), "BattlecruiserEnhancedStabilisers", c_techCountCompleteOnly) * 6.0), c_fixedPrecisionAny), true);
    TriggerDebugOutput(1, FixedToText((gf_PhysicsGetSpeed(gv_battlecruisers[1]) * 10.0), c_fixedPrecisionAny), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UntitledTrigger017_Init () {
    gt_UntitledTrigger017 = TriggerCreate("gt_UntitledTrigger017_Func");
    TriggerAddEventChatMessage(gt_UntitledTrigger017, c_playerAny, "path", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 027
//--------------------------------------------------------------------------------------------------
bool gt_UntitledTrigger027_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, FixedToText(gf_PhysicsGetMass(UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive)), c_fixedPrecisionAny), true);
    TriggerDebugOutput(1, FixedToText(gf_PhysicsGetSpeed(UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive)), c_fixedPrecisionAny), true);
    TriggerDebugOutput(1, FixedToText(gf_PhysicsGetSpeed2(UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive)), c_fixedPrecisionAny), true);
    TriggerDebugOutput(1, FixedToText(gf_PhysicsGetSpeed2(UnitGroupRandomUnit(UnitGroupSelected(1), c_unitCountAlive)), c_fixedPrecisionAny), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UntitledTrigger027_Init () {
    gt_UntitledTrigger027 = TriggerCreate("gt_UntitledTrigger027_Func");
    TriggerAddEventChatMessage(gt_UntitledTrigger027, c_playerAny, "dir", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Black Hole 2
//--------------------------------------------------------------------------------------------------
bool gt_CreateBlackHole2_Func (bool testConds, bool runActions) {
    int autoC89F8B91_n;
    int autoC89F8B91_i;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC89F8B91_n = 400;
    for (autoC89F8B91_i = 1; autoC89F8B91_i <= autoC89F8B91_n; autoC89F8B91_i += 1) {
        UnitCreate(1, "OpposerProximityMine", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(RegionFromId(1)), 0.0);
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(14));
        UnitSetCustomValue(UnitLastCreated(), 8, 4.0);
        gf_RegisterPhysics(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBlackHole2_Init () {
    gt_CreateBlackHole2 = TriggerCreate("gt_CreateBlackHole2_Func");
    TriggerEnable(gt_CreateBlackHole2, false);
    TriggerAddEventChatMessage(gt_CreateBlackHole2, c_playerAny, "bh", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setRep
//--------------------------------------------------------------------------------------------------
bool gt_setRep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737") || (PlayerHandle(EventPlayer()) == "1-S2-1-4163763")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((EventChatMessage(false) == "-rep")) {
        UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaSubtitle, FixedToText(gv_reputation[lv_p], 1));
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/A9387B66") + StringToText(StringWord(EventChatMessage(false), 3)) + StringExternal("Param/Value/9E9EF435") + PlayerName(lv_p)), true);
        gv_realReputation[lv_p] += StringToFixed(StringWord(EventChatMessage(false), 3));
        gf_BankSave(lv_p, "reputation", "stuff", gf_encrypt(FixedToString(gv_realReputation[lv_p], 1), " ", lv_p));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setRep_Init () {
    gt_setRep = TriggerCreate("gt_setRep_Func");
    TriggerAddEventChatMessage(gt_setRep, c_playerAny, "-rep", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setWins
//--------------------------------------------------------------------------------------------------
bool gt_setWins_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737") || (PlayerHandle(EventPlayer()) == "1-S2-1-4163763")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((EventChatMessage(false) == "-rep")) {
        UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaSubtitle, FixedToText(gv_reputation[lv_p], 1));
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/E4DA08FD") + StringToText(StringWord(EventChatMessage(false), 3)) + StringExternal("Param/Value/47301068") + PlayerName(lv_p)), true);
        gf_BankSave(lv_p, "win", "stuff", gf_encrypt(FixedToString((StringToInt(gf_getData(lv_p, "win", "stuff", " ")) + StringToInt(StringWord(EventChatMessage(false), 3))), 0), " ", lv_p));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setWins_Init () {
    gt_setWins = TriggerCreate("gt_setWins_Func");
    TriggerAddEventChatMessage(gt_setWins, c_playerAny, "-win", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setLosses
//--------------------------------------------------------------------------------------------------
bool gt_setLosses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737") || (PlayerHandle(EventPlayer()) == "1-S2-1-4163763")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((EventChatMessage(false) == "-rep")) {
        UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaSubtitle, FixedToText(gv_reputation[lv_p], 1));
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/4E7C1A62") + StringToText(StringWord(EventChatMessage(false), 3)) + StringExternal("Param/Value/F9F19719") + PlayerName(lv_p)), true);
        gf_BankSave(lv_p, "loss", "stuff", gf_encrypt(FixedToString((StringToFixed(gf_getData(lv_p, "loss", "stuff", " ")) + StringToFixed(StringWord(EventChatMessage(false), 3))), 0), " ", lv_p));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setLosses_Init () {
    gt_setLosses = TriggerCreate("gt_setLosses_Func");
    TriggerAddEventChatMessage(gt_setLosses, c_playerAny, "-loss", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setKills
//--------------------------------------------------------------------------------------------------
bool gt_setKills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737") || (PlayerHandle(EventPlayer()) == "1-S2-1-4163763")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((EventChatMessage(false) == "-rep")) {
        UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaSubtitle, FixedToText(gv_reputation[lv_p], 1));
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/1784E543") + StringToText(StringWord(EventChatMessage(false), 3)) + StringExternal("Param/Value/A47492E1") + PlayerName(lv_p)), true);
        gf_BankSave(lv_p, "kill", "stuff", gf_encrypt(FixedToString((StringToFixed(gf_getData(lv_p, "kill", "stuff", " ")) + StringToFixed(StringWord(EventChatMessage(false), 3))), 0), " ", lv_p));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setKills_Init () {
    gt_setKills = TriggerCreate("gt_setKills_Func");
    TriggerAddEventChatMessage(gt_setKills, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: setDeaths
//--------------------------------------------------------------------------------------------------
bool gt_setDeaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737") || (PlayerHandle(EventPlayer()) == "1-S2-1-4163763")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((EventChatMessage(false) == "-rep")) {
        UIDisplayMessage(PlayerGroupSingle(lv_p), c_messageAreaSubtitle, FixedToText(gv_reputation[lv_p], 1));
    }
    else {
        TriggerDebugOutput(1, (StringExternal("Param/Value/D2FA64CD") + StringToText(StringWord(EventChatMessage(false), 3)) + StringExternal("Param/Value/43B1A376") + PlayerName(lv_p)), true);
        gf_BankSave(lv_p, "death", "stuff", gf_encrypt(FixedToString((StringToFixed(gf_getData(lv_p, "death", "stuff", " ")) + StringToFixed(StringWord(EventChatMessage(false), 3))), 0), " ", lv_p));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_setDeaths_Init () {
    gt_setDeaths = TriggerCreate("gt_setDeaths_Func");
    TriggerAddEventChatMessage(gt_setDeaths, c_playerAny, "-death", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getPlayerName
//--------------------------------------------------------------------------------------------------
bool gt_getPlayerName_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = StringToInt(StringWord(EventChatMessage(false), 2));
    TriggerDebugOutput(1, PlayerName(lv_p), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getPlayerName_Init () {
    gt_getPlayerName = TriggerCreate("gt_getPlayerName_Func");
    TriggerAddEventChatMessage(gt_getPlayerName, c_playerAny, "-player", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team info
//--------------------------------------------------------------------------------------------------
bool gt_Teaminfo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/B77C8B7D") + IntToText(EventPlayer())));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, StringExternal("Param/Value/9A67DD7B"));
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, IntToText(PlayerGroupLoopCurrent()));
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teaminfo_Init () {
    gt_Teaminfo = TriggerCreate("gt_Teaminfo_Func");
    TriggerAddEventChatMessage(gt_Teaminfo, c_playerAny, "tinfo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getHandle
//--------------------------------------------------------------------------------------------------
bool gt_getHandle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(PlayerHandle(EventPlayer())));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringToText(PlayerHandle(StringToInt(StringWord(EventChatMessage(false), 2)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getHandle_Init () {
    gt_getHandle = TriggerCreate("gt_getHandle_Func");
    TriggerAddEventChatMessage(gt_getHandle, c_playerAny, "-handle", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: physdebug
//--------------------------------------------------------------------------------------------------
bool gt_physdebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        TriggerDebugOutput(1, (libNtve_gf_ConvertBooleanToText(UnitGroupHasUnit(gv_physiccolliders, gv_battlecruisers[IntLoopCurrent()]))), true);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_physdebug_Init () {
    gt_physdebug = TriggerCreate("gt_physdebug_Func");
    TriggerAddEventChatMessage(gt_physdebug, c_playerAny, "phys", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getCharges
//--------------------------------------------------------------------------------------------------
bool gt_getCharges_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(gv_pilots[EventPlayer()]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        TriggerDebugOutput(1, FixedToText(lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()), c_fixedPrecisionAny), true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getCharges_Init () {
    gt_getCharges = TriggerCreate("gt_getCharges_Func");
    TriggerAddEventChatMessage(gt_getCharges, c_playerAny, "-charge", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: show radius
//--------------------------------------------------------------------------------------------------
bool gt_showradius_Func (bool testConds, bool runActions) {
    int auto93BE8382_ae;
    int auto93BE8382_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto93BE8382_ae = 360;
        auto93BE8382_ai = 24;
        lv_i = 0;
        for ( ; ( (auto93BE8382_ai >= 0 && lv_i <= auto93BE8382_ae) || (auto93BE8382_ai <= 0 && lv_i >= auto93BE8382_ae) ) ; lv_i += auto93BE8382_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EMP", c_unitCreateIgnorePlacement, 1, PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropRadius, c_unitPropCurrent), IntToFixed(lv_i)));
            libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            gf_TimedLife(UnitLastCreated(), 5.5);
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showradius_Init () {
    gt_showradius = TriggerCreate("gt_showradius_Func");
    TriggerAddEventChatMessage(gt_showradius, c_playerAny, "-radius", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: change owner
//--------------------------------------------------------------------------------------------------
bool gt_changeowner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive), StringToInt(StringWord(EventChatMessage(false), 2)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_changeowner_Init () {
    gt_changeowner = TriggerCreate("gt_changeowner_Func");
    TriggerEnable(gt_changeowner, false);
    TriggerAddEventChatMessage(gt_changeowner, c_playerAny, "-owner", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hide
//--------------------------------------------------------------------------------------------------
bool gt_hide_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hide_Init () {
    gt_hide = TriggerCreate("gt_hide_Func");
    TriggerEnable(gt_hide, false);
    TriggerAddEventChatMessage(gt_hide, c_playerAny, "-hide", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: change owner 2
//--------------------------------------------------------------------------------------------------
bool gt_changeowner2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(gf_navigatorToShip(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive)), 14, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_changeowner2_Init () {
    gt_changeowner2 = TriggerCreate("gt_changeowner2_Func");
    TriggerEnable(gt_changeowner2, false);
    TriggerAddEventChatMessage(gt_changeowner2, c_playerAny, "ba", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kill selected unit
//--------------------------------------------------------------------------------------------------
bool gt_killselectedunit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        UnitKill(gv_nav_ships[StringToInt(StringWord(EventChatMessage(false), 2))]);
    }
    else {
        UnitKill(gf_navigatorToShip(UnitGroupUnit(UnitGroupSelected(1), 1)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_killselectedunit_Init () {
    gt_killselectedunit = TriggerCreate("gt_killselectedunit_Func");
    TriggerEnable(gt_killselectedunit, false);
    TriggerAddEventChatMessage(gt_killselectedunit, c_playerAny, "die", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: get time remaining
//--------------------------------------------------------------------------------------------------
bool gt_gettimeremaining_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, FixedToText(TimerGetRemaining(gv_kermiculiteTimer), c_fixedPrecisionAny), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gettimeremaining_Init () {
    gt_gettimeremaining = TriggerCreate("gt_gettimeremaining_Func");
    TriggerAddEventChatMessage(gt_gettimeremaining, c_playerAny, "time", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: getNrAsteroids
//--------------------------------------------------------------------------------------------------
bool gt_getNrAsteroids_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, IntToText(UnitGroupCount(gv_physicasteroids, c_unitCountAlive)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_getNrAsteroids_Init () {
    gt_getNrAsteroids = TriggerCreate("gt_getNrAsteroids_Func");
    TriggerAddEventChatMessage(gt_getNrAsteroids, c_playerAny, "-asteroids", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open trigger debug
//--------------------------------------------------------------------------------------------------
bool gt_Opentriggerdebug_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_windowopen[EventPlayer()] = !(gv_windowopen[EventPlayer()]);
    if ((gv_windowopen[EventPlayer()] == true)) {
        TriggerDebugWindowOpen(true);
    }
    else {
        TriggerDebugWindowOpen(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Opentriggerdebug_Init () {
    gt_Opentriggerdebug = TriggerCreate("gt_Opentriggerdebug_Func");
    TriggerAddEventChatMessage(gt_Opentriggerdebug, c_playerAny, "-window", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle debug
//--------------------------------------------------------------------------------------------------
bool gt_Toggledebug_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_debugplayers, EventPlayer()) == false)) {
        PlayerGroupAdd(gv_debugplayers, EventPlayer());
    }
    else {
        PlayerGroupRemove(gv_debugplayers, EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Toggledebug_Init () {
    gt_Toggledebug = TriggerCreate("gt_Toggledebug_Func");
    TriggerAddEventChatMessage(gt_Toggledebug, c_playerAny, "-debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Screen - Ready
//--------------------------------------------------------------------------------------------------
bool gt_StartScreenReady_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_all_ready;

    // Variable Initialization
    lv_all_ready = true;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_ready_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerready[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemImage(gv_ready_Image[EventPlayer()], "Assets\\Textures\\ui_objectives_checkbox_completed.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_ready_Button, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_ready_Button, StringExternal("Param/Value/7857DC7E"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_ready_Image[EventPlayer()], "Assets\\Textures\\ui_glue_checkboxmark_terran.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(gv_ready_Button, true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_ready_Button, StringExternal("Param/Value/14F659B3"), PlayerGroupSingle(EventPlayer()));
    }
    gv_playerready[EventPlayer()] = !(gv_playerready[EventPlayer()]);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerready[PlayerGroupLoopCurrent()] == false) && (PlayerGroupLoopCurrent() < 13) && (PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeComputer) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerStatus(PlayerGroupLoopCurrent()) != c_playerStatusLeft)) {
            lv_all_ready = false;
            break;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((lv_all_ready == true) && (gv_gamestarted == false)) {
        gv_gamestarted = true;
        libNtve_gf_HideGameUI(true, PlayerGroupAll());
        DialogSetVisible(gv_startDialog, PlayerGroupAll(), false);
        CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        TriggerExecute(gt_Start, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartScreenReady_Init () {
    gt_StartScreenReady = TriggerCreate("gt_StartScreenReady_Func");
    TriggerAddEventDialogControl(gt_StartScreenReady, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map init
//--------------------------------------------------------------------------------------------------
bool gt_Mapinit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;
    fixed lv_time;
    text lv_hinttext;
    text lv_rep;
    fixed lv_reputation;
    int lv_id;
    string lv_bankdata;
    int lv_p;

    // Variable Initialization
    lv_hinttext = StringExternal("Param/Value/0A13B2B3");
    lv_bankdata = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("1") == "0002")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/AB456539"), true);
        gv_tutorialenabled = true;
    }
    else {
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    gv_battlecruisers[1] = UnitFromId(3);
    gv_battlecruisers[2] = UnitFromId(8);
    gv_battlecruiserArea[1] = RegionFromId(63);
    gv_battlecruiserArea[2] = RegionFromId(64);
    libNtve_gf_ShowHideUnit(UnitFromId(2226), false);
    libNtve_gf_ShowHideUnit(UnitFromId(2228), false);
    libNtve_gf_ShowHideUnit(UnitFromId(4190), false);
    libNtve_gf_ShowHideUnit(UnitFromId(4192), false);
    PreloadModel("Assets\\Effects\\Terran\\UltraSonicMissileImpact\\UltraSonicMissileImpact.m3", false);
    PreloadModel("Assets\\Effects\\Terran\\Nuke\\Nuke.m3", false);
    PreloadModel("Assets\\Effects\\Protoss\\XelNagaArtifactSpell\\XelNagaArtifactSpell.m3", false);
    PreloadModel("Assets\\Effects\\Terran\\BattlecruiserMissileImpact\\BattlecruiserMissileImpact.m3", false);
    PreloadModel("Assets\\Effects\\Terran\\OdinShoulderMissileImpact\\OdinShoulderMissileImpact.m3", false);
    libNtve_gf_PreloadSoundObject("OdinBuild_Whirr", false);
    libNtve_gf_PreloadSoundObject("Battlecruiser_AirAttackLaunch", false);
    libNtve_gf_PreloadSoundtrack("Mainsoundtrack", false);
    if ((PlayerGroupCount(PlayerGroupActive()) == 3) && (gv_tutorialenabled == false)) {
    }
    else {
        UnitSetPosition(gv_battlecruisers[1], Point(47.0, 164.0), false);
        UnitSetPosition(gv_battlecruisers[2], Point(210.0, 220.0), false);
    }
    gf_InitMissileControl();
    gf_InitDamageControl();
    gf_InitHangar();
    gf_InitDrones();
    gf_InitNavigation();
    gf_InitNavigationControl();
    gf_InitEnergyControl();
    gf_InitConstruction();
    gf_InitBanks();
    gf_InitSensors();
    gf_InitSensors();
    gf_InitIntroduction();
    libNtve_gf_SetUpgradeLevelForPlayer(1, "BattlecruiserEnableSpecializations", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(13, "BattlecruiserRedMinimap", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(14, "BattlecruiserBlueMinimap", 1);
    IntLoopBegin(1, 15);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        DialogCreate(3000, 2000, c_anchorTopLeft, 0, 0, true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 2000, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/3D007668"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(0,0,0), c_triggerBlendModeNormal);
        gv_powerdownoverlay[IntLoopCurrent()] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
    }
    IntLoopEnd();
    gf_InitHacking();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    gv_constructionsite[1] = PointFromId(169);
    gv_constructionsite[2] = PointFromId(771);
    gv_mineraldropoff[1] = PointFromId(15);
    gv_mineraldropoff[2] = PointFromId(796);
    gv_conveyorBelt[1] = RegionFromId(20);
    gv_conveyorBelt[2] = RegionFromId(39);
    gv_processingarea[1] = RegionFromId(38);
    gv_processingarea[2] = RegionFromId(40);
    gv_bCareas[1][0][0] = RegionFromId(41);
    gv_bCareas[1][0][1] = RegionFromId(42);
    gv_bCareas[1][0][2] = RegionFromId(43);
    gv_bCareas[1][0][3] = RegionFromId(44);
    gv_bCareas[1][0][4] = RegionFromId(2);
    gv_bCareas[1][1][0] = RegionFromId(49);
    gv_bCareas[1][1][1] = RegionFromId(51);
    gv_bCareas[1][1][2] = RegionFromId(52);
    gv_bCareas[1][1][3] = RegionFromId(50);
    gv_bCareas[1][1][4] = RegionFromId(34);
    gv_bCareas[2][0][0] = RegionFromId(45);
    gv_bCareas[2][0][1] = RegionFromId(46);
    gv_bCareas[2][0][2] = RegionFromId(47);
    gv_bCareas[2][0][3] = RegionFromId(48);
    gv_bCareas[2][0][4] = RegionFromId(33);
    gv_bCareas[2][1][0] = RegionFromId(53);
    gv_bCareas[2][1][1] = RegionFromId(55);
    gv_bCareas[2][1][2] = RegionFromId(56);
    gv_bCareas[2][1][3] = RegionFromId(54);
    gv_bCareas[2][1][4] = RegionFromId(35);
    gv_startLocations[1] = PointFromId(21);
    gv_startLocations[2] = PointFromId(283);
    gv_refiningdrops[1] = RegionFromId(57);
    gv_refiningdrops[2] = RegionFromId(58);
    libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), 5);
    libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(1), 1);
    libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(2), 1);
    libNtve_gf_SetAlliance(0, 13, 7);
    libNtve_gf_SetAlliance(0, 14, 7);
    if ((PlayerGroupCount(PlayerGroupActive()) == 3) && (gv_tutorialenabled == false)) {
        gf_Inittemporarydebugstuff();
        gv_inDebug = true;
    }
    else {
    }
    if ((gv_tutorialenabled == false)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                if ((BankExists("Data", PlayerGroupLoopCurrent()) == false)) {
                    BankLoad("Data", PlayerGroupLoopCurrent());
                    gv_playerBanks[PlayerGroupLoopCurrent()] = BankLastCreated();
                    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                    gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                    gv_reputation[PlayerGroupLoopCurrent()] = 0.0;
                }
                else {
                    BankLoad("Data", PlayerGroupLoopCurrent());
                    gv_playerBanks[PlayerGroupLoopCurrent()] = BankLastCreated();
                    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                    lv_bankdata = gf_getData(PlayerGroupLoopCurrent(), "reputation", "stuff", " ");
                    if ((lv_bankdata == null)) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/05EFEB4C"));
                        BankSectionRemove(BankLastCreated(), "stuff");
                        gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt("-5", " ", PlayerGroupLoopCurrent()));
                        gv_reputation[PlayerGroupLoopCurrent()] = -5.0;
                    }
                    else {
                        gv_reputation[PlayerGroupLoopCurrent()] = StringToFixed(lv_bankdata);
                    }
                }
                if ((gv_reputation[PlayerGroupLoopCurrent()] > 0.0)) {
                    lv_rep = TextWithColor(FixedToText(gv_reputation[PlayerGroupLoopCurrent()], 1), Color(0.00, 100.00, 0.00));
                }
                else {
                    if ((gv_reputation[PlayerGroupLoopCurrent()] < 0.0)) {
                        lv_rep = TextWithColor(FixedToText(gv_reputation[PlayerGroupLoopCurrent()], 1), Color(100.00, 0.00, 0.00));
                    }
                    else {
                        lv_rep = FixedToText(gv_reputation[PlayerGroupLoopCurrent()], c_fixedPrecisionAny);
                    }
                }
                lv_hinttext = (lv_hinttext + StringExternal("Param/Value/8C00BBCD") + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))) + StringExternal("Param/Value/BB3BD0CC") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/B3C8BC49") + StringExternal("Param/Value/EC3ED89E") + lv_rep);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, PlayerGroupLoopCurrent(), PointWithOffsetPolar(PointFromId(21), 1.0, (60 * PlayerGroupLoopCurrent())));
                gv_pilots[PlayerGroupLoopCurrent()] = UnitLastCreated();
                CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_nav_camera_offset[0]), 0.0, -1, 10, false);
                PlayerGroupAdd(gv_players_inside[1], PlayerGroupLoopCurrent());
                VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(34));
                gv_playerVisibilityRevealer[1][PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
                VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(2));
                gv_playerVisibilityRevealer[0][PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
                libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(PlayerGroupLoopCurrent()), PlayerGroupLoopCurrent(), 1);
                libNtve_gf_SetAlliance(0, PlayerGroupLoopCurrent(), 7);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        lv_hinttext = (lv_hinttext + StringExternal("Param/Value/EEECBA83") + StringExternal("Param/Value/AAD5A588"));
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
                if ((BankExists("Data", PlayerGroupLoopCurrent()) == false)) {
                    BankLoad("Data", PlayerGroupLoopCurrent());
                    gv_playerBanks[PlayerGroupLoopCurrent()] = BankLastCreated();
                    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                    gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                    gv_reputation[PlayerGroupLoopCurrent()] = 0.0;
                }
                else {
                    BankLoad("Data", PlayerGroupLoopCurrent());
                    gv_playerBanks[PlayerGroupLoopCurrent()] = BankLastCreated();
                    BankOptionSet(BankLastCreated(), c_bankOptionSignature, true);
                    lv_bankdata = gf_getData(PlayerGroupLoopCurrent(), "reputation", "stuff", " ");
                    if ((lv_bankdata == null)) {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/97950EA9"));
                        BankSectionRemove(BankLastCreated(), "stuff");
                        gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt("-5", " ", PlayerGroupLoopCurrent()));
                        gv_reputation[PlayerGroupLoopCurrent()] = -5.0;
                    }
                    else {
                        gv_reputation[PlayerGroupLoopCurrent()] = StringToFixed(lv_bankdata);
                    }
                }
                if ((gv_reputation[PlayerGroupLoopCurrent()] > 0.0)) {
                    lv_rep = TextWithColor(FixedToText(gv_reputation[PlayerGroupLoopCurrent()], c_fixedPrecisionAny), Color(0.00, 100.00, 0.00));
                }
                else {
                    if ((gv_reputation[PlayerGroupLoopCurrent()] < 0.0)) {
                        lv_rep = TextWithColor(FixedToText(gv_reputation[PlayerGroupLoopCurrent()], c_fixedPrecisionAny), Color(100.00, 0.00, 0.00));
                    }
                    else {
                        lv_rep = FixedToText(gv_reputation[PlayerGroupLoopCurrent()], c_fixedPrecisionAny);
                    }
                }
                lv_hinttext = (lv_hinttext + StringExternal("Param/Value/C5BAF4A6") + TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))) + StringExternal("Param/Value/54A1E3B8") + StringToText(PlayerHandle(PlayerGroupLoopCurrent())) + StringExternal("Param/Value/1FB9B640") + StringExternal("Param/Value/8D19B6CB") + lv_rep);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, PlayerGroupLoopCurrent(), PointWithOffsetPolar(PointFromId(283), 1.0, (60 * PlayerGroupLoopCurrent())));
                CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_nav_camera_offset[2]), 0.0, -1, 10, false);
                gv_pilots[PlayerGroupLoopCurrent()] = UnitLastCreated();
                PlayerGroupAdd(gv_players_inside[2], PlayerGroupLoopCurrent());
                VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(35));
                gv_playerVisibilityRevealer[1][PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
                VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(33));
                gv_playerVisibilityRevealer[0][PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
                libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(PlayerGroupLoopCurrent()), PlayerGroupLoopCurrent(), 1);
                libNtve_gf_SetAlliance(0, PlayerGroupLoopCurrent(), 7);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        HelpPanelAddTip(PlayerGroupAll(), StringExternal("Param/Value/F6792214"), StringExternal("Param/Value/A7C170A1"), StringExternal("Param/Value/A1223639"), "Assets\\Textures\\btn-tips-credit.dds");
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/0BDFAAC7"), 0), lv_hinttext, StringExternal("Param/Value/4342CF97"), "Assets\\Textures\\btn-tips-battlereport.dds");
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechGlossaryPanel, false);
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTechTreePanel, false);
        gf_AddAI(1, StringExternal("Param/Value/105A86BF"));
        gf_AddAI(1, StringExternal("Param/Value/D2A310DE"));
        gf_AddAI(1, StringExternal("Param/Value/1D580171"));
        gf_AddAI(2, StringExternal("Param/Value/FE38956B"));
        gf_AddAI(2, StringExternal("Param/Value/B966ACE9"));
        gf_AddAI(2, StringExternal("Param/Value/9BB29182"));
        PlayerGroupLoopBegin(PlayerGroupActive());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerHandle(PlayerGroupLoopCurrent()) == "1-S2-1-2447737")) {
                GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaError, StringExternal("Param/Value/7D916F22"));
            }
            else {
            }
            UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, gv_pilots[PlayerGroupLoopCurrent()]);
            UnitSelect(gv_pilots[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent(), true);
            UnitInventoryCreate(gv_pilots[PlayerGroupLoopCurrent()], "HA11Sweeper");
            UnitInventoryMove(UnitInventoryLastCreated(), 1, 1);
            PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
            PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectuncontrolable", "1");
            MeleeSetOption(PlayerGroupLoopCurrent(), c_meleeOptionSplitResources, false);
            if ((PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeComputer)) {
                TextTagCreate(TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))), 24, UnitGetPosition(gv_pilots[PlayerGroupLoopCurrent()]), 1.0, true, false, GameAttributePlayersForTeam(gf_GetPlayerTeam(PlayerGroupLoopCurrent())));
                TextTagAttachToUnit(TextTagLastCreated(), gv_pilots[PlayerGroupLoopCurrent()], 1.0);
            }
            else {
            }
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser) && (gv_inDebug == false)) {
                gv_pilottexttags[PlayerGroupLoopCurrent()] = TextTagLastCreated();
                CameraSetBounds(PlayerGroupSingle(PlayerGroupLoopCurrent()), RegionFromId(1), true);
                if ((!((BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "win") == true) || (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "loss") == true) || (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "kill") == true) || (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "death") == true) || (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "disconnect") == true)))) {
                    if ((BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "win") == false) && (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "loss") == false) && (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "kill") == false) && (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "death") == false) && (BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "stuff", "disconnect") == false)) {
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/284BD0FD"));
                        gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt("-5", " ", PlayerGroupLoopCurrent()));
                        gv_reputation[PlayerGroupLoopCurrent()] = -5.0;
                    }
                    gf_BankSave(PlayerGroupLoopCurrent(), "win", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                    gf_BankSave(PlayerGroupLoopCurrent(), "loss", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                    gf_BankSave(PlayerGroupLoopCurrent(), "kill", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                    gf_BankSave(PlayerGroupLoopCurrent(), "death", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                    gf_BankSave(PlayerGroupLoopCurrent(), "disconnect", "stuff", gf_encrypt("0", " ", PlayerGroupLoopCurrent()));
                }
                else {
                }
                gv_realReputation[PlayerGroupLoopCurrent()] = gv_reputation[PlayerGroupLoopCurrent()];
                gv_realReputation[PlayerGroupLoopCurrent()] -= 2.0;
                gf_BankSave(PlayerGroupLoopCurrent(), "reputation", "stuff", gf_encrypt(FixedToString(gv_realReputation[PlayerGroupLoopCurrent()], 1), " ", PlayerGroupLoopCurrent()));
                if ((gv_reputation[PlayerGroupLoopCurrent()] <= 2.0)) {
                    PlayerGroupAdd(gv_newplayers, PlayerGroupLoopCurrent());
                }
                else {
                }
                HelpPanelAddTutorial(PlayerGroupAll(), TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))), (StringExternal("Param/Value/FAC419FB") + StringToText(gf_getData(PlayerGroupLoopCurrent(), "win", "stuff", " ")) + StringExternal("Param/Value/A56B84A7") + StringToText(gf_getData(PlayerGroupLoopCurrent(), "loss", "stuff", " ")) + StringExternal("Param/Value/CC6848FF") + StringToText(gf_getData(PlayerGroupLoopCurrent(), "kill", "stuff", " ")) + StringExternal("Param/Value/F6739612") + StringToText(gf_getData(PlayerGroupLoopCurrent(), "death", "stuff", " ")) + StringExternal("Param/Value/5412967A") + StringToText(gf_getData(PlayerGroupLoopCurrent(), "disconnect", "stuff", " "))), "Assets\\Textures\\btn-tips-terran-psishield.dds", "Assets\\Textures\\video_static.ogv", true);
                gf_BankSave(PlayerGroupLoopCurrent(), "loss", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(PlayerGroupLoopCurrent(), "loss", "stuff", " ")) + 1)), " ", PlayerGroupLoopCurrent()));
                gf_BankSave(PlayerGroupLoopCurrent(), "disconnect", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(PlayerGroupLoopCurrent(), "disconnect", "stuff", " ")) + 1)), " ", PlayerGroupLoopCurrent()));
            }
            else {
                if ((PlayerGroupLoopCurrent() != gf_GetPlayerTeamAI(PlayerGroupLoopCurrent()))) {
                    gf_AddAI(gf_GetPlayerTeam(PlayerGroupLoopCurrent()), PlayerName(PlayerGroupLoopCurrent()));
                }
                else {
                }
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", 0, 1, PointFromId(21));
        gv_pilots[1] = UnitLastCreated();
        UnitSelect(UnitLastCreated(), 1, true);
        CameraPan(1, UnitGetPosition(UnitFromId(3)), 0.0, -1, 10, false);
        CameraSetBounds(PlayerGroupSingle(1), RegionFromId(1), true);
        PlayerGroupAdd(gv_players_inside[1], 1);
        VisRevealerCreate(1, RegionFromId(34));
        VisRevealerCreate(1, RegionFromId(2));
        libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(1), 1, 1);
        libNtve_gf_SetAlliance(0, 1, 7);
    }
    gv_asteroidTypes[0] = "Asteroid5";
    gv_asteroidTypes[1] = "Asteroid4";
    gv_asteroidTypes[2] = "Asteroid3";
    gv_asteroidTypes[3] = "Asteroid6";
    gv_asteroidTypes[4] = "Asteroid1";
    gv_asteroidTypes[5] = "Asteroid2";
    gf_Generatemap();
    gf_InitStartScreen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mapinit_Init () {
    gt_Mapinit = TriggerCreate("gt_Mapinit_Func");
    TriggerAddEventTimeElapsed(gt_Mapinit, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start
//--------------------------------------------------------------------------------------------------
bool gt_Start_Func (bool testConds, bool runActions) {
    int auto719C66E1_ae;
    int auto719C66E1_ai;
    playergroup autoD9AB90F1_g;
    int autoD9AB90F1_p;

    // Variable Declarations
    int lv_a;
    int lv_b;
    fixed lv_time;
    text lv_hinttext;
    text lv_rep;
    fixed lv_reputation;
    int lv_id;
    string lv_bankdata;
    int lv_p;
    int lv_team;

    // Variable Initialization
    lv_hinttext = StringExternal("Param/Value/18ED8E42");
    lv_bankdata = "";
    lv_team = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_Applyconfigurations, true, false);
    gf_InitGeneralSystems();
    TriggerEnable(gt_Energy, true);
    lv_time = RandomFixed(480.0, 660.0);
    TimerStart(gv_kermiculiteTimer, lv_time, false, c_timeGame);
    TimerStart(gv_edgeDisableTimer, 2700.0, false, c_timeGame);
    auto719C66E1_ae = (((gv_hangarcolumns * gv_hangarrows) * 2) - 1);
    auto719C66E1_ai = 1;
    lv_a = 0;
    for ( ; ( (auto719C66E1_ai >= 0 && lv_a <= auto719C66E1_ae) || (auto719C66E1_ai <= 0 && lv_a >= auto719C66E1_ae) ) ; lv_a += auto719C66E1_ai ) {
        lv_id = ModI(lv_a, (gv_hangarcolumns * gv_hangarrows));
        if ((lv_a >= (gv_hangarcolumns * gv_hangarrows))) {
            lv_team = 2;
        }
        else {
        }
        lib2_gf_CreateInventorySetup(lv_a, gv_shiptypes[gv_shipList[lv_team][lv_id].lv_shipType].lv_inventorySizeX, gv_shiptypes[gv_shipList[lv_team][lv_id].lv_shipType].lv_inventorySizeY, UnitFromId(8), "HangarInventory");
    }
    TriggerExecute(gt_ShipStatusupdate, true, false);
    TriggerEnable(gt_SwitchSelectedDrone, true);
    TriggerEnable(gt_SwitchSelectedOrder, true);
    if ((gv_tutorialenabled == false)) {
    }
    else {
        Wait(2.5, c_timeGame);
        TriggerExecute(gt_Starttutorial, true, false);
    }
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitSelect(gv_pilots[PlayerGroupLoopCurrent()], PlayerGroupLoopCurrent(), true);
        if ((BankKeyExists(gv_playerBanks[PlayerGroupLoopCurrent()], "Stuff", "music") == false)) {
            BankValueSetFromFlag(gv_playerBanks[PlayerGroupLoopCurrent()], "Stuff", "music", true);
            SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryAmbience, "Mainsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        }
        else {
            if ((BankValueGetAsFlag(gv_playerBanks[PlayerGroupLoopCurrent()], "Stuff", "music") == true)) {
                SoundtrackPlay(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_soundtrackCategoryAmbience, "Mainsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
            }
            else {
                gv_soundOn[PlayerGroupLoopCurrent()] = false;
            }
        }
    }
    PlayerGroupLoopEnd();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/7AD54D6D"));
    PlayerGroupLoopBegin(gv_newplayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_Tipintroduction(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    IntLoopBegin(1, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(IntLoopCurrent()));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            autoD9AB90F1_g = GameAttributePlayersForTeam(IntLoopCurrent()); 
            autoD9AB90F1_p = 1;
            for ( ; autoD9AB90F1_p <= PlayerGroupCount(autoD9AB90F1_g) ; autoD9AB90F1_p += BoolToInt(lv_p == PlayerGroupPlayer(autoD9AB90F1_g, autoD9AB90F1_p)) ) {
                lv_p = PlayerGroupPlayer(autoD9AB90F1_g, autoD9AB90F1_p);
                if ((PlayerGroupLoopCurrent() != lv_p)) {
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdSpend, lv_p, false);
                    PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdTrade, lv_p, false);
                }
                else {
                }
            }
        }
        PlayerGroupLoopEnd();
    }
    IntLoopEnd();
    gf_InitVoteKick();
    Wait(1.0, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            gf_ShipView(PlayerGroupLoopCurrent(), gv_battlecruisers[gf_GetPlayerTeam(PlayerGroupLoopCurrent())]);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Start_Init () {
    gt_Start = TriggerCreate("gt_Start_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Distribute Configuration
//--------------------------------------------------------------------------------------------------
bool gt_DistributeConfiguration_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_configureboxes[0]) || (EventDialogControl() == gv_configureboxes[1]) || (EventDialogControl() == gv_configureboxes[2]) || (EventDialogControl() == gv_configureboxes[3])))) {
            return false;
        }

        if (!((EventPlayer() == gv_configuringplayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        libNtve_gf_SetDialogItemChecked(EventDialogControl(), true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemChecked(EventDialogControl(), false, PlayerGroupAll());
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DistributeConfiguration_Init () {
    gt_DistributeConfiguration = TriggerCreate("gt_DistributeConfiguration_Func");
    TriggerAddEventDialogControl(gt_DistributeConfiguration, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Configuration
//--------------------------------------------------------------------------------------------------
bool gt_DefaultConfiguration_Func (bool testConds, bool runActions) {
    int auto05EE8176_ae;
    int auto05EE8176_ai;
    int auto71D5DF50_ae;
    int auto71D5DF50_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_configureboxes[0]))) {
            return false;
        }

        if (!((EventPlayer() == gv_configuringplayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        auto71D5DF50_ae = gv_configureoptions;
        auto71D5DF50_ai = 1;
        lv_i = 1;
        for ( ; ( (auto71D5DF50_ai >= 0 && lv_i <= auto71D5DF50_ae) || (auto71D5DF50_ai <= 0 && lv_i >= auto71D5DF50_ae) ) ; lv_i += auto71D5DF50_ai ) {
            DialogControlSetEnabled(gv_configureboxes[lv_i], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetEnabled(gv_configurelabels[lv_i], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemChecked(gv_configureboxes[lv_i], false, PlayerGroupAll());
        }
    }
    else {
        auto05EE8176_ae = gv_configureoptions;
        auto05EE8176_ai = 1;
        lv_i = 1;
        for ( ; ( (auto05EE8176_ai >= 0 && lv_i <= auto05EE8176_ae) || (auto05EE8176_ai <= 0 && lv_i >= auto05EE8176_ae) ) ; lv_i += auto05EE8176_ai ) {
            DialogControlSetEnabled(gv_configureboxes[lv_i], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_configurelabels[lv_i], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DefaultConfiguration_Init () {
    gt_DefaultConfiguration = TriggerCreate("gt_DefaultConfiguration_Func");
    TriggerAddEventDialogControl(gt_DefaultConfiguration, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply configurations
//--------------------------------------------------------------------------------------------------
bool gt_Applyconfigurations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_asteroids;

    // Variable Initialization
    lv_asteroids = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/754E96FC"), true);
    if ((libNtve_gf_DialogItemIsChecked(gv_configureboxes[1], gv_configuringplayer) == true)) {
        gv_disableweapons = true;
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "DisableBCweapons", 1);
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    if ((libNtve_gf_DialogItemIsChecked(gv_configureboxes[2], gv_configuringplayer) == true)) {
        gv_rainbowasteroids = true;
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 0, RandomInt(1, 4));
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    if ((libNtve_gf_DialogItemIsChecked(gv_configureboxes[3], gv_configuringplayer) == true)) {
        gv_asteroidshower = true;
        lv_asteroids = gf_GenerateAsteroidField(4, 3, Point(128.0, 192.0), false, true);
        UnitGroupLoopBegin(lv_asteroids);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetCustomValue(UnitGroupLoopCurrent(), 5, 50.0);
            gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), 750.0, 270.0);
            gf_PhysicsSetFriction(UnitGroupLoopCurrent(), 1.0);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Applyconfigurations_Init () {
    gt_Applyconfigurations = TriggerCreate("gt_Applyconfigurations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse over model
//--------------------------------------------------------------------------------------------------
bool gt_Mouseovermodel_Func (bool testConds, bool runActions) {
    int auto81F9514A_val;
    int auto7FEFF58D_val;

    // Variable Declarations
    int lv_a;
    int lv_border;
    int lv_b;
    int lv_c;
    fixed lv_scale;

    // Variable Initialization
    lv_border = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_reward_Button[0]) || (EventDialogControl() == gv_reward_Button[1]) || (EventDialogControl() == gv_reward_Button[2]) || (EventDialogControl() == gv_reward_Button[3]) || (EventDialogControl() == gv_reward_Button[4]) || (EventDialogControl() == gv_reward_Button[5]) || (EventDialogControl() == gv_reward_Button[6]) || (EventDialogControl() == gv_reward_Button[7]) || (EventDialogControl() == gv_reward_Button[8]) || (EventDialogControl() == gv_reward_Button[9]) || (EventDialogControl() == gv_reward_Button[10]) || (EventDialogControl() == gv_reward_Button[11]) || (EventDialogControl() == gv_reward_Button[12]) || (EventDialogControl() == gv_reward_Button[13]) || (EventDialogControl() == gv_reward_Button[14]) || (EventDialogControl() == gv_reward_Button[15])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_a = gf_GetRewardBorder(EventDialogControl());
    lv_b = DialogControlGetSelectedItem(gv_reward_ChangeAcquireType, EventPlayer());
    lv_c = DialogControlGetSelectedItem(gv_reward_ChangeRewardType, EventPlayer());
    lv_border = gv_reward_Border[lv_a];
    auto81F9514A_val = EventDialogControlEventType();
    if (auto81F9514A_val == c_triggerControlEventTypeMouseEnter) {
        if ((DialogControlGetType(lv_border) == c_triggerControlTypeImage) && (libNtve_gf_DialogItemColor(lv_border, EventPlayer()) != Color(100.00, 0.00, 0.00)) && (gv_selectedReward[EventPlayer()][lv_c] != gv_modelRewards[lv_a][lv_b][lv_c].lv_unitmodel)) {
            libNtve_gf_SetDialogItemColor(lv_border, Color(33.33, 91.76, 88.63), PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
    }
    else if (auto81F9514A_val == c_triggerControlEventTypeMouseExit) {
        if ((DialogControlGetType(lv_border) == c_triggerControlTypeImage) && (libNtve_gf_DialogItemColor(lv_border, EventPlayer()) != Color(100.00, 0.00, 0.00)) && (gv_selectedReward[EventPlayer()][lv_c] != gv_modelRewards[lv_a][lv_b][lv_c].lv_unitmodel)) {
            libNtve_gf_SetDialogItemColor(lv_border, Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
    }
    else if (auto81F9514A_val == c_triggerControlEventTypeClick) {
        if ((EventDialogControl() == gv_reward_Button[lv_a]) && (libNtve_gf_DialogItemColor(gv_reward_Border[lv_a], EventPlayer()) != Color(100.00, 0.00, 0.00)) && (gv_selectedReward[EventPlayer()][lv_c] != gv_modelRewards[lv_a][lv_b][lv_c].lv_unitmodel)) {
            if ((libNtve_gf_DialogItemColor(gv_reward_Border[gv_selectedBorder[EventPlayer()][lv_c]], EventPlayer()) != Color(100.00, 0.00, 0.00))) {
                libNtve_gf_SetDialogItemColor(gv_reward_Border[gv_selectedBorder[EventPlayer()][lv_c]], Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
            }
            else {
            }
            libNtve_gf_SetDialogItemColor(gv_reward_Border[lv_a], Color(0.00, 100.00, 0.00), PlayerGroupSingle(EventPlayer()));
            gv_selectedReward[EventPlayer()][lv_c] = gv_modelRewards[lv_a][lv_b][lv_c].lv_unitmodel;
            gv_selectedBorder[EventPlayer()][lv_c] = lv_a;
            auto7FEFF58D_val = lv_c;
            if (auto7FEFF58D_val == 1) {
                libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], libNtve_gf_ModelSwap(gv_modelRewards[lv_a][lv_b][lv_c].lv_model, 1));
                libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], "TextureResetToDefault");
                lv_scale = gv_modelRewards[lv_a][lv_b][lv_c].lv_scale;
                if ((lv_scale != 0.0)) {
                    libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, 0.0));
                }
                else {
                }
            }
            else if (auto7FEFF58D_val == 2) {
                if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_diffuseTexture == null)) {
                    libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], "TextureResetToDefault");
                }
                else {
                    libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], libNtve_gf_TextureSelectByID(gv_modelRewards[lv_a][lv_b][lv_c].lv_diffuseTexture));
                    libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], libNtve_gf_TextureSelectByID(gv_modelRewards[lv_a][lv_b][lv_c].lv_emissiveTexture));
                    libNtve_gf_SendActorMessageToUnit(gv_pilots[EventPlayer()], libNtve_gf_TextureSelectByID(gv_modelRewards[lv_a][lv_b][lv_c].lv_specularTexture));
                }
            }
            else if (auto7FEFF58D_val == 3) {
                if ((gv_player_background[EventPlayer()] != null)) {
                    ActorSend(gv_player_background[EventPlayer()], "Destroy Immediate");
                }
                else {
                }
                if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_background != null)) {
                    libNtve_gf_CreateActorAtPoint(gv_modelRewards[lv_a][lv_b][lv_c].lv_background, Point(120.0, 120.0));
                    gf_ShowHideActorForPlayerGroup(PlayerGroupAll(), libNtve_gf_ActorLastCreated(), false);
                    gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_ActorLastCreated(), true);
                    gv_player_background[EventPlayer()] = libNtve_gf_ActorLastCreated();
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Mouseovermodel_Init () {
    gt_Mouseovermodel = TriggerCreate("gt_Mouseovermodel_Func");
    TriggerAddEventDialogControl(gt_Mouseovermodel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(gt_Mouseovermodel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(gt_Mouseovermodel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Reward Type
//--------------------------------------------------------------------------------------------------
bool gt_ChangeRewardType_Func (bool testConds, bool runActions) {
    int auto757555C5_ae;
    int auto757555C5_ai;
    int autoC2F8B352_ae;
    int autoC2F8B352_ai;
    int autoBE236E7B_ae;
    int autoBE236E7B_ai;

    // Variable Declarations
    int lv_a;
    int lv_b;
    int lv_c;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_reward_ChangeAcquireType) || (EventDialogControl() == gv_reward_ChangeRewardType)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto757555C5_ae = gv_reward_amount;
    auto757555C5_ai = 1;
    lv_a = 0;
    for ( ; ( (auto757555C5_ai >= 0 && lv_a <= auto757555C5_ae) || (auto757555C5_ai <= 0 && lv_a >= auto757555C5_ae) ) ; lv_a += auto757555C5_ai ) {
        autoC2F8B352_ae = 2;
        autoC2F8B352_ai = 1;
        lv_b = 1;
        for ( ; ( (autoC2F8B352_ai >= 0 && lv_b <= autoC2F8B352_ae) || (autoC2F8B352_ai <= 0 && lv_b >= autoC2F8B352_ae) ) ; lv_b += autoC2F8B352_ai ) {
            autoBE236E7B_ae = gv_rEWARD_TYPES;
            autoBE236E7B_ai = 1;
            lv_c = 1;
            for ( ; ( (autoBE236E7B_ai >= 0 && lv_c <= autoBE236E7B_ae) || (autoBE236E7B_ai <= 0 && lv_c >= autoBE236E7B_ae) ) ; lv_c += autoBE236E7B_ai ) {
                if ((gv_reward_Model[lv_a][lv_b][lv_c] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_reward_Model[lv_a][lv_b][lv_c], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                }
                if ((gv_reward_Image[lv_a][lv_b][lv_c] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(gv_reward_Image[lv_a][lv_b][lv_c], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                }
            }
        }
        lv_b = DialogControlGetSelectedItem(gv_reward_ChangeAcquireType, EventPlayer());
        lv_c = DialogControlGetSelectedItem(gv_reward_ChangeRewardType, EventPlayer());
        if (((gv_modelRewards[lv_a][lv_b][lv_c].lv_model != null) || (gv_modelRewards[lv_a][lv_b][lv_c].lv_image != null))) {
            if ((gv_reward_Model[lv_a][lv_b][lv_c] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_reward_Model[lv_a][lv_b][lv_c], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
            }
            if ((gv_reward_Image[lv_a][lv_b][lv_c] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_reward_Image[lv_a][lv_b][lv_c], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
            }
            if ((((gv_reputation[EventPlayer()] >= gv_modelRewards[lv_a][lv_b][lv_c].lv_requiredreputation) && (lv_b == 1)) || ((gf_SpecialRewardavailableforplayer(EventPlayer(), gv_modelRewards[lv_a][lv_b][lv_c].lv_iD) == true) && (lv_b == 2)))) {
                if ((lv_b == 1)) {
                    if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_requiredreputation >= -9999.0)) {
                        libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], (StringExternal("Param/Value/C74EF3EF") + TextWithColor(FixedToText(gv_modelRewards[lv_a][lv_b][lv_c].lv_requiredreputation, 0), Color(87.45, 80.39, 40.00)) + StringExternal("Param/Value/6B763EB1")), PlayerGroupSingle(EventPlayer()));
                    }
                    else {
                        libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], (StringExternal("Param/Value/B1A6F316")), PlayerGroupSingle(EventPlayer()));
                    }
                }
                else {
                    libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], StringToText(gv_modelRewards[lv_a][lv_b][lv_c].lv_requirement), PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_modelRewards[lv_a][lv_b][lv_c].lv_unitmodel == gv_selectedReward[EventPlayer()][lv_c])) {
                    libNtve_gf_SetDialogItemColor(gv_reward_Border[lv_a], Color(0.00, 100.00, 0.00), PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_reward_Border[lv_a], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
                }
            }
            else {
                if ((lv_b == 1)) {
                    libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], (TextWithColor(StringExternal("Param/Value/10CC2831"), Color(100.00, 0.00, 0.00)) + TextWithColor(FixedToText(gv_modelRewards[lv_a][lv_b][lv_c].lv_requiredreputation, 0), Color(87.45, 80.39, 40.00)) + TextWithColor(StringExternal("Param/Value/CA06AA1E"), Color(100.00, 0.00, 0.00))), PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemTooltip(gv_reward_Button[lv_a], TextWithColor(StringToText(gv_modelRewards[lv_a][lv_b][lv_c].lv_requirement), Color(100.00, 0.00, 0.00)), PlayerGroupSingle(EventPlayer()));
                }
                libNtve_gf_SetDialogItemColor(gv_reward_Border[lv_a], Color(100.00, 0.00, 0.00), PlayerGroupSingle(EventPlayer()));
            }
            DialogControlSetVisible(gv_reward_Border[lv_a], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_reward_Button[lv_a], PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_reward_Border[lv_a], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_reward_Button[lv_a], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeRewardType_Init () {
    gt_ChangeRewardType = TriggerCreate("gt_ChangeRewardType_Func");
    TriggerAddEventDialogControl(gt_ChangeRewardType, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Direction
//--------------------------------------------------------------------------------------------------
bool gt_Direction_Func (bool testConds, bool runActions) {
    int auto471FDADB_ae;
    int auto471FDADB_ai;

    // Variable Declarations
    int lv_i;
    int lv_button;
    point lv_target;

    // Variable Initialization
    lv_button = -1;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_directionsdialogbuttons[0]) || (EventDialogControl() == gv_directionsdialogbuttons[1]) || (EventDialogControl() == gv_directionsdialogbuttons[2]) || (EventDialogControl() == gv_directionsdialogbuttons[3]) || (EventDialogControl() == gv_directionsdialogbuttons[4]) || (EventDialogControl() == gv_directionsdialogbuttons[5])))) {
            return false;
        }

        if (!((UnitGetOwner(gv_pilots[EventPlayer()]) == EventPlayer()))) {
            return false;
        }

        if (!((libNtve_gf_UnitIsHidden(gv_pilots[EventPlayer()]) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto471FDADB_ae = 5;
    auto471FDADB_ai = 1;
    lv_i = 0;
    for ( ; ( (auto471FDADB_ai >= 0 && lv_i <= auto471FDADB_ae) || (auto471FDADB_ai <= 0 && lv_i >= auto471FDADB_ae) ) ; lv_i += auto471FDADB_ai ) {
        if ((EventDialogControl() == gv_directionsdialogbuttons[lv_i])) {
            lv_button = lv_i;
        }
        else {
        }
    }
    lv_target = gv_directionLocations[gf_GetPlayerTeam(EventPlayer())][lv_button];
    if ((RegionContainsPoint(gf_GetUnitFloor(gv_pilots[EventPlayer()]), lv_target) == true)) {
        UnitIssueOrder(gv_pilots[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), lv_target), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(gv_pilots[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[EventPlayer()])))), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        gv_direction[EventPlayer()] = lv_target;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Direction_Init () {
    gt_Direction = TriggerCreate("gt_Direction_Func");
    TriggerAddEventDialogControl(gt_Direction, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear direction
//--------------------------------------------------------------------------------------------------
bool gt_Cleardirection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_direction[EventPlayer()] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_direction[EventPlayer()] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cleardirection_Init () {
    gt_Cleardirection = TriggerCreate("gt_Cleardirection_Func");
    TriggerAddEventUnitAbility(gt_Cleardirection, null, AbilityCommand("move", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close direction
//--------------------------------------------------------------------------------------------------
bool gt_Closedirection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_closeDirections))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_directionsdialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_openDirectionsdialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Closedirection_Init () {
    gt_Closedirection = TriggerCreate("gt_Closedirection_Func");
    TriggerAddEventDialogControl(gt_Closedirection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open direction
//--------------------------------------------------------------------------------------------------
bool gt_Opendirection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_openDirections))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_directionsdialog, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_openDirectionsdialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Opendirection_Init () {
    gt_Opendirection = TriggerCreate("gt_Opendirection_Func");
    TriggerAddEventDialogControl(gt_Opendirection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ship Status update
//--------------------------------------------------------------------------------------------------
bool gt_ShipStatusupdate_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_a;
    fixed lv_maxHull;
    fixed lv_currHull;
    fixed lv_maxShields;
    fixed lv_currShields;
    int[11] lv_battlecruiser_regions;
    int lv_team;
    fixed lv_red;
    int lv_i;
    fixed lv_green;
    color lv_untitledVariable001;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_battlecruiser_regions[init_i] = c_invalidDialogControlId;
    }
    lv_untitledVariable001 = Color(0,0,0);

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if(gv_gameover == false){
            lv_team = 1;
            while(lv_team<3){
                lv_i = gf_shipToIndex(gv_battlecruisers[lv_team]);
                lv_currHull = UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropLife, c_unitPropCurrent);
                lv_maxHull = UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropLifeMax, c_unitPropCurrent);
                lv_currShields = UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropShields, c_unitPropCurrent);
                lv_maxShields = UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropShieldsMax, c_unitPropCurrent);
                if(lv_currHull / lv_maxHull >= 0.5){
                    lv_green = 100.0;
                    lv_red = (1 - ((lv_currHull - (lv_maxHull / 2)) / (lv_maxHull / 2))) * 100;
                } else if(lv_currHull / lv_maxHull < 0.5){
                    lv_green = (lv_currHull / (lv_maxHull / 2))*100;
                    lv_red = 100.0;
                } else {
                    Print("Something's fishy");
                }
                libNtve_gf_SetDialogItemText(gv_hull_label, StringToText("<s val=\"PlanetPanelTechnologyName\">")+TextWithColor(StringToText("Hull: "), Color(0.00, 100.00, 0.00))+TextWithColor(FixedToText(lv_currHull,0)+StringToText("/")+FixedToText(lv_maxHull,0),Color(lv_red,lv_green,0.00))+StringToText("</s>"), GameAttributePlayersForTeam(lv_team));
                    
                if(lv_maxShields > 0){
                    libNtve_gf_SetDialogItemText(gv_shield_label, StringToText("<s val=\"PlanetPanelTechnologyName\">")+TextWithColor(StringToText("Shield: "), Color(0.00, 0.00, 100.00))+TextWithColor(FixedToText(lv_currShields,0)+StringToText("/")+FixedToText(lv_maxShields,0),Color((1-lv_currShields/lv_maxShields)*100.00,(1-lv_currShields/lv_maxShields)*100.00,100.00))+StringToText("</s>"), GameAttributePlayersForTeam(lv_team));
                } else {
                    libNtve_gf_SetDialogItemText(gv_shield_label, StringToText("<s val=\"PlanetPanelTechnologyName\">")+StringToText("Shield *Offline*: 0/0")+StringToText("</s>"), GameAttributePlayersForTeam(lv_team));
                }
                libNtve_gf_SetDialogItemText(gv_missiles_label, StringToText("<s val=\"PlanetPanelTechnologyName\">") + TextWithColor(StringToText("Loaded missiles: ")+IntToText(gv_loadedMissiles[lv_team])+StringToText("/6</s>"),Color(100.00,0.00,0.00)), GameAttributePlayersForTeam(lv_team));
                libNtve_gf_SetDialogItemText(gv_energy_label, StringToText("<s val=\"PlanetPanelTechnologyName\">") + TextWithColor(StringToText("Energy: ")+FixedToText(UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropEnergy, c_unitPropCurrent),0)+StringToText(" GJ</s>"),Color(0.00,100.00,100.00)), GameAttributePlayersForTeam(lv_team));
                libNtve_gf_SetDialogItemText(gv_weapon_energy_label, StringToText("<s val=\"PlanetPanelTechnologyName\">") + TextWithColor(StringToText("Weapon cap: ")+IntToText(gv_energy_weapons_capacitor[lv_i])+StringToText(" GJ</s>"),Color(0.00,80.00,80.00)), GameAttributePlayersForTeam(lv_team));
                libNtve_gf_SetDialogItemText(gv_speed_label, StringToText("<s val=\"PlanetPanelTechnologyName\">") + TextWithColor(StringToText("Speed: ")+FixedToText(10.0 * gf_PhysicsGetSpeed(gv_battlecruisers[lv_team]), 1)+StringToText("m/s</s>"),Color(100.00,100.00,0.00)), GameAttributePlayersForTeam(lv_team));
                libNtve_gf_SetDialogItemText(gv_core_label, StringToText("<s val=\"PlanetPanelTechnologyName\">") + TextWithColor(StringToText("Core Stability: ")+FixedToText(gv_energy_core_stability[gf_shipToIndex(gv_battlecruisers[lv_team])],2)+StringToText("%</s>"),Color(100.00,50.00,0.00)), GameAttributePlayersForTeam(lv_team));
                lv_team += 1;
            }
        } else {
            break;
        }
        //Wait(1,c_timeGame);
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShipStatusupdate_Init () {
    gt_ShipStatusupdate = TriggerCreate("gt_ShipStatusupdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ship status Minimize/Maximize
//--------------------------------------------------------------------------------------------------
bool gt_ShipstatusMinimizeMaximize_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_shipStatusMaxmin))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_shipStatus, EventPlayer()) == true)) {
        DialogSetVisible(gv_shipStatus, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemImage(gv_shipStatusMaxminimage, "EditorData\\Images\\MoveDown.tga", PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogSetVisible(gv_shipStatus, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemImage(gv_shipStatusMaxminimage, "EditorData\\Images\\MoveUp.tga", PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShipstatusMinimizeMaximize_Init () {
    gt_ShipstatusMinimizeMaximize = TriggerCreate("gt_ShipstatusMinimizeMaximize_Func");
    TriggerAddEventDialogControl(gt_ShipstatusMinimizeMaximize, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select console
//--------------------------------------------------------------------------------------------------
bool gt_Selectconsole_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_selectConsoleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(EventPlayer());
    UnitSelect(UnitGroupRandomUnit(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Selectconsole_Init () {
    gt_Selectconsole = TriggerCreate("gt_Selectconsole_Func");
    TriggerAddEventDialogControl(gt_Selectconsole, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Select Console
//--------------------------------------------------------------------------------------------------
bool gt_ShowSelectConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_consolePlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == EventPlayer()) && ((UnitGetType(EventUnit()) == "HackingDevice") || (UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        DialogSetVisible(gv_selectConsole, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_selectConsole, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowSelectConsole_Init () {
    gt_ShowSelectConsole = TriggerCreate("gt_ShowSelectConsole_Func");
    TriggerAddEventUnitSelected(gt_ShowSelectConsole, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Console
//--------------------------------------------------------------------------------------------------
bool gt_LeaveConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_LeaveConsole(EventPlayer(), gv_pilots[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveConsole_Init () {
    gt_LeaveConsole = TriggerCreate("gt_LeaveConsole_Func");
    TriggerAddEventUnitAbility(gt_LeaveConsole, null, AbilityCommand("LeaveConsole", 255), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disconnect Console
//--------------------------------------------------------------------------------------------------
bool gt_DisconnectConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;
    int lv_buffs;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buffs = UnitBehaviorCount(EventUnitTargetUnit(), "DisconnectConsole");
    lv_closestU = gf_getClosestConsoleMarine(UnitGetPosition(EventUnitTargetUnit()));
    PlayerGroupAdd(gv_afkplayers[gf_GetPlayerTeam(EventPlayer())], UnitGetOwner(EventUnitTargetUnit()));
    if ((lv_buffs == 2)) {
        TextTagSetText(gv_afkTextTag[UnitGetOwner(EventUnitTargetUnit())], TextWithColor(StringExternal("Param/Value/D3B898FA"), Color(100.00, 0.00, 0.00)));
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), c_messageAreaDirective, StringExternal("Param/Value/80E4A28B"));
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitTargetUnit())), c_messageAreaSubtitle, (StringExternal("Param/Value/C88E5CFE") + IntToText(UnitGetOwner(EventUnitTargetUnit())) + StringExternal("Param/Value/94966590") + IntToText(UnitGetOwner(lv_closestU))));
        gf_LeaveConsole(UnitGetOwner(EventUnitTargetUnit()), lv_closestU);
        UnitSetPosition(gv_pilots[UnitGetOwner(EventUnitTargetUnit())], PointWithOffsetPolar(UnitGetPosition(gv_pilots[UnitGetOwner(EventUnitTargetUnit())]), 2.0, AngleBetweenPoints(UnitGetPosition(EventUnitTargetUnit()), UnitGetPosition(lv_closestU))), true);
        UnitBehaviorRemove(EventUnitTargetUnit(), "DisconnectConsole", 3);
    }
    else {
        if ((gv_afkTextTag[UnitGetOwner(EventUnitTargetUnit())] == c_textTagNone)) {
            TextTagCreate(StringExternal("Param/Value/1018FA5B"), 24, UnitGetPosition(lv_closestU), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), lv_closestU, 1.0);
            gv_afkTextTag[UnitGetOwner(EventUnitTargetUnit())] = TextTagLastCreated();
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisconnectConsole_Init () {
    gt_DisconnectConsole = TriggerCreate("gt_DisconnectConsole_Func");
    TriggerAddEventUnitAbility(gt_DisconnectConsole, null, AbilityCommand("DisconnectConsole", 255), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear afk
//--------------------------------------------------------------------------------------------------
bool gt_Clearafk_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_afkplayers[gf_GetPlayerTeam(EventPlayer())], EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "DisconnectConsole", 3);
    PlayerGroupRemove(gv_afkplayers[gf_GetPlayerTeam(EventPlayer())], EventPlayer());
    TextTagDestroy(gv_afkTextTag[EventPlayer()]);
    UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaDirective);
    gv_afkTextTag[EventPlayer()] = c_textTagNone;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Clearafk_Init () {
    gt_Clearafk = TriggerCreate("gt_Clearafk_Func");
    TriggerAddEventUnitAbility(gt_Clearafk, null, AbilityCommand("move", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Console (Movement)
//--------------------------------------------------------------------------------------------------
bool gt_LeaveConsoleMovement_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "InConsole") == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventUnitTargetPoint() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_LeaveConsole(UnitGetOwner(EventUnit()), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveConsoleMovement_Init () {
    gt_LeaveConsoleMovement = TriggerCreate("gt_LeaveConsoleMovement_Func");
    TriggerAddEventUnitAbility(gt_LeaveConsoleMovement, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport left top
//--------------------------------------------------------------------------------------------------
bool gt_Teleportlefttop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_reg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Teleporting") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PathingBlocker1x1"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBotStation"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "C4Explosive"))) {
            return false;
        }

        if (!((UnitInventoryUnit(EventUnit()) == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tutorial_FirstTimeThroughTeleporters[EventPlayer()] == true) && (PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true)) {
        gf_TipHangar(EventPlayer());
    }
    else {
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true)) {
        UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
        UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(1116)), false);
        lv_reg = RegionFromId(34);
    }
    else {
        if ((EventPlayer() != 0)) {
            UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
            UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(1405)), false);
            lv_reg = RegionFromId(35);
        }
        else {
            UnitSetPosition(EventUnit(), PointWithOffsetPolar(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()))), 3.5, 0.0), false);
        }
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((gv_view[EventPlayer()] == 0)) {
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), lv_reg, true);
        CameraPan(EventPlayer(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    }
    else {
    }
    if ((gv_direction[EventPlayer()] != null)) {
        UnitIssueOrder(gv_pilots[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), gv_direction[EventPlayer()]), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleportlefttop_Init () {
    gt_Teleportlefttop = TriggerCreate("gt_Teleportlefttop_Func");
    TriggerAddEventUnitRange(gt_Teleportlefttop, null, UnitFromId(3837), 2.0, true);
    TriggerAddEventUnitRange(gt_Teleportlefttop, null, UnitFromId(3080), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport left bottom
//--------------------------------------------------------------------------------------------------
bool gt_Teleportleftbottom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_reg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Teleporting") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PathingBlocker1x1"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBotStation"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "C4Explosive"))) {
            return false;
        }

        if (!((UnitInventoryUnit(EventUnit()) == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(34)) == true)) {
        UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
        UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(3837)), false);
        lv_reg = RegionFromId(2);
    }
    else {
        if ((EventPlayer() != 0)) {
            UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
            UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(3080)), false);
            lv_reg = RegionFromId(33);
        }
        else {
            UnitSetPosition(EventUnit(), PointWithOffsetPolar(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()))), 3.5, 0.0), false);
        }
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((gv_view[EventPlayer()] == 0)) {
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), lv_reg, true);
        CameraPan(EventPlayer(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    }
    else {
    }
    if ((gv_direction[EventPlayer()] != null)) {
        UnitIssueOrder(gv_pilots[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), gv_direction[EventPlayer()]), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleportleftbottom_Init () {
    gt_Teleportleftbottom = TriggerCreate("gt_Teleportleftbottom_Func");
    TriggerAddEventUnitRange(gt_Teleportleftbottom, null, UnitFromId(1405), 2.0, true);
    TriggerAddEventUnitRange(gt_Teleportleftbottom, null, UnitFromId(1116), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport right top
//--------------------------------------------------------------------------------------------------
bool gt_Teleportrighttop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_reg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Teleporting") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PathingBlocker1x1"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBotStation"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "C4Explosive"))) {
            return false;
        }

        if (!((UnitInventoryUnit(EventUnit()) == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tutorial_FirstTimeThroughTeleporters[EventPlayer()] == true) && (PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true)) {
        gf_TipHangar(EventPlayer());
    }
    else {
    }
    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(2)) == true)) {
        UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
        UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(1771)), false);
        lv_reg = RegionFromId(34);
    }
    else {
        if ((EventPlayer() != 0)) {
            UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
            UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(1414)), false);
            lv_reg = RegionFromId(35);
        }
        else {
            UnitSetPosition(EventUnit(), PointWithOffsetPolar(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()))), 3.5, 180.0), false);
        }
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((gv_view[EventPlayer()] == 0)) {
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), lv_reg, true);
        CameraPan(EventPlayer(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    }
    else {
    }
    if ((gv_direction[EventPlayer()] != null)) {
        UnitIssueOrder(gv_pilots[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), gv_direction[EventPlayer()]), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleportrighttop_Init () {
    gt_Teleportrighttop = TriggerCreate("gt_Teleportrighttop_Func");
    TriggerAddEventUnitRange(gt_Teleportrighttop, null, UnitFromId(1549), 2.0, true);
    TriggerAddEventUnitRange(gt_Teleportrighttop, null, UnitFromId(1991), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teleport right bottom
//--------------------------------------------------------------------------------------------------
bool gt_Teleportrightbottom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_reg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "Teleporting") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "PathingBlocker1x1"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBot"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "RepairBotStation"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "C4Explosive"))) {
            return false;
        }

        if (!((UnitInventoryUnit(EventUnit()) == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(34)) == true)) {
        UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
        UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(1549)), false);
        lv_reg = RegionFromId(2);
    }
    else {
        if ((EventPlayer() != 0)) {
            UnitBehaviorAdd(EventUnit(), "Teleporting", EventUnit(), 1);
            UnitSetPosition(EventUnit(), UnitGetPosition(UnitFromId(1991)), false);
            lv_reg = RegionFromId(33);
        }
        else {
            UnitSetPosition(EventUnit(), PointWithOffsetPolar(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()))), 3.5, 180.0), false);
        }
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((gv_view[EventPlayer()] == 0)) {
        CameraSetBounds(PlayerGroupSingle(EventPlayer()), lv_reg, true);
        CameraPan(EventPlayer(), UnitGetPosition(EventUnit()), 0.0, -1, 10, false);
    }
    else {
    }
    if ((gv_direction[EventPlayer()] != null)) {
        UnitIssueOrder(gv_pilots[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), gv_direction[EventPlayer()]), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Teleportrightbottom_Init () {
    gt_Teleportrightbottom = TriggerCreate("gt_Teleportrightbottom_Func");
    TriggerAddEventUnitRange(gt_Teleportrightbottom, null, UnitFromId(1414), 2.0, true);
    TriggerAddEventUnitRange(gt_Teleportrightbottom, null, UnitFromId(1771), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply upgrades
//--------------------------------------------------------------------------------------------------
bool gt_Applyupgrades_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogUpgrade, libNtve_gf_TriggeringProgressUpgrade(), "MaxLevel", c_playerAny) == "1")) {
        if ((libNtve_gf_TriggeringProgressUpgrade() == "YamatoCannon2")) {
            UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor((StringExternal("Param/Value/D281B271")), Color(100.00, 100.00, 0.00))));
        }
        else {
            UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor((StringExternal("Param/Value/A69AF6C4") + StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, (libNtve_gf_TriggeringProgressUpgrade()), "Name", c_playerAny))), Color(100.00, 100.00, 0.00))));
        }
    }
    else {
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor((StringExternal("Param/Value/BA81FA73") + StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, (libNtve_gf_TriggeringProgressUpgrade()), "Name", c_playerAny)) + StringExternal("Param/Value/E4BA5959") + IntToText(TechTreeUpgradeCount(EventPlayer(), libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly))), Color(100.00, 100.00, 0.00))));
    }
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), libNtve_gf_TriggeringProgressUpgrade(), TechTreeUpgradeCount(EventPlayer(), libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetUpgradeLevelForPlayer(gf_GetPlayerTeamAI(EventPlayer()), libNtve_gf_TriggeringProgressUpgrade(), TechTreeUpgradeCount(EventPlayer(), libNtve_gf_TriggeringProgressUpgrade(), c_techCountCompleteOnly));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Applyupgrades_Init () {
    gt_Applyupgrades = TriggerCreate("gt_Applyupgrades_Func");
    TriggerAddEventUnitResearchProgress(gt_Applyupgrades, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch View
//--------------------------------------------------------------------------------------------------
bool gt_SwitchView_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_switchViewButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_view[EventPlayer()] == 0)) {
        gf_SpaceView(EventPlayer(), gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    }
    else {
        gf_ShipView(EventPlayer(), gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchView_Init () {
    gt_SwitchView = TriggerCreate("gt_SwitchView_Func");
    TriggerAddEventDialogControl(gt_SwitchView, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conveyor Belt
//--------------------------------------------------------------------------------------------------
bool gt_ConveyorBelt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_counter;
    unit lv_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_counter += 1;
        if ((ModI(lv_counter, 20) == 0)) {
            lv_u = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionFromId(57), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterItem), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_u != null)) {
                UnitBehaviorAdd(lv_u, "Refining", lv_u, 1);
                UnitSetPosition(lv_u, PointWithOffsetPolar(RegionGetCenter(RegionFromId(57)), 3.0, 0.0), false);
            }
            else {
            }
            lv_u = UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionFromId(58), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterItem), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_u != null)) {
                UnitBehaviorAdd(lv_u, "Refining", lv_u, 1);
                UnitSetPosition(lv_u, PointWithOffsetPolar(RegionGetCenter(RegionFromId(58)), 3.0, 0.0), false);
            }
            else {
            }
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_MoveRefiningMinerals(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_MoveRefiningMinerals(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_preloadingmissiles);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            gf_MoveMissiles(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        Wait(0.05, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConveyorBelt_Init () {
    gt_ConveyorBelt = TriggerCreate("gt_ConveyorBelt_Func");
    TriggerAddEventTimeElapsed(gt_ConveyorBelt, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repair kit(Remove item)
//--------------------------------------------------------------------------------------------------
bool gt_RepairkitRemoveitem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Repairkit")) {
            UnitRemove(UnitGroupLoopCurrent());
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepairkitRemoveitem_Init () {
    gt_RepairkitRemoveitem = TriggerCreate("gt_RepairkitRemoveitem_Func");
    TriggerAddEventUnitAbility(gt_RepairkitRemoveitem, null, AbilityCommand("Repair2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hull repairs
//--------------------------------------------------------------------------------------------------
bool gt_Hullrepairs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], c_unitPropLife, (UnitGetPropertyFixed(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], c_unitPropLife, c_unitPropCurrent) + (0.01 * UnitGetPropertyFixed(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], c_unitPropLifeMax, c_unitPropCurrent))));
    UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "Hullrepairs", EventUnit(), 1);
    libNtve_gf_AttachActorToUnit(EventUnit(), "SoundHullRepairs", "Ref_Origin");
    libNtve_gf_AttachActorToUnit(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "SoundHullRepairs", "Ref_Origin");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hullrepairs_Init () {
    gt_Hullrepairs = TriggerCreate("gt_Hullrepairs_Func");
    TriggerAddEventUnitAbility(gt_Hullrepairs, null, AbilityCommand("Hullrepairs", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drone Loop
//--------------------------------------------------------------------------------------------------
bool gt_DroneLoop_Func (bool testConds, bool runActions) {
    int autoA484C13A_ae;
    int autoA484C13A_ai;
    int auto5C8EDC0D_val;
    int autoD2EBF024_val;
    int auto2FF1C234_ae;
    int auto2FF1C234_ai;
    int auto4B8AEB6B_ae;
    int auto4B8AEB6B_ai;
    int auto104C40A1_val;
    int auto59E26D20_val;
    unitgroup auto8808BF33_g;
    int auto8808BF33_u;
    int autoA9C630F3_val;
    int auto582243AD_ae;
    int auto582243AD_ai;
    int auto959C2853_val;
    unitgroup auto5B53D548_g;
    int auto5B53D548_u;
    int auto10F6053A_val;
    int auto56436143_val;

    // Variable Declarations
    int lv_correctFloor;
    unit lv_closestRepairStation;
    point lv_p1;
    point lv_p2;
    fixed lv_width;
    int lv_i;
    int lv_a;
    int lv_b;
    unit lv_avatar;
    unit lv_ship;
    unit lv_t;
    unitgroup lv_nearbyAsteroids;
    int lv_foundMiner;
    fixed lv_charges;
    int lv_targetMissileBay;
    unit[3] lv_constructionBeacons;
    unit[3] lv_constructionConsoles;
    unit lv_beacon;
    fixed lv_angle;
    unitgroup lv_ug;
    unit lv_u;
    unit lv_closestBeacon;
    unit lv_closestConsole;
    unit lv_target;
    unit lv_target2;
    unit lv_item;
    point lv_u_point;
    fixed lv_ux;
    fixed lv_uy;
    const fixed lv_vmag = 55.0;
    fixed lv_ax;
    fixed lv_ay;
    fixed lv_bx;
    fixed lv_by;
    fixed lv_aBx;
    fixed lv_aBy;
    fixed lv_aBmag;
    fixed lv_uDotAB;
    fixed lv_ujx;
    fixed lv_ujy;
    fixed lv_uix;
    fixed lv_uiy;
    fixed lv_vix;
    fixed lv_viy;
    fixed lv_vjx;
    fixed lv_vjy;
    fixed lv_vx;
    fixed lv_vy;
    fixed lv_vjMag;
    fixed lv_viMag;
    fixed lv_cost;
    abilcmd lv_ability;
    bool lv_emergency;
    fixed lv_newminerX;
    fixed lv_newminerY;
    point[3] lv_enemyBCLastSeen;
    unitgroup lv_minerals;
    unitgroup lv_missiles;

    // Variable Initialization
    lv_correctFloor = 2;
    lv_nearbyAsteroids = UnitGroupEmpty();
    lv_foundMiner = -1;
    lv_ug = UnitGroupEmpty();
    lv_minerals = UnitGroupEmpty();
    lv_missiles = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_constructionBeacons[1] = UnitFromId(4191);
    lv_constructionBeacons[2] = UnitFromId(4193);
    lv_constructionConsoles[1] = UnitFromId(4188);
    lv_constructionConsoles[2] = UnitFromId(4189);
    lv_enemyBCLastSeen[1] = UnitGetPosition(UnitFromId(3));
    lv_enemyBCLastSeen[2] = UnitGetPosition(UnitFromId(8));
    while (true) {
        UIDisplayMessage(gv_debugplayers, c_messageAreaError, StringExternal("Param/Value/C6241352"));
        gv_lastDroneLoop = GameGetMissionTime();
        Wait(0.5, c_timeGame);
        IntLoopBegin(1, 2);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_battlecruisers[0] != null) && (libNtve_gf_UnitIsVisibleToPlayer(gv_battlecruisers[(3 - IntLoopCurrent())], (12 + IntLoopCurrent())) == true)) {
                lv_enemyBCLastSeen[IntLoopCurrent()] = UnitGetPosition(gv_battlecruisers[(3 - IntLoopCurrent())]);
            }
            else {
            }
            autoA484C13A_ae = gv_droneSize;
            autoA484C13A_ai = 1;
            lv_a = 1;
            for ( ; ( (autoA484C13A_ai >= 0 && lv_a <= autoA484C13A_ae) || (autoA484C13A_ai <= 0 && lv_a >= autoA484C13A_ae) ) ; lv_a += autoA484C13A_ai ) {
                lv_avatar = gv_drones[IntLoopCurrent()][lv_a].lv_avatar;
                lv_ship = gv_drones[IntLoopCurrent()][lv_a].lv_ship;
                if ((lv_avatar != null) && (gv_drones[IntLoopCurrent()][lv_a].lv_respawning == false)) {
                    if ((gv_drones[IntLoopCurrent()][lv_a].lv_currentOrder != 0)) {
                        if ((gv_drones[IntLoopCurrent()][lv_a].lv_status == -1)) {
                            if ((libNtve_gf_UnitInRegion(lv_avatar, gv_bCareas[IntLoopCurrent()][0][4]) == true)) {
                                if ((gv_drones[IntLoopCurrent()][lv_a].lv_targetspace == 1)) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 0;
                                }
                                else {
                                    gf_ChangeDroneStatus(lv_a, IntLoopCurrent(), "On its way to bottom floor.");
                                    lv_beacon = UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, gv_bCareas[IntLoopCurrent()][0][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_avatar));
                                    if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(lv_beacon)) >= 2.0)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
                                    }
                                    else {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                    }
                                }
                            }
                            else {
                                if ((libNtve_gf_UnitIsHidden(lv_avatar) == false)) {
                                    if ((gv_drones[IntLoopCurrent()][lv_a].lv_targetspace == 2)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 0;
                                    }
                                    else {
                                        if ((gv_drones[IntLoopCurrent()][lv_a].lv_targetspace == 3)) {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 0;
                                        }
                                        else {
                                            gf_ChangeDroneStatus(lv_a, IntLoopCurrent(), "On its way to top floor.");
                                            lv_beacon = UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_avatar));
                                            if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(lv_beacon)) >= 2.0)) {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
                                            }
                                            else {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_mineraldropoff[IntLoopCurrent()]), c_orderQueueReplace);
                                            }
                                        }
                                    }
                                }
                                else {
                                    if ((gv_drones[IntLoopCurrent()][lv_a].lv_targetspace == 3)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 0;
                                    }
                                    else {
                                        if ((DistanceBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()])) > 4.0)) {
                                            gf_ChangeDroneStatus(lv_a, IntLoopCurrent(), "On its way back to the Battlecruiser.");
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                            lv_angle = gf_ClosestAngleBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]));
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueAddToEnd);
                                        }
                                        else {
                                            if ((UnitHasBehavior(lv_ship, "Docking") == false)) {
                                                gf_ChangeDroneStatus(lv_a, IntLoopCurrent(), "Docking with the Battlecruiser.");
                                                UnitBehaviorAdd(lv_ship, "Docking", lv_ship, 1);
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("Dock", 0)), c_orderQueueReplace);
                                            }
                                            else {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ((DialogControlGetSelectedItem(gv_droneDropdown, PlayerGroupPlayer(GameAttributePlayersForTeam(IntLoopCurrent()), 1)) == lv_a)) {
                                libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/A0BB47FE") + gf_orderToText(gv_drones[IntLoopCurrent()][lv_a].lv_currentOrder, IntLoopCurrent(), lv_a)) + (StringExternal("Param/Value/4FABFF66") + gf_statusToText(gv_drones[IntLoopCurrent()][lv_a].lv_status))), GameAttributePlayersForTeam(IntLoopCurrent()));
                            }
                            else {
                            }
                            auto5C8EDC0D_val = gv_drones[IntLoopCurrent()][lv_a].lv_currentOrder;
                            if (auto5C8EDC0D_val == 1) {
                                lv_emergency = true;
                                if ((lv_ship != null) && (UnitHasBehavior(lv_ship, "CastingTurboJump") == false)) {
                                    lv_angle = UnitGetFacing(lv_ship);
                                    lv_ug = UnitGroupAlliance(UnitGetOwner(lv_ship), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_ship), 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                    if (((gv_loopturnedoff == true))) {
                                        lv_angle = AngleBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]));
                                    }
                                    else {
                                        lv_angle = gf_ClosestAngleBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]));
                                    }
                                    if ((UnitGroupCount(lv_ug, c_unitCountAlive) > 0)) {
                                        UnitBehaviorAdd(lv_ship, "EnemyNearby", lv_ship, 1);
                                        gv_drones[IntLoopCurrent()][lv_a].lv_oldEnemyLocation = UnitGetPosition(UnitGroupClosestToPoint(lv_ug, UnitGetPosition(lv_ship)));
                                        if (((UnitGetType(UnitGroupUnit(lv_ug, 1)) != "Medivac") || (UnitGroupCount(lv_ug, c_unitCountAlive) > 1)) && (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) >= 250.0) && (UnitAbilityGetCooldown(gf_shipToNavigator(lv_ship), "TurboJump", "Abil/TurboJump") == 0.0) && (UnitHasBehavior(gf_shipToNavigator(lv_ship), "EMPFornavigatedships") == false)) {
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueAddToEnd);
                                            Wait(0.5, c_timeGame);
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("TurboJump", 0)), c_orderQueueReplace);
                                            UnitBehaviorAdd(lv_ship, "CastingTurboJump", lv_ship, 1);
                                        }
                                        else {
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueAddToEnd);
                                        }
                                    }
                                    else {
                                        if ((UnitBehaviorDuration(lv_ship, "EnemyNearby") >= 8.5) && (DistanceBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()])) >= 15.0)) {
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueAddToEnd);
                                        }
                                        else {
                                            if (((UnitGetPropertyFixed(lv_ship, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) || (UnitHasBehavior(lv_ship, "EnemyNearby") == true))) {
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                                if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_ship), 2.1, UnitGetFacing(lv_ship)), 1.8), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), c_unitCountAlive) > 0)) {
                                                    UnitIssueOrder(gf_shipToNavigator(gv_drones[IntLoopCurrent()][lv_a].lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                                    UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, (UnitGetFacing(lv_ship) + 35.0))), c_orderQueueAddToEnd);
                                                }
                                                else {
                                                    UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueAddToEnd);
                                                }
                                                if ((DistanceBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()])) <= 6.5)) {
                                                    UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("Dock", 0)), c_orderQueueAddToEnd);
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = -1;
                                                }
                                                else {
                                                }
                                            }
                                            else {
                                                lv_emergency = false;
                                            }
                                        }
                                    }
                                }
                                else {
                                    lv_emergency = false;
                                }
                                if ((lv_emergency == false) && (UnitHasBehavior(lv_ship, "CastingTurboJump") == false)) {
                                    autoD2EBF024_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                    if (autoD2EBF024_val == 0) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_target = null;
                                        if ((libNtve_gf_UnitIsHidden(lv_avatar) == false)) {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 1;
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 2;
                                        }
                                    }
                                    else if (autoD2EBF024_val == 1) {
                                        if ((libNtve_gf_UnitInRegion(lv_avatar, gv_bCareas[IntLoopCurrent()][0][4]) == true)) {
                                            lv_beacon = UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, gv_bCareas[IntLoopCurrent()][0][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_avatar));
                                            if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(lv_beacon)) >= 2.0)) {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_beacon)), c_orderQueueReplace);
                                            }
                                            else {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_mineraldropoff[IntLoopCurrent()]), c_orderQueueReplace);
                                            }
                                        }
                                        else {
                                            if ((UnitGroupCount(gf_getNonOccupiedConsoles(UnitGroup("Beacon_ProtossSmall", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), c_unitCountAlive) >= 1)) {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(gf_getNonOccupiedConsoles(UnitGroup("Beacon_ProtossSmall", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), UnitGetPosition(lv_avatar)))), c_orderQueueReplace);
                                            }
                                            else {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_mineraldropoff[IntLoopCurrent()]), c_orderQueueReplace);
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = 6;
                                            }
                                            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_avatar))), UnitGetPosition(lv_avatar)) <= 0.9)) {
                                                lv_foundMiner = -1;
                                                auto2FF1C234_ae = 20;
                                                auto2FF1C234_ai = 1;
                                                lv_b = 0;
                                                for ( ; ( (auto2FF1C234_ai >= 0 && lv_b <= auto2FF1C234_ae) || (auto2FF1C234_ai <= 0 && lv_b >= auto2FF1C234_ae) ) ; lv_b += auto2FF1C234_ai ) {
                                                    if ((gv_shipList[IntLoopCurrent()][lv_b].lv_status == 0) && (gv_shipList[IntLoopCurrent()][lv_b].lv_shipType == 0) && (gv_shipList[IntLoopCurrent()][lv_b].lv_currentRespawn == 0)) {
                                                        lv_foundMiner = lv_b;
                                                        break;
                                                    }
                                                    else {
                                                    }
                                                }
                                                if ((lv_foundMiner != -1)) {
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 2;
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_ship = gf_Launchship((12 + IntLoopCurrent()), lv_foundMiner, gv_drones[IntLoopCurrent()][lv_a].lv_avatar, IntLoopCurrent());
                                                }
                                                else {
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 5;
                                                }
                                            }
                                            else {
                                            }
                                        }
                                    }
                                    else if (autoD2EBF024_val == 2) {
                                        if ((gf_shipToIndex(lv_ship) != -1)) {
                                            lv_nearbyAsteroids = gf_UnitGroupMatchingAsteroidType(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_ship), 6.5), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_a, IntLoopCurrent());
                                            if (((gv_nav_speed[gf_shipToIndex(lv_ship)] * IntToFixed(gv_energy_engine[gf_shipToIndex(lv_ship)])) < 20.0)) {
                                                UnitIssueOrder(gf_shipToNavigator(gv_drones[IntLoopCurrent()][lv_a].lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                            }
                                            else {
                                            }
                                            if ((UnitGroupCount(lv_nearbyAsteroids, c_unitCountAlive) > 0)) {
                                                lv_t = UnitGroupClosestToPoint(lv_nearbyAsteroids, UnitGetPosition(lv_ship));
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = 3;
                                                gv_drones[IntLoopCurrent()][lv_a].lv_target = lv_t;
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), UnitGetPosition(lv_t)), c_orderQueueReplace);
                                            }
                                            else {
                                                lv_ug = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_ship), 2.1, lv_angle), 1.5), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterPlayer) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
                                                if ((UnitGroupCount(lv_ug, c_unitCountAlive) > 0)) {
                                                    lv_angle = (AngleBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(UnitGroupClosestToPoint(lv_ug, UnitGetPosition(lv_ship)))) + 35.0);
                                                    UnitIssueOrder(gf_shipToNavigator(gv_drones[IntLoopCurrent()][lv_a].lv_ship), Order(AbilityCommand("Accelerate", 0)), c_orderQueueReplace);
                                                    UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueAddToEnd);
                                                }
                                                else {
                                                    if ((UnitHasBehavior(lv_ship, "DroneAIOrderCooldown") == false)) {
                                                        UnitBehaviorAdd(lv_ship, "DroneAIOrderCooldown", lv_ship, 1);
                                                        if ((RandomInt(0, 100) >= 80)) {
                                                            lv_angle = (UnitGetFacing(lv_ship) + RandomInt(-35, 35));
                                                            UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingPoint(AbilityCommand("moveNav", 0), PointWithOffsetPolar(UnitGetPosition(lv_ship), 5.0, lv_angle)), c_orderQueueReplace);
                                                        }
                                                        else {
                                                        }
                                                    }
                                                    else {
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    else if (autoD2EBF024_val == 3) {
                                        if ((gf_shipToIndex(lv_ship) != -1)) {
                                            if ((UnitGetPropertyFixed(lv_ship, c_unitPropMovementSpeed, c_unitPropCurrent) < 0.01)) {
                                                Wait(0.0, c_timeGame);
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("ScannerSweep2", 0)), c_orderQueueReplace);
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingUnit(AbilityCommand("MineAstroidDummy", 0), gv_drones[IntLoopCurrent()][lv_a].lv_target), c_orderQueueReplace);
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = 4;
                                            }
                                            else {
                                                UnitIssueOrder(gf_shipToNavigator(gv_drones[IntLoopCurrent()][lv_a].lv_ship), Order(AbilityCommand("CutEngines", 0)), c_orderQueueReplace);
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    else if (autoD2EBF024_val == 4) {
                                        if ((gf_shipToIndex(lv_ship) != -1)) {
                                            lv_nearbyAsteroids = gf_UnitGroupMatchingAsteroidType(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_ship), 6.5), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_a, IntLoopCurrent());
                                            if ((UnitGetPropertyFixed(gf_shipToNavigator(lv_ship), c_unitPropEnergy, c_unitPropCurrent) >= 400.0) && (UnitGroupCount(lv_nearbyAsteroids, c_unitCountAlive) >= 2)) {
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("AccelerateMiningBeam", 0)), c_orderQueueReplace);
                                            }
                                            else {
                                            }
                                            if ((UnitGroupCount(UnitInventoryGroup(gf_shipToNavigator(lv_ship)), c_unitCountAll) >= 2)) {
                                                UnitIssueOrder(gf_shipToNavigator(lv_ship), Order(AbilityCommand("ReturnMineralsDummy", 0)), c_orderQueueReplace);
                                            }
                                            else {
                                            }
                                            if ((UnitHasBehavior(lv_ship, "Mining") == false)) {
                                                if ((UnitGroupCount(lv_nearbyAsteroids, c_unitCountAlive) > 0)) {
                                                    UnitIssueOrder(gf_shipToNavigator(lv_ship), OrderTargetingUnit(AbilityCommand("MineAstroidDummy", 0), UnitGroupClosestToPoint(lv_nearbyAsteroids, UnitGetPosition(lv_ship))), c_orderQueueReplace);
                                                }
                                                else {
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 2;
                                                }
                                            }
                                            else {
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    else if (autoD2EBF024_val == 5) {
                                        lv_foundMiner = -1;
                                        auto4B8AEB6B_ae = 20;
                                        auto4B8AEB6B_ai = 1;
                                        lv_b = 0;
                                        for ( ; ( (auto4B8AEB6B_ai >= 0 && lv_b <= auto4B8AEB6B_ae) || (auto4B8AEB6B_ai <= 0 && lv_b >= auto4B8AEB6B_ae) ) ; lv_b += auto4B8AEB6B_ai ) {
                                            if ((gv_shipList[IntLoopCurrent()][lv_b].lv_status == 0) && (gv_shipList[IntLoopCurrent()][lv_b].lv_shipType == 0)) {
                                                lv_foundMiner = lv_b;
                                                break;
                                            }
                                            else {
                                            }
                                        }
                                        if ((lv_foundMiner != -1)) {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 1;
                                        }
                                        else {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_mineraldropoff[IntLoopCurrent()]), c_orderQueueReplace);
                                        }
                                    }
                                    else if (autoD2EBF024_val == 6) {
                                        if ((UnitGroupCount(gf_getNonOccupiedConsoles(UnitGroup("Beacon_ProtossSmall", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), c_unitCountAlive) >= 1)) {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(gf_getNonOccupiedConsoles(UnitGroup("Beacon_ProtossSmall", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), UnitGetPosition(lv_avatar)))), c_orderQueueReplace);
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 1;
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                    }
                                }
                                else {
                                }
                            }
                            else if (auto5C8EDC0D_val == 2) {
                                auto104C40A1_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                if (auto104C40A1_val == 0) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 7;
                                }
                                else if (auto104C40A1_val == 7) {
                                    if ((libNtve_gf_UnitInRegion(lv_avatar, gv_bCareas[IntLoopCurrent()][0][4]) == true)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, gv_bCareas[IntLoopCurrent()][0][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_avatar)))), c_orderQueueReplace);
                                    }
                                    else {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 8;
                                    }
                                }
                                else if (auto104C40A1_val == 8) {
                                    lv_minerals = gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent());
                                    if (((UnitGroupCount(lv_minerals, c_unitCountAlive) == 0) || (DistanceBetweenPoints(UnitGetPosition(lv_avatar), RegionGetCenter(gv_refiningdrops[IntLoopCurrent()])) < DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(UnitGroupClosestToPoint(gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent()), UnitGetPosition(lv_avatar))))) || (UnitGroupCount(UnitInventoryGroup(lv_avatar), c_unitCountAll) == 6)) && (gf_Numberofmineralscarried(lv_avatar) > 0)) {
                                        if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), RegionGetCenter(gv_refiningdrops[IntLoopCurrent()])) < 4.5)) {
                                            UnitGroupLoopBegin(UnitInventoryGroup(lv_avatar));
                                            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                                if (((UnitGetType(UnitGroupLoopCurrent()) == "VelditeOre") || (UnitGetType(UnitGroupLoopCurrent()) == "ChalcoriumOre") || (UnitGetType(UnitGroupLoopCurrent()) == "PyromaniteOre") || (UnitGetType(UnitGroupLoopCurrent()) == "KermiculiteOre"))) {
                                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 0, PointWithOffsetPolar(RegionGetCenter(gv_refiningdrops[IntLoopCurrent()]), RandomFixed(0.0, 1.25), libNtve_gf_RandomAngle()));
                                                    lv_charges = lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent());
                                                    if ((lv_charges == 100.0)) {
                                                        lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
                                                        lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
                                                    }
                                                    else {
                                                        lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()));
                                                    }
                                                    UnitRemove(UnitGroupLoopCurrent());
                                                }
                                                else {
                                                }
                                            }
                                            UnitGroupLoopEnd();
                                        }
                                        else {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_refiningdrops[IntLoopCurrent()])), c_orderQueueReplace);
                                        }
                                    }
                                    else {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 9;
                                    }
                                }
                                else if (auto104C40A1_val == 9) {
                                    if ((PointPathingCost(UnitGetPosition(lv_avatar), gv_mineraldropoff[IntLoopCurrent()]) == -1)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("attack", 0), gv_mineraldropoff[IntLoopCurrent()]), c_orderQueueReplace);
                                    }
                                    else {
                                        if ((UnitGroupCount(gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent()), c_unitCountAlive) > 0) && (UnitGroupCount(UnitInventoryGroup(lv_avatar), c_unitCountAll) < 6)) {
                                            if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), RegionGetCenter(gv_refiningdrops[IntLoopCurrent()])) > DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(UnitGroupClosestToPoint(gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent()), UnitGetPosition(lv_avatar)))))) {
                                                UnitIssueOrder(lv_avatar, OrderTargetingUnit(null, UnitGroupClosestToPoint(gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent()), UnitGetPosition(lv_avatar))), c_orderQueueReplace);
                                            }
                                            else {
                                                if ((gf_Numberofmineralscarried(lv_avatar) > 0)) {
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 8;
                                                }
                                                else {
                                                    UnitIssueOrder(lv_avatar, OrderTargetingUnit(null, UnitGroupClosestToPoint(gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent()), UnitGetPosition(lv_avatar))), c_orderQueueReplace);
                                                }
                                            }
                                        }
                                        else {
                                            if ((UnitGroupCount(gf_UnrefinedMineralsInRegion(UnitGroup(null, c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), IntLoopCurrent()), c_unitCountAlive) == 0) && (gf_Numberofmineralscarried(lv_avatar) == 0)) {
                                                UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("attack", 0), gv_mineraldropoff[IntLoopCurrent()]), c_orderQueueReplace);
                                            }
                                            else {
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = 8;
                                            }
                                        }
                                    }
                                }
                                else {
                                    TriggerDebugOutput(1, (StringExternal("Param/Value/48A8FF33") + IntToText(IntLoopCurrent()) + StringExternal("Param/Value/670BD1AC") + IntToText(lv_a) + StringExternal("Param/Value/215AA5E6") + IntToText(gv_drones[IntLoopCurrent()][lv_a].lv_status) + StringExternal("Param/Value/7BC06887")), true);
                                }
                            }
                            else if (auto5C8EDC0D_val == 3) {
                                auto59E26D20_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                if (auto59E26D20_val == 0) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 12;
                                }
                                else if (auto59E26D20_val == 10) {
                                    if ((libNtve_gf_UnitInRegion(lv_avatar, gv_bCareas[IntLoopCurrent()][1][4]) == true)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Beacon_Zerg", c_playerAny, gv_bCareas[IntLoopCurrent()][1][4], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_avatar)))), c_orderQueueReplace);
                                    }
                                    else {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 11;
                                    }
                                }
                                else if (auto59E26D20_val == 11) {
                                    lv_targetMissileBay = gf_closestUnloadedMissileBay(lv_avatar);
                                    if ((lv_targetMissileBay == -1)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 14;
                                    }
                                    else {
                                        lv_missiles = gf_MissilesInRegion(gf_GetUnitFloor(lv_avatar));
                                        if (((UnitGroupCount(lv_missiles, c_unitCountAlive) == 0) || ((UnitGroupCount(lv_missiles, c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(lv_avatar), RegionGetCenter(gv_missileBays[lv_targetMissileBay][IntLoopCurrent()])) < DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(UnitGroupClosestToPoint(lv_missiles, UnitGetPosition(lv_avatar)))))) || (UnitGroupCount(UnitInventoryGroup(lv_avatar), c_unitCountAll) == 6)) && (gf_Numberofmissilescarried(lv_avatar) > 0)) {
                                            if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), RegionGetCenter(gv_missileBays[lv_targetMissileBay][IntLoopCurrent()])) < 6.0)) {
                                                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(gf_getBestMissile(UnitInventoryGroup(lv_avatar))), c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_missileBays[lv_targetMissileBay][IntLoopCurrent()]));
                                                UnitBehaviorAdd(UnitLastCreated(), "MissileDistributed", UnitLastCreated(), 1);
                                                UnitRemove(gf_getBestMissile(UnitInventoryGroup(lv_avatar)));
                                            }
                                            else {
                                                if ((gf_GetUnitFloor(lv_avatar) == gv_bCareas[IntLoopCurrent()][1][4])) {
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = -1;
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_targetspace = 1;
                                                }
                                                else {
                                                    UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_missileBays[lv_targetMissileBay][IntLoopCurrent()])), c_orderQueueReplace);
                                                }
                                            }
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 12;
                                        }
                                    }
                                }
                                else if (auto59E26D20_val == 12) {
                                    if ((UnitGroupCount(gf_MissilesInRegion(gf_GetUnitFloor(lv_avatar)), c_unitCountAlive) > 0) && (UnitGroupCount(UnitInventoryGroup(lv_avatar), c_unitCountAll) < 6)) {
                                        lv_targetMissileBay = gf_closestUnloadedMissileBay(lv_avatar);
                                        if ((lv_targetMissileBay != -1)) {
                                            if ((UnitGroupCount(gf_MissilesInRegion(gf_GetUnitFloor(lv_avatar)), c_unitCountAlive) > 0) && ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), RegionGetCenter(gv_missileBays[lv_targetMissileBay][IntLoopCurrent()])) > DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(UnitGroupClosestToPoint(gf_MissilesInRegion(gf_GetUnitFloor(lv_avatar)), UnitGetPosition(lv_avatar))))) || (gf_GetUnitFloor(lv_avatar) == gv_bCareas[IntLoopCurrent()][1][4]) || (UnitGroupCount(UnitInventoryGroup(lv_avatar), c_unitCountAll) == 0))) {
                                                UnitIssueOrder(lv_avatar, OrderTargetingUnit(null, UnitGroupClosestToPoint(gf_MissilesInRegion(gf_GetUnitFloor(lv_avatar)), UnitGetPosition(lv_avatar))), c_orderQueueReplace);
                                            }
                                            else {
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = 11;
                                            }
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 14;
                                        }
                                    }
                                    else {
                                        if ((UnitGroupCount(gf_MissilesInRegion(gf_GetUnitFloor(lv_avatar)), c_unitCountAlive) == 0) && (gf_Numberofmissilescarried(lv_avatar) == 0)) {
                                            if ((UnitGroupCount(gf_MissilesInRegion(gv_bCareas[IntLoopCurrent()][1][4]), c_unitCountAlive) > 0)) {
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = -1;
                                                gv_drones[IntLoopCurrent()][lv_a].lv_targetspace = 2;
                                            }
                                            else {
                                                if ((gf_GetUnitFloor(lv_avatar) == gv_bCareas[IntLoopCurrent()][1][4])) {
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = -1;
                                                    gv_drones[IntLoopCurrent()][lv_a].lv_targetspace = 1;
                                                }
                                                else {
                                                    UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                                }
                                            }
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 11;
                                        }
                                    }
                                }
                                else if (auto59E26D20_val == 13) {
                                    if ((UnitHasBehavior(lv_constructionBeacons[IntLoopCurrent()], "ConsoleOccupied") == false)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_constructionBeacons[IntLoopCurrent()])), c_orderQueueReplace);
                                    }
                                    else {
                                        if ((UnitGetOwner(lv_constructionConsoles[IntLoopCurrent()]) == UnitGetOwner(lv_avatar))) {
                                        }
                                        else {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 16;
                                        }
                                    }
                                }
                                else if (auto59E26D20_val == 14) {
                                    if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), gv_startLocations[IntLoopCurrent()]) < 2.0)) {
                                        if ((UnitGroupCount(UnitInventoryGroup(lv_avatar), c_unitCountAll) > 0)) {
                                            auto8808BF33_g = UnitInventoryGroup(lv_avatar);
                                            auto8808BF33_u = 1;
                                            for ( ; auto8808BF33_u <= UnitGroupCount(auto8808BF33_g, c_unitCountAll) ; auto8808BF33_u += BoolToInt(lv_item == UnitGroupUnit(auto8808BF33_g, auto8808BF33_u)) ) {
                                                lv_item = UnitGroupUnit(auto8808BF33_g, auto8808BF33_u);
                                                if ((gf_UnitTypeIsMissile(UnitGetType(lv_item)) == true)) {
                                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(lv_item), 0, 0, PointWithOffsetPolar(gv_startLocations[IntLoopCurrent()], RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle()));
                                                    UnitRemove(lv_item);
                                                }
                                                else {
                                                }
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                    }
                                    lv_targetMissileBay = gf_closestUnloadedMissileBay(lv_avatar);
                                    if ((lv_targetMissileBay != -1)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 12;
                                    }
                                    else {
                                    }
                                }
                                else if (auto59E26D20_val == 15) {
                                }
                                else if (auto59E26D20_val == 16) {
                                    if ((UnitHasBehavior(lv_constructionBeacons[IntLoopCurrent()], "ConsoleOccupied") == false)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_constructionBeacons[IntLoopCurrent()])), c_orderQueueReplace);
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 13;
                                    }
                                    else {
                                    }
                                }
                                else {
                                }
                            }
                            else if (auto5C8EDC0D_val == 4) {
                                autoA9C630F3_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                if (autoA9C630F3_val == 0) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_target = null;
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 18;
                                }
                                else if (autoA9C630F3_val == 18) {
                                    lv_closestBeacon = UnitGroupRandomUnit(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(UnitGroup("WeaponsConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                    if ((DistanceBetweenPoints(UnitGetPosition(lv_closestBeacon), UnitGetPosition(lv_avatar)) <= 1)) {
                                        if ((UnitHasBehavior(lv_avatar, "InConsole") == true)) {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 19;
                                            lv_closestConsole = UnitGroupRandomUnit(UnitGroup("WeaponsConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                            gv_drones[IntLoopCurrent()][lv_a].lv_currentConsole = lv_closestConsole;
                                        }
                                        else {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                        }
                                    }
                                    else {
                                        if ((UnitHasBehavior(lv_closestBeacon, "ConsoleOccupied") == false)) {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestBeacon)), c_orderQueueReplace);
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 21;
                                        }
                                    }
                                }
                                else if (autoA9C630F3_val == 19) {
                                    if ((UnitHasBehavior(lv_avatar, "InConsole") == false)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 18;
                                        gv_drones[IntLoopCurrent()][lv_a].lv_currentConsole = null;
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                    }
                                    else {
                                        if ((UnitGroupCount(gf_VisibleSpaceUnitinRange(gv_battlecruisers[IntLoopCurrent()], 30.0), c_unitCountAlive) > 0)) {
                                            lv_target = UnitGroupClosestToPoint(gf_VisibleSpaceUnitinRange(gv_battlecruisers[IntLoopCurrent()], 30.0), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]));
                                            if ((lv_target != null) && (DistanceBetweenPoints(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), UnitGetPosition(lv_target)) <= 45.0) && (libNtve_gf_UnitIsVisibleToPlayer(lv_target, UnitGetOwner(lv_avatar)) == true)) {
                                                if ((gv_drones[IntLoopCurrent()][lv_a].lv_fireMissiles == true) && (UnitGetType(lv_target) == "Battlecruiser") && (gf_isAnyBayLoaded(IntLoopCurrent()) == true)) {
                                                    if ((gf_Unitisinfront(3.0, lv_target, UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), UnitGetFacing(gv_battlecruisers[IntLoopCurrent()]), 5, 13.0) == true)) {
                                                        auto582243AD_ae = 5;
                                                        auto582243AD_ai = 1;
                                                        lv_i = 0;
                                                        for ( ; ( (auto582243AD_ai >= 0 && lv_i <= auto582243AD_ae) || (auto582243AD_ai <= 0 && lv_i >= auto582243AD_ae) ) ; lv_i += auto582243AD_ai ) {
                                                            if ((gf_bayIsLoaded(lv_i, IntLoopCurrent()) == true)) {
                                                                gf_Firemissile((IntLoopCurrent() + 12), lv_i);
                                                                break;
                                                            }
                                                            else {
                                                            }
                                                        }
                                                    }
                                                    else {
                                                    }
                                                }
                                                else {
                                                }
                                                lv_closestConsole = UnitGroupRandomUnit(UnitGroup("WeaponsConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                                if ((UnitHasBehavior(lv_closestConsole, "WeaponryKinetic") == true)) {
                                                    lv_cost = libNtve_gf_CostOfAbility("FireKineticWeapon", "Energy");
                                                    lv_ability = AbilityCommand("FireKineticWeapon", 0);
                                                    if ((gv_drones[IntLoopCurrent()][lv_a].lv_weaponprio == 0)) {
                                                        UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("ActivateLaserWeaponry", 0)), c_orderQueueReplace);
                                                    }
                                                    else {
                                                    }
                                                }
                                                else {
                                                    if ((UnitHasBehavior(lv_closestConsole, "WeaponryLaser") == true)) {
                                                        lv_cost = libNtve_gf_CostOfAbility("LaserDummy", "Energy");
                                                        lv_ability = AbilityCommand("LaserDummy", 0);
                                                        if ((gv_drones[IntLoopCurrent()][lv_a].lv_weaponprio == 1)) {
                                                            UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("ActivateKineticWeaponry", 0)), c_orderQueueReplace);
                                                        }
                                                        else {
                                                            if ((TechTreeUpgradeCount(UnitGetOwner(gv_battlecruisers[IntLoopCurrent()]), "BattlecruiserPentaBurst", c_techCountCompleteOnly) == 1)) {
                                                                UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("SwitchtoPentaBurst", 0)), c_orderQueueAddToEnd);
                                                            }
                                                            else {
                                                                UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("SwitchtoTripleBurst", 0)), c_orderQueueAddToEnd);
                                                            }
                                                        }
                                                    }
                                                    else {
                                                    }
                                                }
                                                if ((UnitAbilityGetCooldown(lv_closestConsole, "LaserDummy", "Abil/LaserDummy") == 0.0) && (UnitGetPropertyFixed(lv_closestConsole, c_unitPropEnergy, c_unitPropCurrent) >= lv_cost)) {
                                                    if (((DistanceBetweenPoints(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), UnitGetPosition(lv_target)) <= 15.0) || (UnitHasBehavior(lv_target, "Boostleft") == true) || (UnitHasBehavior(lv_target, "Boostright") == true))) {
                                                        if ((UnitHasBehavior(lv_avatar, "InConsole") == true) && (UnitGetOwner(lv_closestConsole) == UnitGetOwner(lv_avatar)) && (DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(lv_closestConsole)) <= 4.0)) {
                                                            UnitIssueOrder(lv_closestConsole, OrderTargetingPoint(lv_ability, PointWithOffsetPolar(UnitGetPosition(lv_target), (gf_PhysicsGetSpeed(lv_target) / 5.0), gf_PhysicsGetDirection(lv_target))), c_orderQueueReplace);
                                                        }
                                                        else {
                                                        }
                                                    }
                                                    else {
                                                        if ((UnitHasBehavior(gv_battlecruisers[IntLoopCurrent()], "LaserAIcooldown") == false)) {
                                                            lv_ux = (RandomFixed(1.0, 1.5) * UnitGetCustomValue(lv_target, 1));
                                                            lv_uy = (RandomFixed(1.0, 1.5) * UnitGetCustomValue(lv_target, 2));
                                                            lv_ax = PointGetX(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]));
                                                            lv_ay = PointGetY(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]));
                                                            lv_bx = PointGetX(UnitGetPosition(lv_target));
                                                            lv_by = PointGetY(UnitGetPosition(lv_target));
                                                            lv_aBx = (lv_bx - lv_ax);
                                                            lv_aBy = (lv_by - lv_ay);
                                                            lv_aBmag = SquareRoot(((lv_aBx * lv_aBx) + (lv_aBy * lv_aBy)));
                                                            lv_aBx = (lv_aBx / lv_aBmag);
                                                            lv_aBy = (lv_aBy / lv_aBmag);
                                                            lv_uDotAB = ((lv_aBx * lv_ux) + (lv_aBy * lv_uy));
                                                            lv_ujx = (lv_uDotAB * lv_aBx);
                                                            lv_ujy = (lv_uDotAB * lv_aBy);
                                                            lv_uix = (lv_ux - lv_ujx);
                                                            lv_uiy = (lv_ux - lv_ujy);
                                                            lv_vix = lv_uix;
                                                            lv_viy = lv_uiy;
                                                            lv_viMag = SquareRoot(((lv_vix * lv_vix) + (lv_viy * lv_viy)));
                                                            lv_vjMag = SquareRoot(((lv_vmag * lv_vmag) - (lv_viMag * lv_viMag)));
                                                            lv_vjx = (lv_aBx * lv_vjMag);
                                                            lv_vjy = (lv_aBy * lv_vjMag);
                                                            lv_vx = (lv_vjx + lv_vix);
                                                            lv_vy = (lv_vjy + lv_viy);
                                                            lv_vx = (lv_vx + lv_ax);
                                                            lv_vy = (lv_vy + lv_ay);
                                                            if ((UnitHasBehavior(lv_avatar, "InConsole") == true) && (UnitGetOwner(lv_closestConsole) == UnitGetOwner(lv_avatar)) && (DistanceBetweenPoints(UnitGetPosition(lv_avatar), UnitGetPosition(lv_closestConsole)) <= 4.0)) {
                                                                UnitIssueOrder(lv_closestConsole, OrderTargetingPoint(lv_ability, PointWithOffsetPolar(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), DistanceBetweenPoints(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), UnitGetPosition(lv_target)), AngleBetweenPoints(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), Point(lv_vx, lv_vy)))), c_orderQueueReplace);
                                                                UnitBehaviorAdd(gv_battlecruisers[IntLoopCurrent()], "LaserAIcooldown", lv_avatar, 1);
                                                            }
                                                            else {
                                                            }
                                                        }
                                                        else {
                                                        }
                                                    }
                                                }
                                                else {
                                                }
                                            }
                                            else {
                                                gv_drones[IntLoopCurrent()][lv_a].lv_status = 20;
                                            }
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 20;
                                        }
                                    }
                                }
                                else if (autoA9C630F3_val == 20) {
                                    if ((UnitHasBehavior(lv_avatar, "InConsole") == false)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 18;
                                        gv_drones[IntLoopCurrent()][lv_a].lv_currentConsole = null;
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                    }
                                    else {
                                        if ((UnitGroupCount(gf_VisibleSpaceUnitinRange(gv_battlecruisers[IntLoopCurrent()], 30.0), c_unitCountAlive) > 0)) {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 19;
                                        }
                                        else {
                                        }
                                    }
                                }
                                else if (autoA9C630F3_val == 21) {
                                    lv_closestBeacon = UnitGroupRandomUnit(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(UnitGroup("WeaponsConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                    if ((UnitHasBehavior(lv_closestBeacon, "ConsoleOccupied") == false)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestBeacon)), c_orderQueueReplace);
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 18;
                                    }
                                    else {
                                    }
                                }
                                else {
                                }
                            }
                            else if (auto5C8EDC0D_val == 5) {
                                auto959C2853_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                if (auto959C2853_val == 0) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 22;
                                }
                                else if (auto959C2853_val == 22) {
                                    lv_closestBeacon = UnitGroupRandomUnit(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(UnitGroup("ScienceConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                    if ((DistanceBetweenPoints(UnitGetPosition(lv_closestBeacon), UnitGetPosition(lv_avatar)) <= 1)) {
                                        if ((UnitHasBehavior(lv_avatar, "InConsole") == true)) {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 23;
                                        }
                                        else {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                        }
                                    }
                                    else {
                                        if ((UnitHasBehavior(lv_closestBeacon, "ConsoleOccupied") == false)) {
                                            UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestBeacon)), c_orderQueueReplace);
                                        }
                                        else {
                                            gv_drones[IntLoopCurrent()][lv_a].lv_status = 24;
                                        }
                                    }
                                }
                                else if (auto959C2853_val == 23) {
                                    lv_closestConsole = UnitGroupRandomUnit(UnitGroup("ScienceConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                    if ((UnitHasBehavior(lv_avatar, "InConsole") == false)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 22;
                                        gv_drones[IntLoopCurrent()][lv_a].lv_currentConsole = null;
                                        continue;
                                    }
                                    else {
                                    }
                                    if ((UnitOrder(lv_closestConsole, 0) != Order(AbilityCommand("Upgrade", 6))) && (gv_drones[IntLoopCurrent()][lv_a].lv_purgeCore == true) && (UnitAbilityGetCooldown(lv_closestConsole, "PurgeCorePlasma", "Abil/PurgeCorePlasma") == 0.0) && (((gv_energy_core_stability[(IntLoopCurrent() - 1)] <= 90.0) && (PlayerGetPropertyInt(PlayerGroupPlayer(GameAttributePlayersForTeam(IntLoopCurrent()), 1), c_playerPropCustom) >= 60)) || ((gv_energy_core_stability[(IntLoopCurrent() - 1)] <= 80.0) && (PlayerGetPropertyInt(PlayerGroupPlayer(GameAttributePlayersForTeam(IntLoopCurrent()), 1), c_playerPropCustom) >= 30)))) {
                                        UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("PurgeCorePlasma", 0)), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_avatar), "BattlecruiserIronCurtain", c_techCountCompleteOnly) > 0) && (UnitOrder(lv_closestConsole, 0) != Order(AbilityCommand("Upgrade", 6))) && (UnitAbilityGetCooldown(lv_closestConsole, "IronCurtain", "Abil/IronCurtain") == 0.0) && (UnitGetPropertyFixed(gv_battlecruisers[IntLoopCurrent()], c_unitPropShieldsPercent, c_unitPropCurrent) < 15.0) && (UnitGetPropertyFixed(gv_battlecruisers[IntLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) < 95.0) && (UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lv_avatar), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), 15.0), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
                                        UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("IronCurtain", 0)), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                    if ((UnitOrder(lv_closestConsole, 0) != Order(AbilityCommand("Upgrade", 6))) && (UnitAbilityGetCooldown(lv_closestConsole, "PowerTransfer", "Abil/PowerTransfer") == 0.0)) {
                                        lv_target = null;
                                        auto5B53D548_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), 10.0), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                        auto5B53D548_u = 1;
                                        for ( ; auto5B53D548_u <= UnitGroupCount(auto5B53D548_g, c_unitCountAll) ; auto5B53D548_u += BoolToInt(lv_u == UnitGroupUnit(auto5B53D548_g, auto5B53D548_u)) ) {
                                            lv_u = UnitGroupUnit(auto5B53D548_g, auto5B53D548_u);
                                            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_avatar), UnitGetOwner(lv_u), 0) == true) && ((gf_PhysicsGetSpeed(lv_u) < 0.4) || (gf_AngleBetweenAngles(UnitGetFacing(lv_u), AngleBetweenPoints(UnitGetPosition(lv_u), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]))) > 50.0)) && ((lv_target != null) || ((UnitGetPropertyFixed(lv_u, c_unitPropEnergyPercent, c_unitPropCurrent) <= 90.0) && ((UnitGetPropertyFixed(lv_u, c_unitPropEnergyMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_u, c_unitPropEnergy, c_unitPropCurrent)) > (UnitGetPropertyFixed(lv_target, c_unitPropEnergyMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_target, c_unitPropEnergy, c_unitPropCurrent)))))) {
                                                lv_target = lv_u;
                                            }
                                            else {
                                            }
                                        }
                                        if ((lv_target != null)) {
                                            UnitIssueOrder(lv_closestConsole, OrderTargetingPoint(AbilityCommand("PowerTransfer", 0), PointWithOffsetPolar(UnitGetPosition(lv_target), (gf_PhysicsGetSpeed(lv_target) * 0.25), UnitGetFacing(lv_target))), c_orderQueueReplace);
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                    }
                                    if ((UnitOrder(lv_closestConsole, 0) != Order(AbilityCommand("Upgrade", 6))) && (UnitAbilityGetCooldown(lv_closestConsole, "Radarping", "Abil/Radarping") == 0.0)) {
                                        UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("Radarping", 0)), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                    if ((gv_drones[IntLoopCurrent()][lv_a].lv_armYamato == true) && (PlayerGetPropertyInt(UnitGetOwner(lv_avatar), c_playerPropCustom) >= 40) && (PlayerGetPropertyInt(UnitGetOwner(lv_avatar), c_playerPropTerrazine) >= 50) && (UnitOrder(lv_closestConsole, 0) != Order(AbilityCommand("Upgrade", 6))) && (UnitHasBehavior(lv_closestConsole, "YamatoCannonLoaded") == false)) {
                                        UnitIssueOrder(lv_closestConsole, Order(AbilityCommand("Upgrade", 6)), c_orderQueueReplace);
                                    }
                                    else {
                                    }
                                }
                                else if (auto959C2853_val == 24) {
                                    lv_closestBeacon = UnitGroupRandomUnit(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(UnitGroup("ScienceConsole", c_playerAny, gv_battlecruiserArea[IntLoopCurrent()], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                    if ((UnitHasBehavior(lv_closestBeacon, "ConsoleOccupied") == false)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_closestBeacon)), c_orderQueueReplace);
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 22;
                                    }
                                    else {
                                    }
                                }
                                else {
                                }
                            }
                            else if (auto5C8EDC0D_val == 6) {
                                gv_drones[IntLoopCurrent()][lv_a].lv_targetspace = lv_correctFloor;
                                auto10F6053A_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                if (auto10F6053A_val == 0) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 22;
                                }
                                else if (auto10F6053A_val == 22) {
                                    if ((UnitGetPropertyFixed(gv_battlecruisers[IntLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) <= 100.0)) {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 23;
                                    }
                                    else {
                                    }
                                }
                                else if (auto10F6053A_val == 23) {
                                }
                                else if (auto10F6053A_val == 24) {
                                }
                                else {
                                }
                            }
                            else if (auto5C8EDC0D_val == 20) {
                                auto56436143_val = gv_drones[IntLoopCurrent()][lv_a].lv_status;
                                if (auto56436143_val == 0) {
                                    gv_drones[IntLoopCurrent()][lv_a].lv_status = 17;
                                }
                                else if (auto56436143_val == 17) {
                                    if ((DistanceBetweenPoints(UnitGetPosition(lv_avatar), gv_startLocations[IntLoopCurrent()]) >= 1.0)) {
                                        UnitIssueOrder(lv_avatar, OrderTargetingPoint(AbilityCommand("move", 0), gv_startLocations[IntLoopCurrent()]), c_orderQueueReplace);
                                    }
                                    else {
                                        gv_drones[IntLoopCurrent()][lv_a].lv_status = 0;
                                        gv_drones[IntLoopCurrent()][lv_a].lv_currentOrder = 0;
                                    }
                                }
                                else {
                                }
                            }
                            else {
                                TriggerDebugOutput(1, (StringExternal("Param/Value/E9269325") + IntToText(IntLoopCurrent()) + StringExternal("Param/Value/4D484BDE") + IntToText(lv_a) + StringExternal("Param/Value/B8142993") + IntToText(gv_drones[IntLoopCurrent()][lv_a].lv_currentOrder) + StringExternal("Param/Value/73DE97AE")), true);
                            }
                        }
                    }
                    else {
                        if ((DialogControlGetSelectedItem(gv_droneDropdown, PlayerGroupPlayer(GameAttributePlayersForTeam(IntLoopCurrent()), 1)) == lv_a)) {
                            libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/910EBF6C") + gf_orderToText(gv_drones[IntLoopCurrent()][lv_a].lv_currentOrder, IntLoopCurrent(), lv_a)) + (StringExternal("Param/Value/428F8394") + gf_statusToText(gv_drones[IntLoopCurrent()][lv_a].lv_status))), GameAttributePlayersForTeam(IntLoopCurrent()));
                        }
                        else {
                        }
                    }
                }
                else {
                    if ((gv_drones[IntLoopCurrent()][lv_a].lv_respawning == true)) {
                        UIDisplayMessage(PlayerGroupSingle(13), c_messageAreaSubtitle, (StringExternal("Param/Value/DF69EBB3") + IntToText(lv_a) + StringExternal("Param/Value/D81452E8") + IntToText(IntLoopCurrent()) + StringExternal("Param/Value/E23459EF")));
                        UIDisplayMessage(PlayerGroupSingle(14), c_messageAreaSubtitle, (StringExternal("Param/Value/CD96B484") + IntToText(lv_a) + StringExternal("Param/Value/8F74A0BA") + IntToText(IntLoopCurrent()) + StringExternal("Param/Value/D8193EFE")));
                    }
                    else {
                    }
                }
            }
        }
        IntLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroneLoop_Init () {
    gt_DroneLoop = TriggerCreate("gt_DroneLoop_Func");
    TriggerAddEventMapInit(gt_DroneLoop);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Issue Order
//--------------------------------------------------------------------------------------------------
bool gt_IssueOrder_Func (bool testConds, bool runActions) {
    int autoE7EB10BB_val;

    // Variable Declarations
    bool lv_atleastOneMineral;
    unit lv_avatar;
    fixed lv_charges;

    // Variable Initialization
    lv_atleastOneMineral = true;

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_issueOrderButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE7EB10BB_val = DialogControlGetSelectedItem(gv_orderTypeDropdown, EventPlayer());
    if (autoE7EB10BB_val == 1) {
        lv_atleastOneMineral = false;
        IntLoopBegin(0, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((libNtve_gf_DialogItemIsChecked(gv_asteroidCheckbox[IntLoopCurrent()], EventPlayer()) == true)) {
                gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_mineMineral[IntLoopCurrent()] = true;
                lv_atleastOneMineral = true;
            }
            else {
                gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_mineMineral[IntLoopCurrent()] = false;
            }
        }
        IntLoopEnd();
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 3;
    }
    else if (autoE7EB10BB_val == 2) {
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 2;
    }
    else if (autoE7EB10BB_val == 3) {
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 1;
    }
    else if (autoE7EB10BB_val == 4) {
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 1;
        if ((libNtve_gf_DialogItemIsChecked(gv_fireMissileCheckbox, EventPlayer()) == true)) {
            gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_fireMissiles = true;
        }
        else {
            gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_fireMissiles = false;
        }
    }
    else if (autoE7EB10BB_val == 5) {
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 1;
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_armYamato = libNtve_gf_DialogItemIsChecked(gv_armYamatoCheckbox, EventPlayer());
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_purgeCore = libNtve_gf_DialogItemIsChecked(gv_purgeCorePlasmaCheckbox, EventPlayer());
    }
    else if (autoE7EB10BB_val == 6) {
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 2;
    }
    else {
    }
    if ((lv_atleastOneMineral == false)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/7672E3DB"), Color(100.00, 0.00, 0.00)));
    }
    else {
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_status = -1;
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentOrder = DialogControlGetSelectedItem(gv_orderTypeDropdown, EventPlayer());
        libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/E3093B9D") + gf_orderToText(gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentOrder, gf_GetPlayerTeam(EventPlayer()), DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer()))) + (StringExternal("Param/Value/87B56344") + StringExternal("Param/Value/83C4D219"))), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    }
    lv_avatar = gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_avatar;
    if ((gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentConsole != null)) {
        UnitIssueOrder(gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentConsole, Order(AbilityCommand("LeaveConsole", 0)), c_orderQueueReplace);
        gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentConsole = null;
    }
    else {
    }
    UnitGroupLoopBegin(UnitInventoryGroup(lv_avatar));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventorySlot(UnitGroupLoopCurrent()) != 1) && (UnitInventorySlot(UnitGroupLoopCurrent()) != 2)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_avatar), RandomFixed(0.0, 1.25), libNtve_gf_RandomAngle()));
            lv_charges = lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent());
            if ((lv_charges == 100.0)) {
                lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
                lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
            }
            else {
                lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()));
            }
            UnitRemove(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IssueOrder_Init () {
    gt_IssueOrder = TriggerCreate("gt_IssueOrder_Func");
    TriggerAddEventDialogControl(gt_IssueOrder, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return home
//--------------------------------------------------------------------------------------------------
bool gt_Returnhome_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_returnHomeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/BC7F254A") + StringExternal("Param/Value/02BB55BF")) + (StringExternal("Param/Value/1C1F7FAB") + StringExternal("Param/Value/6D201727"))), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_status = -1;
    gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentOrder = 20;
    gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_targetspace = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Returnhome_Init () {
    gt_Returnhome = TriggerCreate("gt_Returnhome_Func");
    TriggerAddEventDialogControl(gt_Returnhome, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Selected Drone
//--------------------------------------------------------------------------------------------------
bool gt_SwitchSelectedDrone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_order;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_droneDropdown))) {
            return false;
        }

        if (!((DialogIsVisible(gv_droneDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(EventDialogControl(), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()));
    lv_order = gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentOrder;
    if ((lv_order > 0)) {
        DialogControlSelectItem(gv_orderTypeDropdown, PlayerGroupSingle(EventPlayer()), lv_order);
    }
    else {
    }
    gf_FixOrderLayout(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchSelectedDrone_Init () {
    gt_SwitchSelectedDrone = TriggerCreate("gt_SwitchSelectedDrone_Func");
    TriggerAddEventDialogControl(gt_SwitchSelectedDrone, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch Selected Order
//--------------------------------------------------------------------------------------------------
bool gt_SwitchSelectedOrder_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_orderTypeDropdown))) {
            return false;
        }

        if (!((DialogIsVisible(gv_droneDialog, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_FixOrderLayout(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchSelectedOrder_Init () {
    gt_SwitchSelectedOrder = TriggerCreate("gt_SwitchSelectedOrder_Func");
    TriggerAddEventDialogControl(gt_SwitchSelectedOrder, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change mineral types
//--------------------------------------------------------------------------------------------------
bool gt_Changemineraltypes_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_asteroidCheckbox[0]) || (EventDialogControl() == gv_asteroidCheckbox[1]) || (EventDialogControl() == gv_asteroidCheckbox[2]) || (EventDialogControl() == gv_asteroidCheckbox[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(0, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == gv_asteroidCheckbox[IntLoopCurrent()])) {
            if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
                gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_mineMineral[IntLoopCurrent()] = true;
            }
            else {
                gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_mineMineral[IntLoopCurrent()] = false;
            }
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Changemineraltypes_Init () {
    gt_Changemineraltypes = TriggerCreate("gt_Changemineraltypes_Func");
    TriggerAddEventDialogControl(gt_Changemineraltypes, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change weapon prio
//--------------------------------------------------------------------------------------------------
bool gt_Changeweaponprio_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_weaponDropDown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_weaponprio = (DialogControlGetSelectedItem(EventDialogControl(), EventPlayer()) - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Changeweaponprio_Init () {
    gt_Changeweaponprio = TriggerCreate("gt_Changeweaponprio_Func");
    TriggerAddEventDialogControl(gt_Changeweaponprio, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Drone Control
//--------------------------------------------------------------------------------------------------
bool gt_EnterDroneControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("DroneConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitClearSelection(EventPlayer());
    UnitSelect(lv_closestConsole, EventPlayer(), true);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    gf_FixOrderLayout(EventPlayer());
    if ((DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer()) == DialogControlGetItemCount(gv_droneDropdown, EventPlayer()))) {
        DialogSetVisible(gv_purchaseDrone, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_orderStatus, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), false);
        DialogControlSetVisible(gv_orderTypeDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), false);
        DialogControlSetVisible(gv_issueOrderButton, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_returnHomeButton, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_purchaseDrone, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_orderStatus, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
        DialogControlSetVisible(gv_orderTypeDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
        DialogControlSetVisible(gv_issueOrderButton, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_returnHomeButton, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/99F5C715") + gf_orderToText(gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentOrder, gf_GetPlayerTeam(EventPlayer()), DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer()))) + (StringExternal("Param/Value/3F4181AD") + gf_statusToText(gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_status))), PlayerGroupSingle(EventPlayer()));
        IntLoopBegin(0, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_mineMineral[IntLoopCurrent()] == true)) {
                libNtve_gf_SetDialogItemChecked(gv_asteroidCheckbox[IntLoopCurrent()], true, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemChecked(gv_asteroidCheckbox[IntLoopCurrent()], false, PlayerGroupSingle(EventPlayer()));
            }
        }
        IntLoopEnd();
    }
    PlayerGroupAdd(gv_consolePlayers, EventPlayer());
    DialogControlSelectItem(gv_droneDropdown, PlayerGroupSingle(EventPlayer()), 1);
    DialogSetVisible(gv_droneDialog, PlayerGroupSingle(EventPlayer()), true);
    UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
    libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
    UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterDroneControl_Init () {
    gt_EnterDroneControl = TriggerCreate("gt_EnterDroneControl_Func");
    TriggerAddEventUnitRange(gt_EnterDroneControl, null, UnitFromId(4245), 1.0, true);
    TriggerAddEventUnitRange(gt_EnterDroneControl, null, UnitFromId(4244), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Drone
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseDrone_Func (bool testConds, bool runActions) {
    int autoDDD42ABA_val;

    // Variable Declarations
    int lv_team;
    int lv_id;
    int lv_selected;
    text lv_name;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_purchaseDroneButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= gv_droneCost[gf_GetPlayerTeam(EventPlayer())][0]) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= gv_droneCost[gf_GetPlayerTeam(EventPlayer())][1])) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSubtract, gv_droneCost[gf_GetPlayerTeam(PlayerGroupLoopCurrent())][0]);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSubtract, gv_droneCost[gf_GetPlayerTeam(PlayerGroupLoopCurrent())][1]);
        }
        PlayerGroupLoopEnd();
        lv_team = gf_GetPlayerTeam(EventPlayer());
        lv_id = gf_getNewDroneID(lv_team);
        lv_name = (StringExternal("Param/Value/1F2E61D0") + IntToText(lv_id));
        gf_AddAI(lv_team, lv_name);
        lv_selected = DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer());
        gv_droneCost[lv_team][0] += 50;
        gv_droneCost[lv_team][1] += 10;
        libNtve_gf_SetDialogItemText(gv_droneCostLabel, (StringExternal("Param/Value/97EA17C3") + TextWithColor((StringExternal("Param/Value/3F033A24") + IntToText(gv_droneCost[lv_team][0])), Color(100.00, 100.00, 0.00)) + TextWithColor((StringExternal("Param/Value/CDCAC51C") + IntToText(gv_droneCost[lv_team][1])), Color(0.00, 100.00, 0.00))), PlayerGroupAll());
        DialogControlSelectItem(gv_droneDropdown, PlayerGroupSingle(EventPlayer()), lv_selected);
        UIDisplayMessage(GameAttributePlayersForTeam(lv_team), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringExternal("Param/Value/F239AF4F"), Color(100.00, 100.00, 0.00))));
        DialogSetVisible(gv_purchaseDrone, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_orderStatus, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
        DialogControlSetVisible(gv_orderTypeDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
        DialogControlSetVisible(gv_issueOrderButton, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_returnHomeButton, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_orderStatus, ((StringExternal("Param/Value/3A552AC7") + gf_orderToText(gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_currentOrder, gf_GetPlayerTeam(EventPlayer()), DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer()))) + (StringExternal("Param/Value/7A5B26A0") + gf_statusToText(gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_status))), PlayerGroupSingle(EventPlayer()));
        DialogControlSetVisible(gv_asteroidCheckbox[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_asteroidCheckbox[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_asteroidCheckbox[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_asteroidCheckbox[3], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_missileDistributeCheckbox, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_miningOrderInfo, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_missileLabel, PlayerGroupSingle(EventPlayer()), false);
        IntLoopBegin(0, 3);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_drones[gf_GetPlayerTeam(EventPlayer())][DialogControlGetSelectedItem(gv_droneDropdown, EventPlayer())].lv_mineMineral[IntLoopCurrent()] == true)) {
                libNtve_gf_SetDialogItemChecked(gv_asteroidCheckbox[IntLoopCurrent()], true, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemChecked(gv_asteroidCheckbox[IntLoopCurrent()], false, PlayerGroupSingle(EventPlayer()));
            }
        }
        IntLoopEnd();
        autoDDD42ABA_val = DialogControlGetSelectedItem(gv_orderTypeDropdown, EventPlayer());
        if (autoDDD42ABA_val == 1) {
            DialogControlSetVisible(gv_asteroidCheckbox[0], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_asteroidCheckbox[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_asteroidCheckbox[2], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_asteroidCheckbox[3], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_miningOrderInfo, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
        }
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < gv_droneCost[gf_GetPlayerTeam(EventPlayer())][0])) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/F0263962"), Color(100.00, 0.00, 0.00)));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/0BCBF5EF"), Color(100.00, 0.00, 0.00)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseDrone_Init () {
    gt_PurchaseDrone = TriggerCreate("gt_PurchaseDrone_Func");
    TriggerAddEventDialogControl(gt_PurchaseDrone, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show status
//--------------------------------------------------------------------------------------------------
bool gt_Showstatus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_id;
    int lv_selected;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == "-status"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = StringToInt(StringWord(EventChatMessage(false), 3));
    lv_id = StringToInt(StringWord(EventChatMessage(false), 2));
    TriggerDebugOutput(1, (StringExternal("Param/Value/78664EE7") + gf_orderToText(gv_drones[lv_team][lv_id].lv_currentOrder, lv_team, lv_id) + StringExternal("Param/Value/1C0D4CC0") + IntToText(gv_drones[lv_team][lv_id].lv_currentOrder) + StringExternal("Param/Value/47A1E7D6") + StringExternal("Param/Value/728F022E") + gf_statusToText(gv_drones[lv_team][lv_id].lv_status) + StringExternal("Param/Value/ED135EE1") + IntToText(gv_drones[lv_team][lv_id].lv_status)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Showstatus_Init () {
    gt_Showstatus = TriggerCreate("gt_Showstatus_Func");
    TriggerAddEventChatMessage(gt_Showstatus, c_playerAny, "-status", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order drones
//--------------------------------------------------------------------------------------------------
bool gt_Orderdrones_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_id;
    int lv_order;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 1) == "-order"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = StringToInt(StringWord(EventChatMessage(false), 3));
    lv_id = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_order = StringToInt(StringWord(EventChatMessage(false), 4));
    gv_drones[lv_team][lv_id].lv_targetspace = 1;
    gv_drones[lv_team][lv_id].lv_status = -1;
    gv_drones[lv_team][lv_id].lv_currentOrder = lv_order;
    TriggerDebugOutput(1, (StringExternal("Param/Value/30978F67") + gf_orderToText(gv_drones[lv_team][lv_id].lv_currentOrder, lv_team, lv_id) + StringExternal("Param/Value/F36439CD") + IntToText(gv_drones[lv_team][lv_id].lv_currentOrder) + StringExternal("Param/Value/58F925C6") + StringExternal("Param/Value/1594D013") + gf_statusToText(gv_drones[lv_team][lv_id].lv_status) + StringExternal("Param/Value/237299DA") + IntToText(gv_drones[lv_team][lv_id].lv_status)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Orderdrones_Init () {
    gt_Orderdrones = TriggerCreate("gt_Orderdrones_Func");
    TriggerEnable(gt_Orderdrones, false);
    TriggerAddEventChatMessage(gt_Orderdrones, c_playerAny, "-order", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VentQuestion
//--------------------------------------------------------------------------------------------------
bool gt_VentQuestion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_ventWarning))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_ventWarning, PlayerGroupSingle(EventPlayer()), false);
    if ((libNtve_gf_DialogItemIsChecked(gv_showVentWarningCheckbox, EventPlayer()) == true)) {
        gv_showVentWarning[EventPlayer()] = false;
    }
    else {
    }
    if ((EventDialogControl() == gv_ventWarningYes)) {
        gf_VentRoom(gv_ventRoom[EventPlayer()], EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VentQuestion_Init () {
    gt_VentQuestion = TriggerCreate("gt_VentQuestion_Func");
    TriggerAddEventDialogControl(gt_VentQuestion, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ChangeFloor
//--------------------------------------------------------------------------------------------------
bool gt_ChangeFloor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_floor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_floor1) || (EventDialogControl() == gv_floor2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_floor1)) {
        DialogControlSetEnabled(gv_floor1, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_floor2, PlayerGroupAll(), true);
        lv_floor = 1;
        libNtve_gf_SetDialogItemText(gv_floorLabel, StringExternal("Param/Value/A739C35E"), PlayerGroupAll());
    }
    else {
        DialogControlSetEnabled(gv_floor2, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_floor1, PlayerGroupAll(), true);
        lv_floor = 2;
        libNtve_gf_SetDialogItemText(gv_floorLabel, StringExternal("Param/Value/BA322633"), PlayerGroupAll());
    }
    IntLoopBegin(0, gv_roomAmount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_rooms[IntLoopCurrent()].lv_floor == lv_floor)) {
            DialogControlSetVisible(gv_rooms[IntLoopCurrent()].lv_background, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(gv_rooms[IntLoopCurrent()].lv_background, PlayerGroupAll(), false);
        }
    }
    IntLoopEnd();
    IntLoopBegin(0, gv_roomAmount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_ventRecords[IntLoopCurrent()].lv_floor == lv_floor)) {
            DialogControlSetVisible(gv_ventRecords[IntLoopCurrent()].lv_picture, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_ventRecords[IntLoopCurrent()].lv_button, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(gv_ventRecords[IntLoopCurrent()].lv_picture, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_ventRecords[IntLoopCurrent()].lv_button, PlayerGroupAll(), false);
        }
    }
    IntLoopEnd();
    IntLoopBegin(0, gv_doorAmount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_doors[IntLoopCurrent()].lv_floor == lv_floor)) {
            DialogControlSetVisible(gv_doors[IntLoopCurrent()].lv_button, PlayerGroupAll(), true);
            DialogControlSetVisible(gv_doors[IntLoopCurrent()].lv_picture, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(gv_doors[IntLoopCurrent()].lv_button, PlayerGroupAll(), false);
            DialogControlSetVisible(gv_doors[IntLoopCurrent()].lv_picture, PlayerGroupAll(), false);
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeFloor_Init () {
    gt_ChangeFloor = TriggerCreate("gt_ChangeFloor_Func");
    TriggerAddEventDialogControl(gt_ChangeFloor, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lock/Vent
//--------------------------------------------------------------------------------------------------
bool gt_LockVent_Func (bool testConds, bool runActions) {
    int autoA25CABE9_ae;
    int autoA25CABE9_ai;

    // Variable Declarations
    int lv_a;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_dC_MainDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA25CABE9_ae = 12;
    autoA25CABE9_ai = 1;
    lv_a = 0;
    for ( ; ( (autoA25CABE9_ai >= 0 && lv_a <= autoA25CABE9_ae) || (autoA25CABE9_ai <= 0 && lv_a >= autoA25CABE9_ae) ) ; lv_a += autoA25CABE9_ai ) {
        if ((EventDialogControl() == gv_doors[lv_a].lv_button)) {
            gf_LockDoor(lv_a, EventPlayer());
        }
        else {
        }
        if ((EventDialogControl() == gv_ventRecords[lv_a].lv_button)) {
            if ((gv_showVentWarning[EventPlayer()] == true)) {
                if ((gv_rooms[lv_a].lv_vented == false)) {
                    DialogSetVisible(gv_ventWarning, PlayerGroupSingle(EventPlayer()), true);
                }
                else {
                }
                gv_ventRoom[EventPlayer()] = lv_a;
            }
            else {
                gf_VentRoom(lv_a, EventPlayer());
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LockVent_Init () {
    gt_LockVent = TriggerCreate("gt_LockVent_Func");
    TriggerAddEventDialogControl(gt_LockVent, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave DC
//--------------------------------------------------------------------------------------------------
bool gt_LeaveDC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestUnit;
    unit lv_closestConsole;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_hideDC))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_dC_MainDialog, PlayerGroupSingle(EventPlayer()), false);
    lv_closestUnit = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("XelNagaPrisonConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitClearSelection(EventPlayer());
    UnitSelect(gv_pilots[EventPlayer()], EventPlayer(), true);
    UnitSetOwner(lv_closestConsole, 0, false);
    UnitSetOwner(gv_pilots[EventPlayer()], EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveDC_Init () {
    gt_LeaveDC = TriggerCreate("gt_LeaveDC_Func");
    TriggerAddEventDialogControl(gt_LeaveDC, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Energy Control
//--------------------------------------------------------------------------------------------------
bool gt_OpenEnergyControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_player;
    unit lv_closestU;
    unit lv_closestConsole;
    fixed lv_drain;
    unit lv_ship;
    fixed lv_shieldHP;
    fixed lv_netto;
    text lv_nettotext;
    fixed lv_red;
    fixed lv_green;
    fixed lv_core_extra;
    fixed lv_energy_total;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
    UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
    PlayerGroupAdd(gv_consolePlayers, EventPlayer());
    lv_player = EventPlayer();
    lv_unit = EventUnit();
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("EnergyConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_i = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(lv_player)]);
    lv_ship = gv_nav_ships[lv_i];
    UnitClearSelection(EventPlayer());
    UnitSelect(lv_closestConsole, EventPlayer(), true);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
    libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
    if (((gv_energy_core_output[lv_i] > 80) || (gv_reputation[EventPlayer()] >= 2.0))) {
        UnitBehaviorAdd(lv_closestConsole, "CoreReputationDecrease", lv_closestConsole, 1);
    }
    else {
    }
    if (((gv_energy_core_output[lv_i] < 105) || (gv_reputation[EventPlayer()] >= 2.0))) {
        UnitBehaviorAdd(lv_closestConsole, "CoreReputationIncrease", lv_closestConsole, 1);
    }
    else {
    }
    if (((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true))) {
        UnitSetOwner(lv_closestConsole, EventPlayer(), false);
        gf_OpenEnergy(lv_player, lv_unit);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B092278D"));
        UnitBehaviorRemove(EventUnit(), "InConsole", 1);
        PlayerGroupRemove(gv_consolePlayers, EventPlayer());
        UnitSelect(gv_pilots[EventPlayer()], EventPlayer(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenEnergyControl_Init () {
    gt_OpenEnergyControl = TriggerCreate("gt_OpenEnergyControl_Func");
    TriggerAddEventUnitRange(gt_OpenEnergyControl, null, UnitFromId(2449), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenEnergyControl, null, UnitFromId(2448), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase Core Output
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseCoreOutput_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    if ((gv_energy_core_output[lv_i] < 200)) {
        gv_energy_core_output[lv_i] = (gv_energy_core_output[lv_i] + 5);
        if ((gv_energy_core_output[lv_i] == 105) && (gv_reputation[EventPlayer()] < 2.0) && (gv_inDebug == false)) {
            UnitBehaviorRemove(EventUnit(), "CoreReputationIncrease", 1);
        }
        else {
        }
        if ((gv_energy_core_output[lv_i] > 80)) {
            UnitBehaviorAdd(EventUnit(), "CoreReputationDecrease", EventUnit(), 1);
        }
        else {
        }
        gf_UpdateEnergyConsole(EventPlayer());
        if ((gv_energy_core_output[lv_i] == 155) && (UnitHasBehavior(EventUnit(), "Corebroadcastcooldown") == false)) {
            UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(EventPlayer())], c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringExternal("Param/Value/7D850A3C"), Color(100.00, 100.00, 50.20))));
            UnitBehaviorAdd(EventUnit(), "Corebroadcastcooldown", EventUnit(), 1);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseCoreOutput_Init () {
    gt_IncreaseCoreOutput = TriggerCreate("gt_IncreaseCoreOutput_Func");
    TriggerAddEventUnitAbility(gt_IncreaseCoreOutput, null, AbilityCommand("IncreaseCoreOutput", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase Engine
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseEngine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    gv_energy_engine[lv_index] = (gv_energy_engine[lv_index] + 5);
    gf_UpdateEnergyConsole(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseEngine_Init () {
    gt_IncreaseEngine = TriggerCreate("gt_IncreaseEngine_Func");
    TriggerAddEventUnitAbility(gt_IncreaseEngine, null, AbilityCommand("IncreaseEnginePower", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase Shields
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseShields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_maxShields;
    fixed lv_currShields;
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = gf_GetPlayerTeam(EventPlayer());
    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    gv_energy_shields[lv_index] = (gv_energy_shields[lv_index] + 5);
    lv_currShields = UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropShields, c_unitPropCurrent);
    if(lv_maxShields > 0){
        libNtve_gf_SetDialogItemText(gv_shield_label, StringToText("<s val=\"PlanetPanelTechnologyName\">")+TextWithColor(StringToText("Shield: "), Color(0.00, 0.00, 100.00))+TextWithColor(FixedToText(lv_currShields,0)+StringToText("/")+FixedToText(lv_maxShields,0),Color((1-lv_currShields/lv_maxShields)*100.00,(1-lv_currShields/lv_maxShields)*100.00,100.00))+StringToText("</s>"), GameAttributePlayersForTeam(lv_team));
    }
    gf_UpdateEnergyConsole(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseShields_Init () {
    gt_IncreaseShields = TriggerCreate("gt_IncreaseShields_Func");
    TriggerAddEventUnitAbility(gt_IncreaseShields, null, AbilityCommand("IncreaseShield", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase Weapons
//--------------------------------------------------------------------------------------------------
bool gt_IncreaseWeapons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    gv_energy_weapons[lv_index] = (gv_energy_weapons[lv_index] + 5);
    gf_UpdateEnergyConsole(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IncreaseWeapons_Init () {
    gt_IncreaseWeapons = TriggerCreate("gt_IncreaseWeapons_Func");
    TriggerAddEventUnitAbility(gt_IncreaseWeapons, null, AbilityCommand("IncreaseWeaponsPower", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Core Output
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseCoreOutput_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    if ((gv_energy_core_output[lv_index] > 0)) {
        gv_energy_core_output[lv_index] = (gv_energy_core_output[lv_index] - 5);
        if ((gv_energy_core_output[lv_index] == 80) && (gv_reputation[EventPlayer()] < 2.0) && (gv_inDebug == false)) {
            UnitBehaviorRemove(EventUnit(), "CoreReputationDecrease", 1);
        }
        else {
        }
        if ((gv_energy_core_output[lv_index] < 105)) {
            UnitBehaviorAdd(EventUnit(), "CoreReputationIncrease", EventUnit(), 1);
        }
        else {
        }
        gf_UpdateEnergyConsole(EventPlayer());
        if ((gv_energy_core_output[lv_index] == 145) && (UnitHasBehavior(EventUnit(), "Corebroadcastcooldown2") == false)) {
            UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(EventPlayer())], c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringExternal("Param/Value/D1F14027"), Color(100.00, 100.00, 50.20))));
            UnitBehaviorAdd(EventUnit(), "Corebroadcastcooldown2", EventUnit(), 1);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseCoreOutput_Init () {
    gt_DecreaseCoreOutput = TriggerCreate("gt_DecreaseCoreOutput_Func");
    TriggerAddEventUnitAbility(gt_DecreaseCoreOutput, null, AbilityCommand("DecreaseCoreOutput", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Engine
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseEngine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    gv_energy_engine[lv_index] = (gv_energy_engine[lv_index] + -5);
    if( gv_energy_engine[lv_index] < 0){
      gv_energy_engine[lv_index] = 0;
    }
    gf_UpdateEnergyConsole(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseEngine_Init () {
    gt_DecreaseEngine = TriggerCreate("gt_DecreaseEngine_Func");
    TriggerAddEventUnitAbility(gt_DecreaseEngine, null, AbilityCommand("DecreaseEnginePower", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Shields
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseShields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_maxShields;
    fixed lv_currShields;
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = gf_GetPlayerTeam(EventPlayer());
    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    gv_energy_shields[lv_index] = (gv_energy_shields[lv_index] + -5);
    lv_currShields = UnitGetPropertyFixed(gv_battlecruisers[lv_team], c_unitPropShields, c_unitPropCurrent);
    if(lv_maxShields > 0){
        libNtve_gf_SetDialogItemText(gv_shield_label, StringToText("<s val=\"PlanetPanelTechnologyName\">")+TextWithColor(StringToText("Shield: "), Color(0.00, 0.00, 100.00))+TextWithColor(FixedToText(lv_currShields,0)+StringToText("/")+FixedToText(lv_maxShields,0),Color((1-lv_currShields/lv_maxShields)*100.00,(1-lv_currShields/lv_maxShields)*100.00,100.00))+StringToText("</s>"), GameAttributePlayersForTeam(lv_team));
    }
    if( gv_energy_shields[lv_index] < 0){
      gv_energy_shields[lv_index] = 0;
    }
    gf_UpdateEnergyConsole(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseShields_Init () {
    gt_DecreaseShields = TriggerCreate("gt_DecreaseShields_Func");
    TriggerAddEventUnitAbility(gt_DecreaseShields, null, AbilityCommand("DecreaseShieldPower", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decrease Weapons
//--------------------------------------------------------------------------------------------------
bool gt_DecreaseWeapons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    gv_energy_weapons[lv_index] = (gv_energy_weapons[lv_index] + -5);
    if( gv_energy_weapons[lv_index] < -20){
      gv_energy_weapons[lv_index] = -20;
    }
    gf_UpdateEnergyConsole(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecreaseWeapons_Init () {
    gt_DecreaseWeapons = TriggerCreate("gt_DecreaseWeapons_Func");
    TriggerAddEventUnitAbility(gt_DecreaseWeapons, null, AbilityCommand("IncreaseEnginePower6", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack Left
//--------------------------------------------------------------------------------------------------
bool gt_HackLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hack_xe[EventPlayer()] -= 1;
    if( gv_hack_xe[lv_player] <  0){gv_hack_xe[lv_player] = 49;}
    DialogControlSetPosition(gv_uIPointer, PlayerGroupSingle(lv_player), c_anchorTopLeft, (34 + (gv_hack_xe[lv_player] * 18)), (38 + (gv_hack_ye[lv_player] * 18)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HackLeft_Init () {
    gt_HackLeft = TriggerCreate("gt_HackLeft_Func");
    TriggerAddEventUnitAbility(gt_HackLeft, null, AbilityCommand("HackLeft", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack Right
//--------------------------------------------------------------------------------------------------
bool gt_HackRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hack_xe[lv_player] += 1;
    if( gv_hack_xe[lv_player] > 49){gv_hack_xe[lv_player] = 0;}
    DialogControlSetPosition(gv_uIPointer, PlayerGroupSingle(lv_player), c_anchorTopLeft, (34 + (gv_hack_xe[lv_player] * 18)), (38 + (gv_hack_ye[lv_player] * 18)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HackRight_Init () {
    gt_HackRight = TriggerCreate("gt_HackRight_Func");
    TriggerAddEventUnitAbility(gt_HackRight, null, AbilityCommand("HackRight", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack Down
//--------------------------------------------------------------------------------------------------
bool gt_HackDown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hack_ye[lv_player] += 1;
    if( gv_hack_ye[lv_player] > 49){gv_hack_ye[lv_player] = 0;}
    DialogControlSetPosition(gv_uIPointer, PlayerGroupSingle(lv_player), c_anchorTopLeft, (34 + (gv_hack_xe[lv_player] * 18)), (38 + (gv_hack_ye[lv_player] * 18)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HackDown_Init () {
    gt_HackDown = TriggerCreate("gt_HackDown_Func");
    TriggerAddEventUnitAbility(gt_HackDown, null, AbilityCommand("HackDown", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack Up
//--------------------------------------------------------------------------------------------------
bool gt_HackUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hack_ye[lv_player] -= 1;
    if( gv_hack_ye[lv_player] <  0){gv_hack_ye[lv_player] = 49;}
    DialogControlSetPosition(gv_uIPointer, PlayerGroupSingle(lv_player), c_anchorTopLeft, (34 + (gv_hack_xe[lv_player] * 18)), (38 + (gv_hack_ye[lv_player] * 18)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HackUp_Init () {
    gt_HackUp = TriggerCreate("gt_HackUp_Func");
    TriggerAddEventUnitAbility(gt_HackUp, null, AbilityCommand("HackUp", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack Hack
//--------------------------------------------------------------------------------------------------
bool gt_HackHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_s;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_s = gv_hack_grid[gv_hack_xe[EventPlayer()]][gv_hack_ye[EventPlayer()]][EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    if(lv_s == ">"){
      lv_s = "^";
    }else if(lv_s == "^"){
      lv_s = "<";
    }else if(lv_s == "<"){
      lv_s = "v";
    }else if(lv_s == "v"){
      lv_s = ">";
    }else if(lv_s == "+"){
      lv_s = "-";
    }else if(lv_s == "-"){
      lv_s = "*";
    }else if(lv_s == "*"){
      lv_s = ",";
    }else if(lv_s == ","){
      lv_s = "+";
    }else if(lv_s == "0"){
      lv_s = "1";
    }else if(lv_s == "1"){
      lv_s = "2";
    }else if(lv_s == "2"){
      lv_s = "3";
    }else if(lv_s == "3"){
      lv_s = "4";
    }else if(lv_s == "4"){
      lv_s = "5";
    }else if(lv_s == "5"){
      lv_s = "6";
    }else if(lv_s == "6"){
      lv_s = "7";
    }else if(lv_s == "7"){
      lv_s = "8";
    }else if(lv_s == "8"){
      lv_s = "9";
    }else if(lv_s == "9"){
      lv_s = "a";
    }else if(lv_s == "a"){
      lv_s = "b";
    }else if(lv_s == "b"){
      lv_s = "c";
    }else if(lv_s == "c"){
      lv_s = "d";
    }else if(lv_s == "d"){
      lv_s = "e";
    }else if(lv_s == "e"){
      lv_s = "f";
    }else if(lv_s == "f"){
      lv_s = "0";
    }else if(lv_s == ":"){
      lv_s = "~";
    }else if(lv_s == "~"){
      lv_s = ":";
    }else if(lv_s == ""){
      lv_s = "";
    }else if(lv_s == ""){
      lv_s = "";
    }else if(lv_s == ""){
      lv_s = "";
    }else if(lv_s == ""){
      lv_s = "";
    }else if(lv_s == ""){
      lv_s = "";
    }else if(lv_s == ""){
      lv_s = "";
    }
    gv_hack_grid[gv_hack_xe[lv_player]][gv_hack_ye[lv_player]][lv_player] = lv_s;
    libNtve_gf_SetDialogItemText(gv_uIGrid[gv_hack_xe[lv_player]][gv_hack_ye[lv_player]], StringToText(gv_hack_grid[gv_hack_xe[lv_player]][gv_hack_ye[lv_player]][lv_player]), PlayerGroupSingle(lv_player));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HackHack_Init () {
    gt_HackHack = TriggerCreate("gt_HackHack_Func");
    TriggerAddEventUnitAbility(gt_HackHack, null, AbilityCommand("Hack", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack Leave
//--------------------------------------------------------------------------------------------------
bool gt_HackLeave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hack_break[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HackLeave_Init () {
    gt_HackLeave = TriggerCreate("gt_HackLeave_Func");
    TriggerAddEventUnitAbility(gt_HackLeave, null, AbilityCommand("HackLeave", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter hacking
//--------------------------------------------------------------------------------------------------
bool gt_Enterhacking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if (true) {
        gv_hack_level[EventPlayer()] = 3;
        libNtve_gf_SetDialogItemDesaturated(gv_stackWindowBackground, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_stackWindowBackground, StringExternal("Param/Value/A336D2F7"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        if ((gf_UnitHasItem(EventUnit(), "AdvancedHackingTools") == true)) {
            gv_hack_level[EventPlayer()] = 2;
            libNtve_gf_SetDialogItemDesaturated(gv_stackWindowBackground, false, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemTooltip(gv_stackWindowBackground, StringExternal("Param/Value/97584AAD"), PlayerGroupSingle(EventPlayer()));
        }
        else {
            if ((gf_UnitHasItem(EventUnit(), "Hackingtools") == true)) {
                gv_hack_level[EventPlayer()] = 1;
                libNtve_gf_SetDialogItemDesaturated(gv_stackWindowBackground, true, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemTooltip(gv_stackWindowBackground, StringExternal("Param/Value/2BA75577"), PlayerGroupSingle(EventPlayer()));
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Enterhacking_Init () {
    gt_Enterhacking = TriggerCreate("gt_Enterhacking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hacking actor visual
//--------------------------------------------------------------------------------------------------
bool gt_Hackingactorvisual_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_c;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_c = UnitGroupClosestToPoint(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lv_u));
    ActorCreate(ActorScopeFromUnit(lv_c), "HackedconsolePeriodic", null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hackingactorvisual_Init () {
    gt_Hackingactorvisual = TriggerCreate("gt_Hackingactorvisual_Func");
    TriggerAddEventPlayerEffectUsed(gt_Hackingactorvisual, c_playerAny, "Hackingvisual");
}

//--------------------------------------------------------------------------------------------------
// Trigger: fake level
//--------------------------------------------------------------------------------------------------
bool gt_fakelevel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_hack_level[1] = 5;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fakelevel_Init () {
    gt_fakelevel = TriggerCreate("gt_fakelevel_Func");
    TriggerAddEventChatMessage(gt_fakelevel, c_playerAny, "level", true);
    TriggerAddEventMapInit(gt_fakelevel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hack
//--------------------------------------------------------------------------------------------------
bool gt_Hack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_hackbutton))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hack_Init () {
    gt_Hack = TriggerCreate("gt_Hack_Func");
    TriggerAddEventDialogControl(gt_Hack, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Missile
//--------------------------------------------------------------------------------------------------
bool gt_LoadMissile_Func (bool testConds, bool runActions) {
    int auto2BE8C494_ae;
    int auto2BE8C494_ai;

    // Variable Declarations
    int lv_missileType;
    int lv_a;

    // Variable Initialization
    lv_missileType = gf_GetMissileidItem(UnitGetType(EventUnit()));

    // Conditions
    if (testConds) {
        if (!((UnitInventoryUnit(EventUnit()) == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_missileType != -1)) {
        auto2BE8C494_ae = 2;
        auto2BE8C494_ai = 1;
        lv_a = 1;
        for ( ; ( (auto2BE8C494_ai >= 0 && lv_a <= auto2BE8C494_ae) || (auto2BE8C494_ai <= 0 && lv_a >= auto2BE8C494_ae) ) ; lv_a += auto2BE8C494_ai ) {
            IntLoopBegin(0, 10);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((gv_missileBays[IntLoopCurrent()][lv_a] != null)) {
                    if ((libNtve_gf_UnitInRegion(EventUnit(), gv_missileBays[IntLoopCurrent()][lv_a]) == true)) {
                        gf_PreloadMissile(IntLoopCurrent(), lv_a, EventUnit());
                        break;
                    }
                    else {
                    }
                }
                else {
                }
            }
            IntLoopEnd();
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadMissile_Init () {
    gt_LoadMissile = TriggerCreate("gt_LoadMissile_Func");
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(21), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(27), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_LoadMissile, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automatic Missile Reloading
//--------------------------------------------------------------------------------------------------
bool gt_AutomaticMissileReloading_Func (bool testConds, bool runActions) {
    int auto555377C1_ae;
    int auto555377C1_ai;
    unitgroup auto36EE0850_g;
    int auto36EE0850_u;

    // Variable Declarations
    int lv_a;
    unit lv_missile;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(5.0, c_timeGame);
        auto555377C1_ae = 2;
        auto555377C1_ai = 1;
        lv_a = 1;
        for ( ; ( (auto555377C1_ai >= 0 && lv_a <= auto555377C1_ae) || (auto555377C1_ai <= 0 && lv_a >= auto555377C1_ae) ) ; lv_a += auto555377C1_ai ) {
            IntLoopBegin(0, 10);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((gv_missileBays[IntLoopCurrent()][lv_a] != null) && (gf_bayIsLoaded(IntLoopCurrent(), lv_a) == false) && (gv_preloading[IntLoopCurrent()][lv_a] == false)) {
                    auto36EE0850_g = UnitGroup(null, c_playerAny, gv_missileBays[IntLoopCurrent()][lv_a], UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto36EE0850_u = 1;
                    for ( ; auto36EE0850_u <= UnitGroupCount(auto36EE0850_g, c_unitCountAll) ; auto36EE0850_u += BoolToInt(lv_missile == UnitGroupUnit(auto36EE0850_g, auto36EE0850_u)) ) {
                        lv_missile = UnitGroupUnit(auto36EE0850_g, auto36EE0850_u);
                        if ((gf_GetMissileidItem(UnitGetType(lv_missile)) != -1)) {
                            gf_PreloadMissile(IntLoopCurrent(), lv_a, lv_missile);
                            break;
                        }
                        else {
                        }
                    }
                }
                else {
                }
            }
            IntLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutomaticMissileReloading_Init () {
    gt_AutomaticMissileReloading = TriggerCreate("gt_AutomaticMissileReloading_Func");
    TriggerAddEventTimeElapsed(gt_AutomaticMissileReloading, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire missile
//--------------------------------------------------------------------------------------------------
bool gt_Firemissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bc;
    unit lv_u;
    unit lv_missile;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_launchMissileDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(0, 5);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == gv_launchMissileButton[IntLoopCurrent()])) {
            gf_Firemissile(EventPlayer(), IntLoopCurrent());
            break;
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Firemissile_Init () {
    gt_Firemissile = TriggerCreate("gt_Firemissile_Func");
    TriggerAddEventDialogControl(gt_Firemissile, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter MC
//--------------------------------------------------------------------------------------------------
bool gt_EnterMC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestConsole;
    unit lv_closestU;
    int lv_closestMarine;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitGroupLoopBegin(UnitGroup("Marine", c_playerAny, RegionCircle(UnitGetPosition(lv_closestU), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gf_GetPlayerTeamAI(EventPlayer())) && (UnitHasBehavior(UnitGroupLoopCurrent(), "InConsole") == true)) {
            gf_LeaveConsole(gf_GetPlayerTeamAI(EventPlayer()), UnitGroupLoopCurrent());
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((UnitHasBehavior(lv_closestU, "ConsoleOccupied") == false)) {
        UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
        UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
        PlayerGroupAdd(gv_consolePlayers, EventPlayer());
        gf_SpaceView(EventPlayer(), gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
        PlayerGroupAdd(gv_laserPlayers, EventPlayer());
        DialogSetVisible(gv_launchMissileDialog, PlayerGroupSingle(EventPlayer()), true);
        lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("WeaponsConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
        UnitClearSelection(EventPlayer());
        UnitSelect(lv_closestConsole, EventPlayer(), true);
        UnitBehaviorRemove(lv_closestConsole, "Unlockedcamera", 1);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
        libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
        UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterMC_Init () {
    gt_EnterMC = TriggerCreate("gt_EnterMC_Func");
    TriggerAddEventUnitRange(gt_EnterMC, null, UnitFromId(2652), 1.0, true);
    TriggerAddEventUnitRange(gt_EnterMC, null, UnitFromId(2445), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tracking Beacon Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_TrackingBeaconDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "TrackingBeacon"))) {
            return false;
        }

        if (!((UnitGroupCount(UnitGroup("TrackingBeacon", c_playerAny, gv_battlecruiserArea[(3 - gf_GetPlayerTeam(EventPlayer()))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShareVisionofUnit(gv_battlecruisers[(3 - gf_GetPlayerTeam(EventPlayer()))], false, gf_GetPlayerTeamAI(EventPlayer()));
    UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(libNtve_gf_KillingPlayer())], c_messageAreaDebug, (TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + StringExternal("Param/Value/500B3E68")));
    UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(EventPlayer())], c_messageAreaDebug, (TextWithColor(PlayerName(libNtve_gf_KillingPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + StringExternal("Param/Value/1B4F617C")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackingBeaconDestroyed_Init () {
    gt_TrackingBeaconDestroyed = TriggerCreate("gt_TrackingBeaconDestroyed_Func");
    TriggerAddEventUnitDied(gt_TrackingBeaconDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Camera
//--------------------------------------------------------------------------------------------------
bool gt_UnlockCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_view[EventPlayer()] == 1)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())])]), false, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/C0179864"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockCamera_Init () {
    gt_UnlockCamera = TriggerCreate("gt_UnlockCamera_Func");
    TriggerAddEventUnitAbility(gt_UnlockCamera, null, AbilityCommand("LockCamera2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lock Camera
//--------------------------------------------------------------------------------------------------
bool gt_LockCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_view[EventPlayer()] == 1)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())])]), true, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/354151CF"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LockCamera_Init () {
    gt_LockCamera = TriggerCreate("gt_LockCamera_Func");
    TriggerAddEventUnitAbility(gt_LockCamera, null, AbilityCommand("LockCamera", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: C-4 created
//--------------------------------------------------------------------------------------------------
bool gt_C4created_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "C4Explosive"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_C4countdown(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_C4created_Init () {
    gt_C4created = TriggerCreate("gt_C4created_Func");
    TriggerAddEventUnitRegion(gt_C4created, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave Navigation
//--------------------------------------------------------------------------------------------------
bool gt_LeaveNavigation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_CloseNavigation(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaveNavigation_Init () {
    gt_LeaveNavigation = TriggerCreate("gt_LeaveNavigation_Func");
    TriggerAddEventUnitAbility(gt_LeaveNavigation, null, AbilityCommand("ReturntoShip", 255), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Navigation
//--------------------------------------------------------------------------------------------------
bool gt_OpenNavigation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_closestU;
    unit lv_closestConsole;
    unit lv_unit;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("NavigationConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitClearSelection(EventPlayer());
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
    libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
    UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    if ((libNtve_gf_UnitInRegion(lv_unit, RegionFromId(2)) == true)) {
        gf_EnterNavigation(lv_player, gv_battlecruisers[1]);
    }
    else {
        gf_EnterNavigation(lv_player, gv_battlecruisers[2]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenNavigation_Init () {
    gt_OpenNavigation = TriggerCreate("gt_OpenNavigation_Func");
    TriggerAddEventUnitRange(gt_OpenNavigation, null, UnitFromId(2446), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenNavigation, null, UnitFromId(2593), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Construction
//--------------------------------------------------------------------------------------------------
bool gt_EnterConstruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
    PlayerGroupAdd(gv_consolePlayers, EventPlayer());
    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("ConstructionConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitClearSelection(EventPlayer());
    UnitSelect(lv_closestConsole, EventPlayer(), true);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
    UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
    UnitBehaviorAdd(lv_closestConsole, "StorageOpen", lv_closestConsole, 1);
    libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
    UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterConstruction_Init () {
    gt_EnterConstruction = TriggerCreate("gt_EnterConstruction_Func");
    TriggerAddEventUnitRange(gt_EnterConstruction, null, UnitFromId(4193), 1.0, true);
    TriggerAddEventUnitRange(gt_EnterConstruction, null, UnitFromId(4191), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_EnterUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;
    fixed lv_progress;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
    PlayerGroupAdd(gv_consolePlayers, EventPlayer());
    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("UpgradeConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitClearSelection(EventPlayer());
    UnitSelect(lv_closestConsole, EventPlayer(), true);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
    UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
    libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
    UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterUpgrades_Init () {
    gt_EnterUpgrades = TriggerCreate("gt_EnterUpgrades_Func");
    TriggerAddEventUnitRange(gt_EnterUpgrades, null, UnitFromId(2450), 1.0, true);
    TriggerAddEventUnitRange(gt_EnterUpgrades, null, UnitFromId(2447), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Item
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseItem_Func (bool testConds, bool runActions) {
    abilcmd auto59E471D5_val;

    // Variable Declarations
    int lv_lastIndex;
    int lv_itemID;
    point lv_constructionpoint;

    // Variable Initialization
    lv_constructionpoint = gv_constructionsite[gf_GetPlayerTeam(EventPlayer())];

    // Actions
    if (!runActions) {
        return true;
    }

    auto59E471D5_val = EventUnitAbility();
    if (auto59E471D5_val == AbilityCommand("PurchaseHellfireHeavyMissile", 0)) {
        lv_itemID = 6;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseMerculiteHeavyMissile", 0)) {
        lv_itemID = 7;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchasePiranhaLightMissile", 0)) {
        lv_itemID = 1;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchasePredatorHeavyMissile", 0)) {
        lv_itemID = 4;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseSabretoothHeavyMissile", 0)) {
        lv_itemID = 5;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseScorpionLightMissile", 0)) {
        lv_itemID = 2;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseWaspLightMissile", 0)) {
        lv_itemID = 3;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseRepairKit", 0)) {
        lv_itemID = 8;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseReviveKit", 0)) {
        lv_itemID = 9;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseDecoyFlares", 0)) {
        lv_itemID = 14;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseSmallShieldGenerator", 0)) {
        lv_itemID = 15;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseEMPMine", 0)) {
        lv_itemID = 16;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseOpposerProximityMine", 0)) {
        lv_itemID = 17;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseFrequencyNullifier", 0)) {
        lv_itemID = 18;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseARC12Rifle", 0)) {
        lv_itemID = 19;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseC14GaussRifle", 0)) {
        lv_itemID = 20;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseDustCannon", 0)) {
        lv_itemID = 21;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseDistressBeacon", 0)) {
        lv_itemID = 22;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseRepairStation", 0)) {
        lv_itemID = 23;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseFiresuit", 0)) {
        lv_itemID = 24;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseNanodocGloves", 0)) {
        lv_itemID = 25;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseAdaptivePhotoDisguise", 0)) {
        lv_itemID = 26;
    }
    else if (auto59E471D5_val == AbilityCommand("PurchaseC4Charge", 0)) {
        lv_itemID = 27;
    }
    else {
    }
    if ((lv_itemID == 23)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_items[lv_itemID].lv_type, 0, 0, PointWithOffsetPolar(lv_constructionpoint, 2.0, 90.0));
    }
    else {
        if ((lv_itemID == 14)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_items[lv_itemID].lv_type, 0, 0, PointWithOffsetPolar(lv_constructionpoint, 2.0, 270.0));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_items[lv_itemID].lv_type, 0, 0, lv_constructionpoint);
        }
    }
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseItem_Init () {
    gt_PurchaseItem = TriggerCreate("gt_PurchaseItem_Func");
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchasePiranhaLightMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseHellfireHeavyMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseMerculiteHeavyMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchasePredatorHeavyMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseSabretoothHeavyMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseScorpionLightMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseWaspLightMissile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseDecoyFlares", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseRepairKit", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseReviveKit", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseSmallShieldGenerator", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseEMPMine", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseOpposerProximityMine", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseFrequencyNullifier", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseARC12Rifle", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseC14GaussRifle", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseDustCannon", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseDistressBeacon", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseRepairStation", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseFiresuit", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseNanodocGloves", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseAdaptivePhotoDisguise", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PurchaseItem, null, AbilityCommand("PurchaseC4Charge", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prevent upgrade queue
//--------------------------------------------------------------------------------------------------
bool gt_Preventupgradequeue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_o;

    // Variable Initialization
    lv_o = EventUnitOrder();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(EventUnit(), Order(OrderGetAbilityCommand(lv_o)), c_orderQueueReplace);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Preventupgradequeue_Init () {
    gt_Preventupgradequeue = TriggerCreate("gt_Preventupgradequeue_Func");
    TriggerAddEventUnitOrder(gt_Preventupgradequeue, null, AbilityCommand("Upgrade", 255));
    TriggerAddEventUnitOrder(gt_Preventupgradequeue, null, AbilityCommand("Upgrade2", 255));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track Latest Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_TrackLatestUpgrade_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "UpgradeConsole"))) {
            return false;
        }

        if (!((AbilityCommandGetAbility(EventUnitAbility()) != "LeaveConsole"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_latestUpgrade[gf_GetPlayerTeam(EventPlayer())] = EventUnitAbility();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrackLatestUpgrade_Init () {
    gt_TrackLatestUpgrade = TriggerCreate("gt_TrackLatestUpgrade_Func");
    TriggerAddEventUnitAbility(gt_TrackLatestUpgrade, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Processing
//--------------------------------------------------------------------------------------------------
bool gt_Processing_Func (bool testConds, bool runActions) {
    string autoD7DB43B2_val;

    // Variable Declarations
    fixed lv_charges;
    int lv_team;
    fixed lv_refiningrate;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "PathingBlocker1x1"))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "VelditeOre") || (UnitGetType(EventUnit()) == "ChalcoriumOre") || (UnitGetType(EventUnit()) == "PyromaniteOre") || (UnitGetType(EventUnit()) == "KermiculiteOre")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_refiningrate = 1.0;
    if ((EventUnitRegion() == RegionFromId(38))) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    autoD7DB43B2_val = UnitGetType(EventUnit());
    if (autoD7DB43B2_val == "VelditeOre") {
        lv_charges = lib1_gf_ItemGetChargesRemaining(EventUnit());
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(lv_team));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, FixedToInt((lv_charges * lv_refiningrate)));
        }
        PlayerGroupLoopEnd();
    }
    else if (autoD7DB43B2_val == "ChalcoriumOre") {
        lv_charges = lib1_gf_ItemGetChargesRemaining(EventUnit());
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(lv_team));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, FixedToInt((lv_charges * lv_refiningrate)));
        }
        PlayerGroupLoopEnd();
    }
    else if (autoD7DB43B2_val == "PyromaniteOre") {
        lv_charges = lib1_gf_ItemGetChargesRemaining(EventUnit());
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(lv_team));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, FixedToInt((lv_charges * lv_refiningrate)));
        }
        PlayerGroupLoopEnd();
    }
    else if (autoD7DB43B2_val == "KermiculiteOre") {
        lv_charges = lib1_gf_ItemGetChargesRemaining(EventUnit());
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(lv_team));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, FixedToInt((lv_charges * lv_refiningrate)));
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Processing_Init () {
    gt_Processing = TriggerCreate("gt_Processing_Func");
    TriggerAddEventUnitRegion(gt_Processing, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_Processing, null, RegionFromId(40), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Selected Ship
//--------------------------------------------------------------------------------------------------
bool gt_ChangeSelectedShip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_hangarDialog) || (DialogControlGetDialog(EventDialogControl()) == gv_shipPurchaseDialog)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = gf_GetPlayerTeam(EventPlayer());
    DialogSetVisible(gv_salvageConfirmDialog, PlayerGroupSingle(EventPlayer()), false);
    IntLoopBegin(0, ((gv_hangarcolumns * gv_hangarrows) - 1));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == gv_shipListButtons[IntLoopCurrent()])) {
            gf_ShowHideInventory(false, EventPlayer());
            lib2_gv_selectedhangarinventory[EventPlayer()] = IntLoopCurrent();
            DialogControlSetEnabled(gv_shipListButtons[gv_selectedShip[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
            gv_selectedShip[EventPlayer()] = IntLoopCurrent();
            DialogControlSetEnabled(gv_shipListButtons[gv_selectedShip[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
            if ((gv_shiptypes[gv_shipList[gf_GetPlayerTeam(EventPlayer())][IntLoopCurrent()].lv_shipType].lv_buttonImage != null)) {
                DialogControlSetEnabled(gv_launchShipButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_withdrawItemsButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetEnabled(gv_depositItemButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_salvageItemButton, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_salvageItemImage, PlayerGroupSingle(EventPlayer()), true);
                DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(EventPlayer()), true);
                DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(EventPlayer()), false);
                libNtve_gf_SetDialogItemImage(gv_selectedShipImage, gv_shiptypes[gv_shipList[lv_team][IntLoopCurrent()].lv_shipType].lv_image, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_hangarDescription, gv_shiptypes[gv_shipList[lv_team][gv_selectedShip[EventPlayer()]].lv_shipType].lv_description, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_hangarName, (StringExternal("Param/Value/34D003CB") + UnitTypeGetName(gv_shiptypes[gv_shipList[lv_team][IntLoopCurrent()].lv_shipType].lv_unittype) + StringExternal("Param/Value/DBA2A9EA")), PlayerGroupSingle(EventPlayer()));
                DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemTooltip(gv_salvageItemButton, gf_CreateSalvageTooltip(gv_shipList[lv_team][IntLoopCurrent()].lv_shipType, EventPlayer()), PlayerGroupSingle(EventPlayer()));
                gf_ShowHideInventory(true, EventPlayer());
            }
            else {
                libNtve_gf_SetDialogItemText(gv_hangarDescription, StringExternal("Param/Value/E1B5D246"), PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemText(gv_hangarName, StringExternal("Param/Value/02CDDB1C"), PlayerGroupSingle(EventPlayer()));
                DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_salvageItemButton, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_salvageItemImage, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(EventPlayer()), false);
                gf_ShowHideInventory(false, EventPlayer());
                DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(EventPlayer()), true);
            }
        }
        else {
        }
    }
    IntLoopEnd();
    IntLoopBegin(0, ((gv_hangarPurchasecolumns * gv_hangarPurchaserows) - 1));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == gv_shipPurchaseButtons[IntLoopCurrent()])) {
            gv_selectedShipPurchase[EventPlayer()] = IntLoopCurrent();
            libNtve_gf_SetDialogItemImage(gv_selectedPurchaseShipImage, gv_shiptypes[IntLoopCurrent()].lv_image, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_purchaseCost, (StringExternal("Param/Value/CEC8BA94") + (TextWithColor((StringExternal("Param/Value/0BF6B96C") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 0))), libNtve_gf_ConvertPlayerColorToColor(5)) + (TextWithColor((StringExternal("Param/Value/24714689") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 1))), libNtve_gf_ConvertPlayerColorToColor(3)) + (TextWithColor((StringExternal("Param/Value/AC99758F") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 2))), libNtve_gf_ConvertPlayerColorToColor(1)) + TextWithColor((StringExternal("Param/Value/1CCB6DC7") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 3))), libNtve_gf_ConvertPlayerColorToColor(7)))))), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(gv_purchaseDescription, gv_shiptypes[gv_selectedShipPurchase[EventPlayer()]].lv_description, PlayerGroupSingle(EventPlayer()));
            libNtve_gf_SetDialogItemText(gv_purchaseName, (StringExternal("Param/Value/52C4413A") + UnitTypeGetName(gv_shiptypes[gv_selectedShipPurchase[EventPlayer()]].lv_unittype) + StringExternal("Param/Value/1E409969")), PlayerGroupSingle(EventPlayer()));
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeSelectedShip_Init () {
    gt_ChangeSelectedShip = TriggerCreate("gt_ChangeSelectedShip_Func");
    TriggerAddEventDialogControl(gt_ChangeSelectedShip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Hangar
//--------------------------------------------------------------------------------------------------
bool gt_CloseHangar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_closeHangar))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ShowHideInventory(false, EventPlayer());
    gf_Closehangar(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseHangar_Init () {
    gt_CloseHangar = TriggerCreate("gt_CloseHangar_Func");
    TriggerAddEventDialogControl(gt_CloseHangar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Hangar
//--------------------------------------------------------------------------------------------------
bool gt_OpenHangar_Func (bool testConds, bool runActions) {
    int autoDC0579E0_ae;
    int autoDC0579E0_ai;

    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;
    int lv_a;
    int lv_buttonid;
    bool lv_skip;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("Hangarconsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
    PlayerGroupAdd(gv_consolePlayers, EventPlayer());
    UnitClearSelection(EventPlayer());
    if (((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true))) {
        if ((gv_shiptypes[gv_shipList[gf_GetPlayerTeam(EventPlayer())][gv_selectedShip[EventPlayer()]].lv_shipType].lv_buttonImage == null)) {
            DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_selectedShipImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_launchShipButton, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_withdrawItemsButton, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_withdrawItemsImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_depositItemButton, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_depositItemImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_inventoryLabel, PlayerGroupSingle(EventPlayer()), false);
            gf_ShowHideInventory(false, EventPlayer());
            if ((gv_shipList[gf_GetPlayerTeam(EventPlayer())][gv_selectedShip[EventPlayer()]].lv_status == 1)) {
                DialogControlSetEnabled(gv_withdrawItemsButton, PlayerGroupSingle(EventPlayer()), false);
                DialogControlSetEnabled(gv_depositItemButton, PlayerGroupSingle(EventPlayer()), false);
            }
            else {
            }
        }
        else {
            gf_ShowHideInventory(true, EventPlayer());
        }
        IntLoopBegin(0, 14);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_shipListButtons[IntLoopCurrent()] != c_invalidDialogControlId)) {
                DialogControlSetEnabled(gv_shipListButtons[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
            }
        }
        IntLoopEnd();
        DialogControlSetEnabled(gv_shipListButtons[gv_selectedShip[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_hangarDialog, PlayerGroupSingle(EventPlayer()), true);
        autoDC0579E0_ae = (gv_hangarrows - 1);
        autoDC0579E0_ai = 1;
        lv_a = 0;
        for ( ; ( (autoDC0579E0_ai >= 0 && lv_a <= autoDC0579E0_ae) || (autoDC0579E0_ai <= 0 && lv_a >= autoDC0579E0_ae) ) ; lv_a += autoDC0579E0_ai ) {
            IntLoopBegin(0, (gv_hangarcolumns - 1));
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                lv_buttonid = ((gv_hangarcolumns * lv_a) + IntLoopCurrent());
                if ((gv_shiptypes[gv_shipList[gf_GetPlayerTeam(EventPlayer())][lv_buttonid].lv_shipType].lv_buttonImage == null)) {
                    DialogControlSetVisible(gv_shipListImages[lv_buttonid], PlayerGroupSingle(EventPlayer()), false);
                }
                else {
                    DialogControlSetVisible(gv_shipListImages[lv_buttonid], PlayerGroupSingle(EventPlayer()), true);
                }
            }
            IntLoopEnd();
        }
        UnitSelect(lv_closestConsole, EventPlayer(), true);
        UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    }
    else {
    }
    if ((lv_skip == false)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
        UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
        libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenHangar_Init () {
    gt_OpenHangar = TriggerCreate("gt_OpenHangar_Func");
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4228), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4227), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4229), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4230), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4232), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4231), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4194), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4195), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4224), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4223), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4226), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenHangar, null, UnitFromId(4225), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close Purchase Ship
//--------------------------------------------------------------------------------------------------
bool gt_ClosePurchaseShip_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_closePurchaseShip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_shipPurchaseDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(EventPlayer()), true);
    IntLoopBegin(0, 14);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_shipListButtons[IntLoopCurrent()] != c_invalidDialogControlId)) {
            DialogControlSetEnabled(gv_shipListButtons[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), true);
        }
        else {
        }
    }
    IntLoopEnd();
    DialogControlSetEnabled(gv_shipListButtons[gv_selectedShip[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClosePurchaseShip_Init () {
    gt_ClosePurchaseShip = TriggerCreate("gt_ClosePurchaseShip_Func");
    TriggerAddEventDialogControl(gt_ClosePurchaseShip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Purchase Ship
//--------------------------------------------------------------------------------------------------
bool gt_OpenPurchaseShip_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_openPurchaseShip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_shipPurchaseDialog, PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_shipInfoDialog, PlayerGroupSingle(EventPlayer()), false);
    IntLoopBegin(0, 15);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_shipListButtons[IntLoopCurrent()] != c_invalidDialogControlId)) {
            DialogControlSetEnabled(gv_shipListButtons[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenPurchaseShip_Init () {
    gt_OpenPurchaseShip = TriggerCreate("gt_OpenPurchaseShip_Func");
    TriggerAddEventDialogControl(gt_OpenPurchaseShip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Ship
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseShip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_veld_cost;
    int lv_chalc_cost;
    int lv_pyro_cost;
    int lv_kerm_cost;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_purchaseship))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_shiptypes[gv_selectedShipPurchase[EventPlayer()]].lv_unittype == "HelsAngelFighter") && (gf_countShips(gf_GetPlayerTeam(EventPlayer()), gv_shiptypes[gv_selectedShipPurchase[EventPlayer()]].lv_unittype) >= 1)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/BAD0D680"), Color(100.00, 0.00, 0.00)));
        return true;
    }
    else {
    }
    lv_veld_cost = gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 0);
    lv_chalc_cost = gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 1);
    lv_pyro_cost = gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 2);
    lv_kerm_cost = gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[EventPlayer()], 3);
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_veld_cost) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) >= lv_chalc_cost) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) >= lv_pyro_cost) && (PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom) >= lv_kerm_cost)) {
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor((StringExternal("Param/Value/F77B2EDF") + UnitTypeGetName(gv_shiptypes[gv_selectedShipPurchase[EventPlayer()]].lv_unittype)), Color(100.00, 100.00, 0.00))));
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            lv_p = PlayerGroupLoopCurrent();
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSubtract, lv_veld_cost);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSubtract, lv_chalc_cost);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSubtract, lv_pyro_cost);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSubtract, lv_kerm_cost);
        }
        PlayerGroupLoopEnd();
        PlayerScoreValueSetFromFixed(EventPlayer(), "MineralsUsedTotalUpgrade", (PlayerScoreValueGetAsFixed(EventPlayer(), "UpgradeSpendingSampled") + (lv_veld_cost + lv_chalc_cost + lv_pyro_cost + lv_kerm_cost)));
        gf_createShip(gf_GetPlayerTeam(EventPlayer()), gv_selectedShipPurchase[EventPlayer()], gv_selectedShip[EventPlayer()]);
        IntLoopBegin(0, 15);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((gv_shipListButtons[IntLoopCurrent()] != c_invalidDialogControlId)) {
                DialogControlSetEnabled(gv_shipListButtons[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), true);
            }
            else {
            }
        }
        IntLoopEnd();
        DialogControlSetEnabled(gv_shipListButtons[gv_selectedShip[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) < lv_veld_cost)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/99B7FDCD"), Color(100.00, 0.00, 0.00)));
        }
        else {
            if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene) < lv_chalc_cost)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/59840CF6"), Color(100.00, 0.00, 0.00)));
            }
            else {
                if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine) < lv_pyro_cost)) {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/0620297D"), Color(100.00, 0.00, 0.00)));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, TextWithColor(StringExternal("Param/Value/925D5CA7"), Color(100.00, 0.00, 0.00)));
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseShip_Init () {
    gt_PurchaseShip = TriggerCreate("gt_PurchaseShip_Func");
    TriggerAddEventDialogControl(gt_PurchaseShip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dock Ship
//--------------------------------------------------------------------------------------------------
bool gt_DockShip_Func (bool testConds, bool runActions) {
    playergroup auto9746F326_g;
    int auto9746F326_p;
    playergroup auto219D5B3E_g;
    int auto219D5B3E_p;
    playergroup autoE93B67DD_g;
    int autoE93B67DD_p;
    playergroup auto07379DA3_g;
    int auto07379DA3_p;
    int auto9F44734E_ae;
    int auto9F44734E_ai;
    int auto9E14A850_ae;
    int auto9E14A850_ai;

    // Variable Declarations
    unit lv_ship;
    fixed lv_charges;
    int lv_loopX;
    int lv_loopY;
    int lv_inventoryID;
    string lv_itemremove;
    bool lv_additemsuccess;
    fixed lv_energy;
    int lv_player;
    int lv_team;
    int lv_firstemptyslot;
    int lv_shipID;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_dockBlock[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_ship = gf_navigatorToShip(EventUnit());
    gv_dockBlock[EventPlayer()] = true;
    if ((EventUnitAbility() == AbilityCommand("Dock", 0))) {
        gv_board[lv_player] = false;
        lv_team = gf_GetPlayerTeam(EventPlayer());
    }
    else {
        gv_board[EventPlayer()] = true;
        lv_team = (3 - gf_GetPlayerTeam(EventPlayer()));
    }
    if ((DistanceBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(gv_battlecruisers[lv_team])) <= 6.5)) {
        if ((UnitHasBehavior(EventUnit(), "EMPFornavigatedships") == false)) {
            if (((UnitHasBehavior(gv_pilots[EventPlayer()], "Boarding") == true) || (EventUnitAbility() != AbilityCommand("Dock", 0)))) {
                UnitSetPosition(gv_pilots[EventPlayer()], gv_mineraldropoff[lv_team], false);
            }
            else {
            }
            if (((UnitHasBehavior(lv_ship, "RecentlyLaunched") == false) || (EventUnitAbility() != AbilityCommand("Dock", 0)))) {
                UnitBehaviorRemove(lv_ship, "PlasmaTransfer", 1);
                if ((EventUnitAbility() == AbilityCommand("Dock", 0))) {
                    UnitBehaviorRemove(gv_pilots[EventPlayer()], "Boarding", 1);
                    VisRevealerEnable(gv_playerVisibilityRevealer[0][EventPlayer()], true);
                    VisRevealerEnable(gv_playerVisibilityRevealer[1][EventPlayer()], true);
                    autoE93B67DD_g = GameAttributePlayersForTeam(lv_team); 
                    autoE93B67DD_p = 1;
                    for ( ; autoE93B67DD_p <= PlayerGroupCount(autoE93B67DD_g) ; autoE93B67DD_p += BoolToInt(lv_p == PlayerGroupPlayer(autoE93B67DD_g, autoE93B67DD_p)) ) {
                        lv_p = PlayerGroupPlayer(autoE93B67DD_g, autoE93B67DD_p);
                        if ((lv_p != lv_player)) {
                            libNtve_gf_SetAlliance(lv_p, lv_player, 1);
                        }
                        else {
                        }
                    }
                    auto07379DA3_g = GameAttributePlayersForTeam((3 - lv_team)); 
                    auto07379DA3_p = 1;
                    for ( ; auto07379DA3_p <= PlayerGroupCount(auto07379DA3_g) ; auto07379DA3_p += BoolToInt(lv_p == PlayerGroupPlayer(auto07379DA3_g, auto07379DA3_p)) ) {
                        lv_p = PlayerGroupPlayer(auto07379DA3_g, auto07379DA3_p);
                        if ((lv_p != lv_player)) {
                            PlayerSetAlliance(lv_p, c_allianceIdChat, lv_player, false);
                        }
                        else {
                        }
                    }
                    libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(lv_player), lv_player, 1);
                    PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, true);
                    PlayerGroupRemove(gv_players_inside[(3 - lv_team)], lv_player);
                }
                else {
                    UnitSetCustomValue(gv_pilots[EventPlayer()], 26, UnitGetPropertyFixed(lv_ship, c_unitPropLife, c_unitPropCurrent));
                    UnitBehaviorAdd(gv_pilots[EventPlayer()], "Boarding", gv_pilots[EventPlayer()], 1);
                    VisRevealerEnable(gv_playerVisibilityRevealer[0][EventPlayer()], false);
                    VisRevealerEnable(gv_playerVisibilityRevealer[1][EventPlayer()], false);
                    auto9746F326_g = GameAttributePlayersForTeam((3 - lv_team)); 
                    auto9746F326_p = 1;
                    for ( ; auto9746F326_p <= PlayerGroupCount(auto9746F326_g) ; auto9746F326_p += BoolToInt(lv_p == PlayerGroupPlayer(auto9746F326_g, auto9746F326_p)) ) {
                        lv_p = PlayerGroupPlayer(auto9746F326_g, auto9746F326_p);
                        if ((lv_p != lv_player)) {
                            libNtve_gf_SetAlliance(lv_p, lv_player, 0);
                            PlayerSetAlliance(lv_p, c_allianceIdVision, lv_player, false);
                        }
                        else {
                        }
                    }
                    auto219D5B3E_g = GameAttributePlayersForTeam(lv_team); 
                    auto219D5B3E_p = 1;
                    for ( ; auto219D5B3E_p <= PlayerGroupCount(auto219D5B3E_g) ; auto219D5B3E_p += BoolToInt(lv_p == PlayerGroupPlayer(auto219D5B3E_g, auto219D5B3E_p)) ) {
                        lv_p = PlayerGroupPlayer(auto219D5B3E_g, auto219D5B3E_p);
                        if ((lv_p != lv_player)) {
                            PlayerSetAlliance(lv_p, c_allianceIdChat, lv_player, true);
                        }
                        else {
                        }
                    }
                    libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(lv_player), lv_player, 0);
                    PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, false);
                    gf_Unexploreafterdelay(1.0, lv_player);
                }
                lib2_gv_selectedhangarinventory[EventPlayer()] = FixedToInt(UnitGetCustomValue(lv_ship, 6));
                if ((gf_GetPlayerTeamAI(EventPlayer()) == EventPlayer())) {
                    lv_player = UnitGetOwner(lv_ship);
                    libNtve_gf_ShowHideUnit(gf_shipToAvatar(lv_ship, gf_GetPlayerTeam(lv_player)), true);
                    UnitBehaviorRemove(gf_shipToAvatar(lv_ship, gf_GetPlayerTeam(EventPlayer())), "DisableAttack", 1);
                }
                else {
                    lv_player = EventPlayer();
                    libNtve_gf_ShowHideUnit(gv_pilots[EventPlayer()], true);
                    UnitBehaviorRemove(gv_pilots[EventPlayer()], "DisableAttack", 1);
                }
                DialogSetVisible(gv_shipStatus, PlayerGroupSingle(EventPlayer()), false);
                gv_nav_speed[gf_navigatorToIndex(EventUnit())] = 0.0;
                UnitBehaviorAdd(lv_ship, "DontDie", lv_ship, 1);
                lv_inventoryID = gf_getHangarInventory(lv_player);
                PlayerGroupAdd(gv_players_inside[lv_team], lv_player);
                libNtve_gf_AttachActorToUnit(gf_navigatorToShip(EventUnit()), "SoundDock", "Ref_Origin");
                UnitSetCustomValue(lv_ship, 1, 0.0);
                UnitSetCustomValue(lv_ship, 2, 0.0);
                UnitSetFacing(lv_ship, UnitGetFacing(gv_battlecruisers[lv_team]), 0.0);
                gf_PhysicsApplyForceCartesian(lv_ship, UnitGetCustomValue(gv_battlecruisers[lv_team], 1), UnitGetCustomValue(gv_battlecruisers[lv_team], 2));
                if ((EventUnitAbility() == AbilityCommand("Dock", 0))) {
                    lib2_gf_DisableEnableInventory(lv_inventoryID, false);
                    auto9F44734E_ae = lib2_gv_inventories[lv_inventoryID].lv_sizeX;
                    auto9F44734E_ai = 1;
                    lv_loopX = 0;
                    for ( ; ( (auto9F44734E_ai >= 0 && lv_loopX <= auto9F44734E_ae) || (auto9F44734E_ai <= 0 && lv_loopX >= auto9F44734E_ae) ) ; lv_loopX += auto9F44734E_ai ) {
                        auto9E14A850_ae = lib2_gv_inventories[lv_inventoryID].lv_sizeY;
                        auto9E14A850_ai = 1;
                        lv_loopY = 0;
                        for ( ; ( (auto9E14A850_ai >= 0 && lv_loopY <= auto9E14A850_ae) || (auto9E14A850_ai <= 0 && lv_loopY >= auto9E14A850_ae) ) ; lv_loopY += auto9E14A850_ai ) {
                            if ((lib2_gv_inventories[lv_inventoryID].lv_slots[lv_loopX][lv_loopY] != c_invalidDialogControlId) && (lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY] != null)) {
                                lv_itemremove = lib2_gf_RemoveItemfromPosition(lv_inventoryID, lv_loopX, lv_loopY, 1, 1);
                            }
                            else {
                            }
                        }
                    }
                    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((gf_getItemStackable(UnitGetType(UnitGroupLoopCurrent())) == true)) {
                            lv_charges = lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent());
                        }
                        else {
                        }
                        lv_additemsuccess = lib2_gf_AddItemToInventory(lv_inventoryID, 1, 1, lib2_gf_GetImageFromUnit(UnitGetType(UnitGroupLoopCurrent())), UnitGetType(UnitGroupLoopCurrent()), lv_charges);
                    }
                    UnitGroupLoopEnd();
                    DialogControlSetVisible(gv_shipListImagesInspace[FixedToInt(lib2_gv_selectedhangarinventory[lv_player])], GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_player)), false);
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/7F0805B5"));
                    gv_shipList[gf_GetPlayerTeam(lv_player)][lib2_gv_selectedhangarinventory[EventPlayer()]].lv_status = 0;
                    UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(lv_player)], c_messageAreaChat, (TextWithColor(((TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/2ED1A3B0") + UnitTypeGetName(UnitGetType(lv_ship))) + StringExternal("Param/Value/9E3B4E01")), Color(100.00, 100.00, 0.00)) + TextWithColor((StringExternal("Param/Value/C205F961") + FixedToText((UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropNormal) + TechTreeUpgradeCount(UnitGetOwner(lv_ship), "SmallshipsVesselEnergyUpgrade", c_techCountCompleteOnly)), 0) + StringExternal("Param/Value/EFE50840")), Color(0.00, 100.00, 0.00))));
                    DialogControlSetVisible(gv_switchViewButton, PlayerGroupSingle(lv_player), true);
                    DialogSetVisible(gv_openDirectionsdialog, PlayerGroupSingle(lv_player), true);
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaChat, StringExternal("Param/Value/CA22FC10"));
                }
                if ((lv_player == gf_GetPlayerTeamAI(lv_player))) {
                    gf_CloseNavigationIndex(lv_player, gf_shipToIndex(lv_ship));
                }
                else {
                    gf_CloseNavigation(lv_player);
                }
                gf_UnregisterShipNavigation(lv_ship);
                Wait(0.1, c_timeGame);
                UnitRemove(lv_ship);
                DialogSetVisible(gv_shipStatus, PlayerGroupSingle(lv_player), true);
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, TextWithColor((StringExternal("Param/Value/D4BFF3BD") + FixedToText(UnitBehaviorDuration(lv_ship, "RecentlyLaunched"), 1) + StringExternal("Param/Value/73118D5E")), Color(100.00, 0.00, 0.00)));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/71A3EBE2"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaError, StringExternal("Param/Value/AEA9F437"));
    }
    gv_dockBlock[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DockShip_Init () {
    gt_DockShip = TriggerCreate("gt_DockShip_Func");
    TriggerAddEventUnitAbility(gt_DockShip, null, AbilityCommand("Dock", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_DockShip, null, AbilityCommand("BoardShip", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Ship
//--------------------------------------------------------------------------------------------------
bool gt_LaunchShip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_launchShipButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = gf_Launchship(EventPlayer(), gv_selectedShip[EventPlayer()], null, gf_GetPlayerTeam(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchShip_Init () {
    gt_LaunchShip = TriggerCreate("gt_LaunchShip_Func");
    TriggerAddEventDialogControl(gt_LaunchShip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deposit Hangar Item
//--------------------------------------------------------------------------------------------------
bool gt_DepositHangarItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    fixed lv_charges;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_depositItemButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_shipList[gf_GetPlayerTeam(EventPlayer())][gf_getHangarInventory(EventPlayer())].lv_status == 0) && (gv_shipList[gf_GetPlayerTeam(EventPlayer())][gf_getHangarInventory(EventPlayer())].lv_currentRespawn == 0)) {
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Hangarinventorydeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[EventPlayer()]))), 1.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((gf_getItemStackable(UnitGetType(UnitGroupLoopCurrent())) == true)) {
                lv_charges = lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent());
            }
            else {
            }
            if ((lib2_gf_AddItemToInventory(gf_getHangarInventory(EventPlayer()), 1, 1, lib2_gf_GetImageFromUnit(UnitGetType(UnitGroupLoopCurrent())), UnitGetType(UnitGroupLoopCurrent()), lv_charges) == true)) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/4BDF2910"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DepositHangarItem_Init () {
    gt_DepositHangarItem = TriggerCreate("gt_DepositHangarItem_Func");
    TriggerAddEventDialogControl(gt_DepositHangarItem, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Withdraw All Hangar items
//--------------------------------------------------------------------------------------------------
bool gt_WithdrawAllHangaritems_Func (bool testConds, bool runActions) {
    int autoF296C49E_ae;
    int autoF296C49E_ai;
    int auto5C63F77C_ae;
    int auto5C63F77C_ai;

    // Variable Declarations
    unit lv_u;
    int lv_loopX;
    int lv_loopY;
    int lv_inventoryID;
    fixed lv_charges;
    string lv_removeditem;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_withdrawItemsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_shipList[gf_GetPlayerTeam(EventPlayer())][gf_getHangarInventory(EventPlayer())].lv_status == 0) && (gv_shipList[gf_GetPlayerTeam(EventPlayer())][gf_getHangarInventory(EventPlayer())].lv_currentRespawn == 0)) {
        lv_inventoryID = gf_getHangarInventory(EventPlayer());
        autoF296C49E_ae = lib2_gv_inventories[lv_inventoryID].lv_sizeX;
        autoF296C49E_ai = 1;
        lv_loopX = 0;
        for ( ; ( (autoF296C49E_ai >= 0 && lv_loopX <= autoF296C49E_ae) || (autoF296C49E_ai <= 0 && lv_loopX >= autoF296C49E_ae) ) ; lv_loopX += autoF296C49E_ai ) {
            auto5C63F77C_ae = lib2_gv_inventories[lv_inventoryID].lv_sizeY;
            auto5C63F77C_ai = 1;
            lv_loopY = 0;
            for ( ; ( (auto5C63F77C_ai >= 0 && lv_loopY <= auto5C63F77C_ae) || (auto5C63F77C_ai <= 0 && lv_loopY >= auto5C63F77C_ae) ) ; lv_loopY += auto5C63F77C_ai ) {
                if ((lib2_gv_inventories[lv_inventoryID].lv_slots[lv_loopX][lv_loopY] != c_invalidDialogControlId) && (lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY] != null)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY], c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Hangarinventorydeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[EventPlayer()]))), RandomFixed(0.0, 1.0), libNtve_gf_RandomAngle()));
                    lv_charges = lib2_gv_inventories[lv_inventoryID].lv_charges[lv_loopX][lv_loopY];
                    if ((gf_getItemStackable(lib2_gv_inventories[lv_inventoryID].lv_items[lv_loopX][lv_loopY]) == true)) {
                        if ((lv_charges == 100.0)) {
                            lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
                            lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
                        }
                        else {
                            lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib2_gv_inventories[lv_inventoryID].lv_charges[lv_loopX][lv_loopY]);
                        }
                    }
                    else {
                    }
                    lv_removeditem = lib2_gf_RemoveItemfromPosition(lv_inventoryID, lv_loopX, lv_loopY, 1, 1);
                }
                else {
                }
            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/71A8387D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WithdrawAllHangaritems_Init () {
    gt_WithdrawAllHangaritems = TriggerCreate("gt_WithdrawAllHangaritems_Func");
    TriggerAddEventDialogControl(gt_WithdrawAllHangaritems, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn
//--------------------------------------------------------------------------------------------------
bool gt_Respawn_Func (bool testConds, bool runActions) {
    playergroup autoC1E59B27_g;
    int autoC1E59B27_p;
    playergroup auto045CC243_g;
    int auto045CC243_p;

    // Variable Declarations
    unit lv_ship;
    string lv_killingship;
    int lv_player;
    int lv_killingplayer;
    int lv_team;
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gf_shipToIndex(EventUnit()) != -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerRespawning[EventPlayer()] = true;
    lv_player = UnitGetOwner(gf_shipToNavigator(EventUnit()));
    gv_blockNavigationZoom[lv_player] = true;
    lv_ship = EventUnit();
    gf_destroyShip(gf_GetPlayerTeam(lv_player), FixedToInt(UnitGetCustomValue(lv_ship, 6)));
    lv_killingship = gv_shiptypes[FixedToInt(UnitGetCustomValue(libNtve_gf_KillingUnit(), 8))].lv_unittype;
    if ((libNtve_gf_KillingPlayer() != 16) && (gf_GetPlayerTeam(libNtve_gf_KillingPlayer()) != 0)) {
        if ((UnitFilterMatch(libNtve_gf_KillingUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterMassive), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            lv_killingplayer = UnitGetOwner(gf_shipToNavigator(libNtve_gf_KillingUnit()));
            if ((UnitGetType(libNtve_gf_KillingUnit()) == "Battlecruiser")) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/6F923694")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/C8347221")), Color(100.00, 100.00, 0.00)) + TextWithColor((StringExternal("Param/Value/C13C4D7B") + IntToText(gf_GetPlayerTeam(libNtve_gf_KillingPlayer())) + StringExternal("Param/Value/7B1ED9FF")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + TextWithColor((UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/7BD34074")), Color(100.00, 100.00, 0.00))));
            }
            else {
                if ((UnitGetType(libNtve_gf_KillingUnit()) == "Chomper")) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/1FB3B5D0")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/E510DE5F")), Color(100.00, 100.00, 0.00)) + TextWithColor((PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/D113C70A")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + TextWithColor((UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/F8214823")), Color(100.00, 100.00, 0.00))));
                }
                else {
                    if ((EventUnitDamageEffect() == "MineastroidDamage")) {
                        if ((RandomInt(0, 1) == 1)) {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/41997C8B")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/6617B05C")), Color(100.00, 100.00, 0.00)) + TextWithColor((PlayerName(UnitGetOwner(gf_shipToNavigator(libNtve_gf_KillingUnit()))) + StringExternal("Param/Value/A150C2FB")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + TextWithColor(StringExternal("Param/Value/288781E3"), Color(100.00, 100.00, 0.00))));
                        }
                        else {
                            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/77CF3E1A")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/1A69F303")), Color(100.00, 100.00, 0.00)) + TextWithColor((PlayerName(UnitGetOwner(gf_shipToNavigator(libNtve_gf_KillingUnit()))) + StringExternal("Param/Value/F849BC62")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + TextWithColor(StringExternal("Param/Value/8DA3CD68"), Color(100.00, 100.00, 0.00))));
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/A1615C87")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/9370BDE2")), Color(100.00, 100.00, 0.00)) + TextWithColor((PlayerName(UnitGetOwner(gf_shipToNavigator(libNtve_gf_KillingUnit()))) + StringExternal("Param/Value/753DA084")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + TextWithColor((UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/4E8176B0")), Color(100.00, 100.00, 0.00))));
                    }
                }
            }
        }
        else {
            lv_killingplayer = FixedToInt(UnitGetCustomValue(libNtve_gf_KillingUnit(), 7));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/59AF5681")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/5E8CDB1E") + UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/D3DEB1F5")), Color(100.00, 100.00, 0.00)) + TextWithColor((PlayerName(lv_killingplayer) + StringExternal("Param/Value/7AB1079F")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libNtve_gf_KillingPlayer(), false))) + TextWithColor(UnitTypeGetName(lv_killingship), Color(100.00, 100.00, 0.00))));
        }
    }
    else {
        if ((libNtve_gf_KillingUnit() != null) && (UnitFilterMatch(libNtve_gf_KillingUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/6D5B2CAF")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/CD183896")), Color(100.00, 100.00, 0.00))));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/5B748CD1")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor((UnitTypeGetName(UnitGetType(EventUnit())) + StringExternal("Param/Value/1CECA005")), Color(100.00, 100.00, 0.00))));
        }
    }
    UIDisplayMessage(PlayerGroupSingle(13), c_messageAreaSubtitle, (IntToText(lv_killingplayer) + StringExternal("Param/Value/89A3B085") + IntToText(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/9E583979") + StringToText(gf_getData(lv_killingplayer, "kill", "stuff", " "))));
    UIDisplayMessage(PlayerGroupSingle(14), c_messageAreaSubtitle, (IntToText(lv_killingplayer) + StringExternal("Param/Value/A2D63380") + IntToText(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/2C83C339") + StringToText(gf_getData(lv_killingplayer, "kill", "stuff", " "))));
    if ((lv_killingplayer != 0) && (lv_killingplayer != 13) && (lv_killingplayer != 14) && (lv_killingship != "Battlecruiser")) {
        gf_BankSave(lv_killingplayer, "kill", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(lv_killingplayer, "kill", "stuff", " ")) + 1)), " ", lv_killingplayer));
        UIDisplayMessage(PlayerGroupSingle(14), c_messageAreaSubtitle, StringToText(gf_getData(lv_killingplayer, "kill", "stuff", " ")));
    }
    else {
    }
    if ((lv_player != 0) && (lv_player != 13) && (lv_player != 14)) {
        gf_BankSave(lv_player, "death", "stuff", gf_encrypt(IntToString((StringToInt(gf_getData(lv_player, "death", "stuff", " ")) + 1)), " ", lv_player));
    }
    else {
    }
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/14B083C2"), Color(62.35, 0.00, 0.00)));
    if ((UnitHasBehavior(gv_pilots[lv_player], "Boarding") == true)) {
        UnitBehaviorRemove(gv_pilots[lv_player], "Boarding", 1);
        VisExploreArea(lv_player, RegionEntireMap(), false, false);
        VisRevealerEnable(gv_playerVisibilityRevealer[0][lv_player], true);
        VisRevealerEnable(gv_playerVisibilityRevealer[1][lv_player], true);
        autoC1E59B27_g = GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_player)); 
        autoC1E59B27_p = 1;
        for ( ; autoC1E59B27_p <= PlayerGroupCount(autoC1E59B27_g) ; autoC1E59B27_p += BoolToInt(lv_p == PlayerGroupPlayer(autoC1E59B27_g, autoC1E59B27_p)) ) {
            lv_p = PlayerGroupPlayer(autoC1E59B27_g, autoC1E59B27_p);
            if ((lv_p != lv_player)) {
                libNtve_gf_SetAlliance(lv_p, lv_player, 1);
            }
            else {
            }
        }
        auto045CC243_g = GameAttributePlayersForTeam((3 - gf_GetPlayerTeam(lv_player))); 
        auto045CC243_p = 1;
        for ( ; auto045CC243_p <= PlayerGroupCount(auto045CC243_g) ; auto045CC243_p += BoolToInt(lv_p == PlayerGroupPlayer(auto045CC243_g, auto045CC243_p)) ) {
            lv_p = PlayerGroupPlayer(auto045CC243_g, auto045CC243_p);
            if ((lv_p != lv_player)) {
                PlayerSetAlliance(lv_p, c_allianceIdChat, lv_player, false);
            }
            else {
            }
        }
        libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(lv_player), lv_player, 1);
        PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, true);
        PlayerGroupRemove(gv_players_inside[(3 - gf_GetPlayerTeam(lv_player))], lv_player);
        libNtve_gf_SetAlliance(lv_player, gf_GetPlayerTeamAI(lv_player), 1);
        PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, true);
        UnitSetPosition(gv_pilots[lv_player], gv_startLocations[gf_GetPlayerTeam(lv_player)], false);
    }
    else {
    }
    if ((lv_player == gf_GetPlayerTeamAI(lv_player))) {
        gf_CloseNavigationIndex(lv_player, gf_shipToIndex(EventUnit()));
    }
    else {
        gf_CloseNavigation(lv_player);
    }
    gf_UnregisterShipNavigation(lv_ship);
    UnitRemove(lv_ship);
    DialogSetVisible(gv_shipStatus, PlayerGroupSingle(lv_player), true);
    libNtve_gf_SetDialogItemImage(gv_shipStatusMaxminimage, "EditorData\\Images\\MoveUp.tga", PlayerGroupSingle(lv_player));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Respawn_Init () {
    gt_Respawn = TriggerCreate("gt_Respawn_Func");
    TriggerAddEventUnitDied(gt_Respawn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Withdraw hangar item
//--------------------------------------------------------------------------------------------------
bool gt_Withdrawhangaritem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_placementX;
    int lv_placementY;
    int lv_positionX;
    int lv_positionY;
    int lv_replacedItem;
    string lv_removesuccess;
    fixed lv_charges;

    // Variable Initialization
    lv_replacedItem = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == lib2_gv_inventories[gf_getHangarInventory(EventPlayer())].lv_screen))) {
            return false;
        }

        if (!((gv_shipList[gf_GetPlayerTeam(EventPlayer())][gv_selectedShip[EventPlayer()]].lv_status == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_shipList[gf_GetPlayerTeam(EventPlayer())][gf_getHangarInventory(EventPlayer())].lv_status == 0) && (gv_shipList[gf_GetPlayerTeam(EventPlayer())][gf_getHangarInventory(EventPlayer())].lv_currentRespawn == 0)) {
        lv_placementX = ((DialogControlGetOffsetX(EventDialogControl(), EventPlayer()) / 50) - 1);
        lv_placementY = ((DialogControlGetOffsetY(EventDialogControl(), EventPlayer()) / 50) - 1);
        lv_replacedItem = lib2_gf_DetermineCorrectDialogItem(gf_getHangarInventory(EventPlayer()), lv_placementX, lv_placementY);
        lv_positionX = ((DialogControlGetOffsetX(lv_replacedItem, EventPlayer()) / 50) - 1);
        lv_positionY = ((DialogControlGetOffsetY(lv_replacedItem, EventPlayer()) / 50) - 1);
        if ((lib2_gv_inventories[gf_getHangarInventory(EventPlayer())].lv_items[lv_positionX][lv_positionY] != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lib2_gv_inventories[gf_getHangarInventory(EventPlayer())].lv_items[lv_positionX][lv_positionY], c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("Hangarinventorydeposit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[EventPlayer()]))), RandomFixed(0.0, 1.0), libNtve_gf_RandomAngle()));
            lv_charges = lib2_gv_inventories[gf_getHangarInventory(EventPlayer())].lv_charges[lv_positionX][lv_positionY];
            if ((gf_getItemStackable(lib2_gv_inventories[gf_getHangarInventory(EventPlayer())].lv_items[lv_positionX][lv_positionY]) == true)) {
                if ((lv_charges == 100.0)) {
                    lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
                    lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
                }
                else {
                    lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib2_gv_inventories[gf_getHangarInventory(EventPlayer())].lv_charges[lv_positionX][lv_positionY]);
                }
            }
            else {
            }
            lv_removesuccess = lib2_gf_RemoveItemfromPosition(gf_getHangarInventory(EventPlayer()), lv_positionX, lv_positionY, 1, 1);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Param/Value/B1948A5D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Withdrawhangaritem_Init () {
    gt_Withdrawhangaritem = TriggerCreate("gt_Withdrawhangaritem_Func");
    TriggerAddEventDialogControl(gt_Withdrawhangaritem, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage ship (Open confirm)
//--------------------------------------------------------------------------------------------------
bool gt_SalvageshipOpenconfirm_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_salvageItemButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_salvageConfirmDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageshipOpenconfirm_Init () {
    gt_SalvageshipOpenconfirm = TriggerCreate("gt_SalvageshipOpenconfirm_Func");
    TriggerAddEventDialogControl(gt_SalvageshipOpenconfirm, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage ship (Open confirm) 2
//--------------------------------------------------------------------------------------------------
bool gt_SalvageshipOpenconfirm2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_salvageConfirmNo))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_salvageConfirmDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageshipOpenconfirm2_Init () {
    gt_SalvageshipOpenconfirm2 = TriggerCreate("gt_SalvageshipOpenconfirm2_Func");
    TriggerAddEventDialogControl(gt_SalvageshipOpenconfirm2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvage ship (For real)
//--------------------------------------------------------------------------------------------------
bool gt_SalvageshipForreal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_slot;
    int lv_team;
    int lv_veld;
    int lv_chalc;
    int lv_pyro;
    int lv_kerm;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_salvageConfirmYes))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_salvageConfirmDialog, PlayerGroupSingle(EventPlayer()), false);
    lv_slot = gv_selectedShip[EventPlayer()];
    lv_team = gf_GetPlayerTeam(EventPlayer());
    lv_veld = (gf_GetShipPrice(EventPlayer(), gv_shipList[lv_team][lv_slot].lv_shipType, 0) / 2);
    lv_chalc = (gf_GetShipPrice(EventPlayer(), gv_shipList[lv_team][lv_slot].lv_shipType, 1) / 2);
    lv_pyro = (gf_GetShipPrice(EventPlayer(), gv_shipList[lv_team][lv_slot].lv_shipType, 2) / 2);
    lv_kerm = (gf_GetShipPrice(EventPlayer(), gv_shipList[lv_team][lv_slot].lv_shipType, 3) / 2);
    if ((gv_shipList[lv_team][lv_slot].lv_status == 0) && (gv_shipList[lv_team][lv_slot].lv_currentRespawn == 0)) {
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor((StringExternal("Param/Value/A3D965D0") + UnitTypeGetName(gv_shiptypes[gv_shipList[lv_team][lv_slot].lv_shipType].lv_unittype)), Color(100.00, 100.00, 0.00))));
        gf_removeShip(lv_team, lv_slot);
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, lv_veld);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, lv_chalc);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, lv_pyro);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, lv_kerm);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SalvageshipForreal_Init () {
    gt_SalvageshipForreal = TriggerCreate("gt_SalvageshipForreal_Func");
    TriggerAddEventDialogControl(gt_SalvageshipForreal, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Infiltrator
//--------------------------------------------------------------------------------------------------
bool gt_LaunchInfiltrator_Func (bool testConds, bool runActions) {
    playergroup auto5E364FA8_g;
    int auto5E364FA8_p;
    playergroup auto755F3DCB_g;
    int auto755F3DCB_p;

    // Variable Declarations
    unit lv_u;
    int lv_infiltrator;
    int lv_p;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[1][1][3]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[2][1][3]) == true))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        VisRevealerEnable(gv_playerVisibilityRevealer[0][EventPlayer()], true);
        VisRevealerEnable(gv_playerVisibilityRevealer[1][EventPlayer()], true);
        lv_player = EventPlayer();
        auto5E364FA8_g = GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())); 
        auto5E364FA8_p = 1;
        for ( ; auto5E364FA8_p <= PlayerGroupCount(auto5E364FA8_g) ; auto5E364FA8_p += BoolToInt(lv_p == PlayerGroupPlayer(auto5E364FA8_g, auto5E364FA8_p)) ) {
            lv_p = PlayerGroupPlayer(auto5E364FA8_g, auto5E364FA8_p);
            if ((lv_p != lv_player)) {
                libNtve_gf_SetAlliance(lv_p, lv_player, 1);
            }
            else {
            }
        }
        auto755F3DCB_g = GameAttributePlayersForTeam((3 - gf_GetPlayerTeam(EventPlayer()))); 
        auto755F3DCB_p = 1;
        for ( ; auto755F3DCB_p <= PlayerGroupCount(auto755F3DCB_g) ; auto755F3DCB_p += BoolToInt(lv_p == PlayerGroupPlayer(auto755F3DCB_g, auto755F3DCB_p)) ) {
            lv_p = PlayerGroupPlayer(auto755F3DCB_g, auto755F3DCB_p);
            if ((lv_p != lv_player)) {
                PlayerSetAlliance(lv_p, c_allianceIdChat, lv_player, false);
            }
            else {
            }
        }
        libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(lv_player), lv_player, 1);
        PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, true);
        lv_infiltrator = gf_findShip(gf_GetPlayerTeam(EventPlayer()), "HelsAngelFighter");
        gv_shipList[gf_GetPlayerTeam(EventPlayer())][lv_infiltrator].lv_status = 0;
        lv_u = gf_Launchship(EventPlayer(), lv_infiltrator, null, (3 - gf_GetPlayerTeam(EventPlayer())));
        UnitSetPropertyFixed(lv_u, c_unitPropLife, UnitGetCustomValue(EventUnit(), 26));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchInfiltrator_Init () {
    gt_LaunchInfiltrator = TriggerCreate("gt_LaunchInfiltrator_Func");
    TriggerAddEventUnitAbility(gt_LaunchInfiltrator, null, AbilityCommand("LaunchInfiltrator", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch Infiltrator (Fail)
//--------------------------------------------------------------------------------------------------
bool gt_LaunchInfiltratorFail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_infiltrator;
    int lv_p;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[1][1][3]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[2][1][3]) == true))) {
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/80C467E3"));
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitAbilityReset(EventUnit(), AbilityCommand("LaunchInfiltrator", 0), c_spendLocationAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaunchInfiltratorFail_Init () {
    gt_LaunchInfiltratorFail = TriggerCreate("gt_LaunchInfiltratorFail_Func");
    TriggerAddEventUnitAbility(gt_LaunchInfiltratorFail, null, AbilityCommand("LaunchInfiltrator", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purchase Mass Replicator
//--------------------------------------------------------------------------------------------------
bool gt_PurchaseMassReplicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_console;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "TierEconomy3"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_console = UnitGroupRandomUnit(UnitGroup("MassReplicatorConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(EventPlayer())], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive);
    UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + TextWithColor(StringExternal("Param/Value/A66DD0F4"), Color(100.00, 100.00, 0.00))));
    libNtve_gf_ShowHideUnit(lv_console, true);
    libNtve_gf_ShowHideUnit(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(EventPlayer())], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), UnitGetPosition(lv_console)), true);
    TextTagCreate(StringExternal("Param/Value/71A06851"), 24, UnitGetPosition(lv_console), 1.0, true, true, PlayerGroupAll());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            TechTreeUpgradeAddLevel(PlayerGroupLoopCurrent(), "MassReplicatorSystem", 1);
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurchaseMassReplicator_Init () {
    gt_PurchaseMassReplicator = TriggerCreate("gt_PurchaseMassReplicator_Func");
    TriggerAddEventUnitResearchProgress(gt_PurchaseMassReplicator, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Mass Replicator
//--------------------------------------------------------------------------------------------------
bool gt_OpenMassReplicator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), UnitGetPosition(EventUnit()));
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("MassReplicatorConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    if ((libNtve_gf_UnitIsHidden(lv_closestU) == false)) {
        UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
        PlayerGroupAdd(gv_consolePlayers, EventPlayer());
        UnitClearSelection(EventPlayer());
        UnitSelect(lv_closestConsole, EventPlayer(), true);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
        UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
        libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
        UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenMassReplicator_Init () {
    gt_OpenMassReplicator = TriggerCreate("gt_OpenMassReplicator_Func");
    TriggerAddEventUnitRange(gt_OpenMassReplicator, null, UnitFromId(4190), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenMassReplicator, null, UnitFromId(4192), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Veldite
//--------------------------------------------------------------------------------------------------
bool gt_CreateVeldite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    if ((gf_useEnergy(1500.0, lv_ship) == true)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 10);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/613ECE1D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateVeldite_Init () {
    gt_CreateVeldite = TriggerCreate("gt_CreateVeldite_Func");
    TriggerAddEventUnitAbility(gt_CreateVeldite, null, AbilityCommand("CreateVeldite", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Chalcorium
//--------------------------------------------------------------------------------------------------
bool gt_CreateChalcorium_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    if ((gf_useEnergy(2000.0, lv_ship) == true)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, 10);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/631DBAAC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateChalcorium_Init () {
    gt_CreateChalcorium = TriggerCreate("gt_CreateChalcorium_Func");
    TriggerAddEventUnitAbility(gt_CreateChalcorium, null, AbilityCommand("CreateChalcorium", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Pyromanite
//--------------------------------------------------------------------------------------------------
bool gt_CreatePyromanite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    if ((gf_useEnergy(2000.0, lv_ship) == true)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, 10);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/6EAEA98E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreatePyromanite_Init () {
    gt_CreatePyromanite = TriggerCreate("gt_CreatePyromanite_Func");
    TriggerAddEventUnitAbility(gt_CreatePyromanite, null, AbilityCommand("CreatePyromanite", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Kermiculite
//--------------------------------------------------------------------------------------------------
bool gt_CreateKermiculite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    if ((gf_useEnergy(10000.0, lv_ship) == true)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, 10);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/613EBFB9"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateKermiculite_Init () {
    gt_CreateKermiculite = TriggerCreate("gt_CreateKermiculite_Func");
    TriggerAddEventUnitAbility(gt_CreateKermiculite, null, AbilityCommand("CreateKermiculite", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Tractor Beam Console
//--------------------------------------------------------------------------------------------------
bool gt_OpenTractorBeamConsole_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit())), "ConsoleOccupied") == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!((EventPlayer() != gf_GetPlayerTeamAI(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), UnitGetPosition(EventUnit()));
    lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("TractorBeamConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    if ((libNtve_gf_UnitIsHidden(lv_closestU) == false)) {
        UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
        PlayerGroupAdd(gv_consolePlayers, EventPlayer());
        gf_SpaceView(EventPlayer(), gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
        UnitClearSelection(EventPlayer());
        UnitSelect(lv_closestConsole, EventPlayer(), true);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
        UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
        libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
        UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenTractorBeamConsole_Init () {
    gt_OpenTractorBeamConsole = TriggerCreate("gt_OpenTractorBeamConsole_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Tractor Beam
//--------------------------------------------------------------------------------------------------
bool gt_InitTractorBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamDestroyLock", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
    UnitBehaviorRemove(EventUnit(), "TractorBeamLock", 1);
    gv_tractor_locks[gf_GetPlayerTeam(EventPlayer())] = null;
    gv_lockValue[gf_GetPlayerTeam(EventPlayer())] = 0.0;
    PlayerGroupAdd(gv_tractorbeampg, EventPlayer());
    UnitBehaviorAdd(EventUnit(), "UsingTractorBeam", EventUnit(), 1);
    UnitBehaviorAdd(gv_tractor_u, "UsingTractorBeam", gv_tractor_u, 1);
    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
    UnitCreateEffectUnit(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamBeamInit", UnitLastCreated());
    gf_Returntractorbeam(UnitLastCreated(), 1.4);
    gf_RegisterPhysics(UnitLastCreated());
    gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
    gf_PhysicsApplyForcePolar(UnitLastCreated(), 20.0, AngleBetweenPoints(UnitGetPosition(lv_ship), EventUnitTargetPoint()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitTractorBeam_Init () {
    gt_InitTractorBeam = TriggerCreate("gt_InitTractorBeam_Func");
    TriggerAddEventUnitAbility(gt_InitTractorBeam, null, AbilityCommand("TractorBeam", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Tractor Beam
//--------------------------------------------------------------------------------------------------
bool gt_CancelTractorBeam_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_tractorbeampg, EventPlayer());
    UnitBehaviorRemove(EventUnit(), "UsingTractorBeam", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelTractorBeam_Init () {
    gt_CancelTractorBeam = TriggerCreate("gt_CancelTractorBeam_Func");
    TriggerAddEventUnitAbility(gt_CancelTractorBeam, null, AbilityCommand("TractorBeamCancel", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Break Lock
//--------------------------------------------------------------------------------------------------
bool gt_BreakLock_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "TractorBeamLock", 1);
    gv_tractor_locks[gf_GetPlayerTeam(EventPlayer())] = null;
    gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 0.0;
    UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamDestroyLock", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BreakLock_Init () {
    gt_BreakLock = TriggerCreate("gt_BreakLock_Func");
    TriggerAddEventUnitAbility(gt_BreakLock, null, AbilityCommand("BreakLock", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tractor Beam Effect
//--------------------------------------------------------------------------------------------------
bool gt_TractorBeamEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestConsole;
    fixed lv_energy;
    fixed lv_force;

    // Variable Initialization
    lv_energy = 7.5;
    lv_force = 200.0;

    // Conditions
    if (testConds) {
        if (!(((gv_tractor_locks[1] != null) || (gv_tractor_locks[2] != null) || (UnitGroupCount(gv_tractorbeamreturningmissiles, c_unitCountAlive) != 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_tractor_locks[IntLoopCurrent()] != null)) {
            if ((TechTreeUpgradeCount((IntLoopCurrent() + 12), "TierOffensive3", c_techCountCompleteOnly) == 1)) {
                lv_energy *= 0.0;
                lv_force *= 2.0;
            }
            else {
            }
            if ((DistanceBetweenPoints(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), UnitGetPosition(gv_tractor_locks[IntLoopCurrent()])) <= 16.0) && (gf_useEnergy(lv_energy, gv_battlecruisers[IntLoopCurrent()]) == true)) {
                gf_PhysicsApplyForcePolar(gv_tractor_locks[IntLoopCurrent()], (lv_force * (gv_pullPush[IntLoopCurrent()] / 1.0)), AngleBetweenPoints(UnitGetPosition(gv_tractor_locks[IntLoopCurrent()]), UnitGetPosition(gv_battlecruisers[IntLoopCurrent()])));
            }
            else {
                lv_closestConsole = gf_shipToNavigator(gv_battlecruisers[IntLoopCurrent()]);
                ActorSendTo(libNtve_gf_MainActorofUnit(gv_battlecruisers[IntLoopCurrent()]), "_TractorLockBeam", "SetTintColor 245,98,10 1.500000");
                ActorSendTo(libNtve_gf_MainActorofUnit(gv_battlecruisers[IntLoopCurrent()]), "_TractorLockBeam", "SetScale 0.010000 1.500000");
                UnitBehaviorRemove(lv_closestConsole, "TractorBeamLock", 1);
                gv_pullPush[IntLoopCurrent()] = 0.0;
                Wait(1.0, c_timeGame);
                SoundPlayAtPoint(SoundLink("DarkTemplar_AttackLaunch", -1), PlayerGroupAll(), gf_PointBetweenPoints(UnitGetPosition(gv_battlecruisers[IntLoopCurrent()]), UnitGetPosition(gv_tractor_locks[IntLoopCurrent()])), 0.0, 100.0, 0.0);
                gv_tractor_locks[IntLoopCurrent()] = null;
                Wait(0.5, c_timeGame);
                UnitBehaviorAdd(gv_battlecruisers[IntLoopCurrent()], "TractorBeamDestroyLock", gv_battlecruisers[IntLoopCurrent()], 1);
            }
        }
        else {
        }
    }
    IntLoopEnd();
    UnitGroupLoopBegin(gv_tractorbeamreturningmissiles);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))])) < 2.0)) {
            UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], "TractorBeamDestroyBeam", gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], 1);
            UnitBehaviorRemove(lv_closestConsole, "UsingTractorBeam", 1);
            UnitKill(UnitGroupLoopCurrent());
        }
        else {
            gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), (gf_PhysicsGetMass(UnitGroupLoopCurrent()) * 2.5), AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))])));
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TractorBeamEffect_Init () {
    gt_TractorBeamEffect = TriggerCreate("gt_TractorBeamEffect_Func");
    TriggerAddEventTimePeriodic(gt_TractorBeamEffect, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase pull
//--------------------------------------------------------------------------------------------------
bool gt_Increasepull_Func (bool testConds, bool runActions) {
    int auto1F22EDAC_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "TractorbeamPull", 1);
    auto1F22EDAC_val = UnitBehaviorCount(EventUnit(), "TractorbeamPull");
    if (auto1F22EDAC_val == 0) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 2.0;
    }
    else if (auto1F22EDAC_val == 1) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 1.0;
    }
    else if (auto1F22EDAC_val == 2) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 0.0;
    }
    else if (auto1F22EDAC_val == 3) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = -1.0;
    }
    else if (auto1F22EDAC_val == 4) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = -2.0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Increasepull_Init () {
    gt_Increasepull = TriggerCreate("gt_Increasepull_Func");
    TriggerAddEventUnitAbility(gt_Increasepull, null, AbilityCommand("IncreasePull", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Increase push
//--------------------------------------------------------------------------------------------------
bool gt_Increasepush_Func (bool testConds, bool runActions) {
    int auto281E1DED_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "TractorbeamPull", EventUnit(), 1);
    auto281E1DED_val = UnitBehaviorCount(EventUnit(), "TractorbeamPull");
    if (auto281E1DED_val == 0) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 2.0;
    }
    else if (auto281E1DED_val == 1) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 1.0;
    }
    else if (auto281E1DED_val == 2) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = 0.0;
    }
    else if (auto281E1DED_val == 3) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = -1.0;
    }
    else if (auto281E1DED_val == 4) {
        gv_pullPush[gf_GetPlayerTeam(EventPlayer())] = -2.0;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Increasepush_Init () {
    gt_Increasepush = TriggerCreate("gt_Increasepush_Func");
    TriggerAddEventUnitAbility(gt_Increasepush, null, AbilityCommand("IncreasePush", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Yamato Cannon
//--------------------------------------------------------------------------------------------------
bool gt_FireYamatoCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "YamatoCannonLoaded") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "YamatoCannonLoaded", 1);
    UnitBehaviorRemove(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "YamatoCannonLoaded", 1);
    UnitBehaviorRemove(UnitGroupRandomUnit(UnitGroup("ScienceConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(EventPlayer())], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "YamatoCannonLoaded", 1);
    while ((TimerGetRemaining(gv_yamatoTimer[gf_GetPlayerTeam(EventPlayer())]) > 0.0)) {
        Wait(0.0, c_timeGame);
    }
    lv_ship = gf_navigatorToShip(EventUnit());
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_ship), c_animNameDefault, "Spell A End", 0, c_animTimeDefault);
    libNtve_gf_SendActorMessageToUnit(null, "AnimGroupApply");
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackLaunch", -1), gv_players_inside[gf_GetPlayerTeam(EventPlayer())], 100.0, 0.0);
    UnitCreate(1, "Yamato", c_unitCreateIgnorePlacement, gf_GetPlayerTeamAI(EventPlayer()), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
    UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
    UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
    gf_RegisterPhysics(UnitLastCreated());
    gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
    gf_PhysicsApplyForcePolar(UnitLastCreated(), 30.0, UnitGetFacing(lv_ship));
    gf_TimedLife(UnitLastCreated(), 5.0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "YamatoCannon2", 0);
    Wait(2.0, c_timeGame);
    libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_ship), c_animNameDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireYamatoCannon_Init () {
    gt_FireYamatoCannon = TriggerCreate("gt_FireYamatoCannon_Func");
    TriggerAddEventUnitAbility(gt_FireYamatoCannon, null, AbilityCommand("FireYamatoCannon", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Yamato Cannon
//--------------------------------------------------------------------------------------------------
bool gt_LoadYamatoCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_TriggeringProgressUpgrade() == "YamatoCannon2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gf_shipToNavigator(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]), "YamatoCannonLoaded", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "YamatoCannonLoaded", EventUnit(), 1);
    UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "YamatoCannonLoaded", EventUnit(), 1);
    SoundPlay(SoundLink("Battlecruiser_YamatoAttackChargeUp", -1), gv_players_inside[gf_GetPlayerTeam(EventPlayer())], 100.0, 0.0);
    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_ship), c_animNameDefault, "Morph A", 0, c_animTimeDefault);
    TimerStart(gv_yamatoTimer[gf_GetPlayerTeam(EventPlayer())], 3.17, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadYamatoCannon_Init () {
    gt_LoadYamatoCannon = TriggerCreate("gt_LoadYamatoCannon_Func");
    TriggerAddEventUnitResearchProgress(gt_LoadYamatoCannon, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Yamato change animation
//--------------------------------------------------------------------------------------------------
bool gt_Yamatochangeanimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == gv_yamatoTimer[1])) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_battlecruisers[lv_team]), c_animNameDefault, "Walk A", c_animFlagPlayForever, c_animTimeDefault);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Yamatochangeanimation_Init () {
    gt_Yamatochangeanimation = TriggerCreate("gt_Yamatochangeanimation_Func");
    TriggerAddEventTimer(gt_Yamatochangeanimation, gv_yamatoTimer[1]);
    TriggerAddEventTimer(gt_Yamatochangeanimation, gv_yamatoTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Science
//--------------------------------------------------------------------------------------------------
bool gt_OpenScience_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestU;
    unit lv_closestConsole;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Marine"))) {
            return false;
        }

        if (!(((libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][0][4]) == true) || (libNtve_gf_UnitInRegion(EventUnit(), gv_bCareas[gf_GetPlayerTeam(EventPlayer())][1][4]) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Beacon_ProtossSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
    UnitGroupLoopBegin(UnitGroup("Marine", c_playerAny, RegionCircle(UnitGetPosition(lv_closestU), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == gf_GetPlayerTeamAI(EventPlayer())) && (UnitHasBehavior(UnitGroupLoopCurrent(), "InConsole") == true)) {
            gf_LeaveConsole(gf_GetPlayerTeamAI(EventPlayer()), UnitGroupLoopCurrent());
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((UnitHasBehavior(lv_closestU, "ConsoleOccupied") == false)) {
        UnitBehaviorAdd(EventUnit(), "InConsole", EventUnit(), 1);
        PlayerGroupAdd(gv_consolePlayers, EventPlayer());
        lv_closestConsole = UnitGroupClosestToPoint(UnitGroup("ScienceConsole", c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRobotic) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()));
        UnitClearSelection(EventPlayer());
        UnitSelect(lv_closestConsole, EventPlayer(), true);
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        UnitSetPosition(EventUnit(), UnitGetPosition(lv_closestU), true);
        UnitBehaviorAdd(lv_closestU, "ConsoleOccupied", lv_closestU, 1);
        libNtve_gf_MakeUnitFacePoint(EventUnit(), UnitGetPosition(lv_closestConsole), 0.0);
        gf_SpaceView(EventPlayer(), gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
        UnitSetOwner(lv_closestConsole, EventPlayer(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenScience_Init () {
    gt_OpenScience = TriggerCreate("gt_OpenScience_Func");
    TriggerAddEventUnitRange(gt_OpenScience, null, UnitFromId(111), 1.0, true);
    TriggerAddEventUnitRange(gt_OpenScience, null, UnitFromId(112), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Purge Core Plasma
//--------------------------------------------------------------------------------------------------
bool gt_PurgeCorePlasma_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "PurgingCorePlasmaVisual", EventPlayer(), 1);
    gv_energy_core_stability[(gf_GetPlayerTeam(EventPlayer()) - 1)] = MinF(100.0, (gv_energy_core_stability[(gf_GetPlayerTeam(EventPlayer()) - 1)] + 10.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PurgeCorePlasma_Init () {
    gt_PurgeCorePlasma = TriggerCreate("gt_PurgeCorePlasma_Func");
    TriggerAddEventUnitAbility(gt_PurgeCorePlasma, null, AbilityCommand("PurgeCorePlasma", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Power Transfer
//--------------------------------------------------------------------------------------------------
bool gt_PowerTransfer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    fixed lv_facing;
    unit lv_ship;
    point lv_offset;
    fixed lv_energy;

    // Variable Initialization
    lv_energy = 300.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    if ((gv_view[EventPlayer()] == 1)) {
        if ((gf_useEnergy(lv_energy, gv_nav_ships[lv_index]) == true)) {
            UnitCreate(1, "PowerTransfer", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]), AngleBetweenPoints(UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]), EventUnitTargetPoint()));
            if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserIonicTransfer", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {255,0,0 2.500000}");
            }
            else {
                if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserNaniteTransfer", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 0,255,0");
                }
                else {
                    if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserPlasmaTransfer", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 128,0,255");
                    }
                    else {
                    }
                }
            }
            UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
            UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundLaser", "Ref_Origin");
            gf_RegisterPhysics(UnitLastCreated());
            gf_PhysicsApplyForcePolar(UnitLastCreated(), 35.0, AngleBetweenPoints(UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]), EventUnitTargetPoint()));
            gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
            gf_TimedLife(UnitLastCreated(), 1.35);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/7BF58BA0"));
        }
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_energy));
        UnitAbilityReset(EventUnit(), AbilityCommand("PowerTransfer", 0), c_spendLocationAll);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C2F8819F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerTransfer_Init () {
    gt_PowerTransfer = TriggerCreate("gt_PowerTransfer_Func");
    TriggerAddEventUnitAbility(gt_PowerTransfer, null, AbilityCommand("PowerTransfer", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kermiculite Spawn
//--------------------------------------------------------------------------------------------------
bool gt_KermiculiteSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    point lv_midpoint;
    fixed lv_foo;
    region lv_reg;
    fixed lv_ang;

    // Variable Initialization
    lv_reg = RegionFromId(1);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayDirectiveMessage(StringExternal("Param/Value/778D9B26"), PlayerGroupAll(), 5.0);
    lv_midpoint = Point((PointGetX(UnitGetPosition(gv_battlecruisers[1]))+PointGetX(UnitGetPosition(gv_battlecruisers[2])))/2,(PointGetY(UnitGetPosition(gv_battlecruisers[1]))+PointGetY(UnitGetPosition(gv_battlecruisers[2])))/2);
    lv_p = Point(0.0,0.0);
    lv_ang = AngleBetweenPoints(UnitGetPosition(gv_battlecruisers[1]),UnitGetPosition(gv_battlecruisers[2]));
    while((RegionContainsPoint(lv_reg,lv_p) == false)){
        lv_p = PointWithOffsetPolar(lv_midpoint,RandomInt(-50,50),lv_ang+90.0);
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lv_p, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 524287.0, 0.0);
    gv_kermiculitePing = PingLastCreated();
    gf_createKermiculite(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KermiculiteSpawn_Init () {
    gt_KermiculiteSpawn = TriggerCreate("gt_KermiculiteSpawn_Func");
    TriggerAddEventTimer(gt_KermiculiteSpawn, gv_kermiculiteTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mining (Periodic)
//--------------------------------------------------------------------------------------------------
bool gt_MiningPeriodic_Func (bool testConds, bool runActions) {
    fixed autoEC0E7DC5_val;

    // Variable Declarations
    string lv_mineralType;
    bool lv_foundStack;
    fixed lv_charges;
    int lv_p;

    // Variable Initialization
    lv_charges = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = UnitGetOwner(EventUnitDamageSourceUnit());
    if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(EventUnitDamageSourceUnit())) >= 10.0)) {
        UnitBehaviorRemove(EventUnitDamageSourceUnit(), "Mining", 1);
    }
    else {
        if ((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            if ((PlayerGroupHasPlayer(gv_newplayers, lv_p) == true)) {
                if ((UnitGetPropertyFixed(EventUnitDamageSourceUnit(), c_unitPropEnergy, c_unitPropCurrent) >= 400.0) && (gv_tutorial_FirstTimeExcessEnergyMessage[lv_p] == true)) {
                    gf_TipAcceleratemining(lv_p);
                }
                else {
                }
                if ((UnitGroupCount(UnitInventoryGroup(gf_shipToNavigator(EventUnitDamageSourceUnit())), c_unitCountAlive) == 3) && (gv_tutorial_FirstTimeReturnMessage[lv_p] == true)) {
                    gf_TipReturn(lv_p);
                }
                else {
                }
            }
            else {
            }
            if ((UnitGroupCount(UnitInventoryGroup(gf_shipToNavigator(EventUnitDamageSourceUnit())), c_unitCountAlive) <= 6)) {
                if ((UnitHasBehavior(gf_shipToNavigator(EventUnitDamageSourceUnit()), "AccelerateMiningBeam") == true)) {
                    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - 10.0));
                    lv_charges = 3.0;
                }
                else {
                }
                autoEC0E7DC5_val = UnitGetCustomValue(EventUnit(), 0);
                if (autoEC0E7DC5_val == 1.0) {
                    lv_mineralType = "VelditeOre";
                }
                else if (autoEC0E7DC5_val == 2.0) {
                    lv_mineralType = "ChalcoriumOre";
                }
                else if (autoEC0E7DC5_val == 3.0) {
                    lv_mineralType = "PyromaniteOre";
                }
                else if (autoEC0E7DC5_val == 4.0) {
                    lv_mineralType = "KermiculiteOre";
                }
                else {
                }
                UnitGroupLoopBegin(UnitInventoryGroup(gf_shipToNavigator(EventUnitDamageSourceUnit())));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == lv_mineralType) && (lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()) < 100.0)) {
                        lib1_gf_ItemAddCharges(UnitGroupLoopCurrent(), lv_charges);
                        lv_foundStack = true;
                        break;
                    }
                    else {
                    }
                }
                UnitGroupLoopEnd();
                if ((lv_foundStack == false) && (UnitGroupCount(UnitInventoryGroup(gf_shipToNavigator(EventUnitDamageSourceUnit())), c_unitCountAlive) < 6)) {
                    UnitInventoryCreate(gf_shipToNavigator(EventUnitDamageSourceUnit()), lv_mineralType);
                    if ((lv_charges > 1.0)) {
                        lib1_gf_ItemAddCharges(UnitInventoryLastCreated(), (lv_charges - 1.0));
                    }
                    else {
                    }
                }
                else {
                }
            }
            else {
            }
        }
        else {
            if ((UnitHasBehavior(gf_shipToNavigator(EventUnitDamageSourceUnit()), "AccelerateMiningBeam") == false)) {
                UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + 2.0));
            }
            else {
                UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - 4.0));
            }
            if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), gf_getSpeedBuff(EventUnitDamageSourceUnit())) != 0)) {
                UnitBehaviorRemove(EventUnitDamageSourceUnit(), "Mining", 1);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiningPeriodic_Init () {
    gt_MiningPeriodic = TriggerCreate("gt_MiningPeriodic_Func");
    TriggerAddEventUnitDamaged(gt_MiningPeriodic, null, c_unitDamageTypeAny, c_unitDamageEither, "MineastroidDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start mining
//--------------------------------------------------------------------------------------------------
bool gt_Startmining_Func (bool testConds, bool runActions) {
    fixed autoE8A47E05_val;

    // Variable Declarations
    unit lv_ship;
    int lv_type;
    int lv_count;
    string lv_mineralType;
    bool lv_foundStack;
    fixed lv_charges;
    fixed lv_power;
    point lv_rpoint;

    // Variable Initialization
    lv_ship = gf_navigatorToShip(EventUnit());
    lv_power = 200.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueClear(c_triggerQueueRemove);
    if ((EventUnitAbility() != AbilityCommand("MineAstroidDummy", 0)) && (DistanceBetweenPoints(UnitGetPosition(gf_navigatorToShip(EventUnit())), UnitGetPosition(EventUnitTargetUnit())) >= 2.0)) {
        if ((TechTreeUpgradeCount(EventPlayer(), "TierEconomy2", c_techCountCompleteOnly) == 1)) {
            gf_PhysicsApplyForcePolar(EventUnitTargetUnit(), lv_power, AngleBetweenPoints(UnitGetPosition(EventUnitTargetUnit()), UnitGetPosition(gf_navigatorToShip(EventUnit()))));
        }
        else {
            UnitAbilityReset(EventUnit(), AbilityCommand("ChompAsteroid", 0), c_spendLocationAll);
        }
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B0C71AB2"));
    }
    else {
    }
    if (((GameGetMissionTime() - gv_lastMiningTime[EventPlayer()]) >= 1)) {
        gv_lastMiningTime[EventPlayer()] = GameGetMissionTime();
        if ((((TechTreeUpgradeCount(EventPlayer(), "TierEconomy2", c_techCountCompleteOnly) == 1) && (UnitGetType(EventUnit()) == "NavigatorMiner") && (UnitFilterMatch(EventUnitTargetUnit(), UnitGetOwner(EventUnitTargetUnit()), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) || (UnitBehaviorCount(lv_ship, gf_getSpeedBuff(lv_ship)) == 0))) {
            if ((DistanceBetweenPoints(UnitGetPosition(gf_navigatorToShip(EventUnit())), UnitGetPosition(EventUnitTargetUnit())) <= 10.0)) {
                UnitIssueOrder(gf_navigatorToShip(EventUnit()), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 50)) {
                    lv_type = RandomInt(1, 3);
                    lv_rpoint = RegionRandomPoint(RegionFromId(1));
                    gf_GenerateAsteroidField(lv_type, RandomInt(1, 3), lv_rpoint, false, false);
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((StringExternal("Param/Value/EA65A7B1") + StringToText(gf_IntToMineralName(lv_type)) + StringExternal("Param/Value/B881B14A")), Color(0.00, 100.00, 100.00)));
                    IntLoopBegin(1, 2);
                    for ( ; !IntLoopDone() ; IntLoopStep() ) {
                        if ((TechTreeUpgradeCount((IntLoopCurrent() + 12), "TierEconomy3", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_CreatePingFacingAngle(GameAttributePlayersForTeam(IntLoopCurrent()), "BeaconPing2", lv_rpoint, gf_MineralColor(lv_type), 3.0, 270.0);
                        }
                        else {
                        }
                    }
                    IntLoopEnd();
                }
                else {
                }
                if ((UnitGroupCount(gv_kermGroup, c_unitCountAlive) < 2) && (TimerGetRemaining(gv_kermiculiteTimer) <= 0.0) && (gv_waitingForSpawn == false)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, TextWithColor(StringExternal("Param/Value/CC1DEA46"), Color(0.00, 100.00, 100.00)));
                    PingDestroy(gv_kermiculitePing);
                    TimerStart(gv_kermiculiteTimer, RandomFixed(360.0, 540.0), false, c_timeReal);
                }
                else {
                }
                libNtve_gf_MakeUnitFacePoint(lv_ship, UnitGetPosition(EventUnitTargetUnit()), 0.4);
                gv_nav_targets[gf_navigatorToIndex(EventUnit())] = AngleBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(EventUnitTargetUnit()));
                UnitBehaviorRemove(lv_ship, "Mining", 1);
                Wait(0.0, c_timeGame);
                UnitBehaviorAdd(gf_navigatorToShip(EventUnit()), "Mining", UnitFromId(3), 1);
                if ((EventUnitAbility() == AbilityCommand("MineAstroidDummy", 0))) {
                    GameDestroyEffects(UnitGetPosition(lv_ship), 1.0, 0, "MineastroidPersistent");
                    UnitCreateEffectUnit(lv_ship, "MineastroidPersistent", EventUnitTargetUnit());
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(gf_navigatorToShip(EventUnit())), UnitGetPosition(EventUnitTargetUnit())) < 2.0) && (UnitGetType(EventUnitTargetUnit()) != "Destroyer")) {
                        if ((UnitGroupCount(UnitInventoryGroup(EventUnit()), c_unitCountAlive) != 15)) {
                            autoE8A47E05_val = UnitGetCustomValue(EventUnitTargetUnit(), 0);
                            if (autoE8A47E05_val == 1.0) {
                                lv_mineralType = "VelditeOre";
                            }
                            else if (autoE8A47E05_val == 2.0) {
                                lv_mineralType = "ChalcoriumOre";
                            }
                            else if (autoE8A47E05_val == 3.0) {
                                lv_mineralType = "PyromaniteOre";
                            }
                            else if (autoE8A47E05_val == 4.0) {
                                lv_mineralType = "KermiculiteOre";
                            }
                            else {
                            }
                            IntLoopBegin(1, (FixedToInt(UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent)) / 5));
                            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                                lv_foundStack = false;
                                UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
                                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                                    if ((UnitGetType(UnitGroupLoopCurrent()) == lv_mineralType) && (lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()) < 100.0)) {
                                        lib1_gf_ItemAddCharges(UnitGroupLoopCurrent(), 1.0);
                                        lv_foundStack = true;
                                        break;
                                    }
                                    else {
                                    }
                                }
                                UnitGroupLoopEnd();
                                if ((lv_foundStack == false)) {
                                    UnitInventoryCreate(EventUnit(), lv_mineralType);
                                }
                                else {
                                }
                            }
                            IntLoopEnd();
                            libNtve_gf_CreateActorAtPoint("ChomperCrunch", UnitGetPosition(EventUnitTargetUnit()));
                            UnitCreateEffectUnit(gf_navigatorToShip(EventUnit()), "ChomperKill", EventUnitTargetUnit());
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/5870A5F2"));
                        }
                    }
                    else {
                    }
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/5393A61C"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/14DE8F83"));
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Startmining_Init () {
    gt_Startmining = TriggerCreate("gt_Startmining_Func");
    TriggerAddEventUnitAbility(gt_Startmining, null, AbilityCommand("MineAstroidDummy", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Startmining, null, AbilityCommand("ChompAsteroid", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mining (Remove Behavior)
//--------------------------------------------------------------------------------------------------
bool gt_MiningRemoveBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "Mining", 1);
    lv_index = gf_navigatorToIndex(EventUnit());
    gv_nav_targets[lv_index] = AngleBetweenPoints(UnitGetPosition(gv_nav_ships[lv_index]), EventUnitTargetPoint());
    if ((UnitHasBehavior(gv_nav_ships[lv_index], "Mining") == true)) {
        UnitBehaviorRemove(gv_nav_ships[lv_index], "Mining", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiningRemoveBehavior_Init () {
    gt_MiningRemoveBehavior = TriggerCreate("gt_MiningRemoveBehavior_Func");
    TriggerAddEventUnitAbility(gt_MiningRemoveBehavior, null, AbilityCommand("MineAstroidDummy", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return minerals (Dummy)
//--------------------------------------------------------------------------------------------------
bool gt_ReturnmineralsDummy_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gf_navigatorToShip(EventUnit()), Order(AbilityCommand("ReturnMinerals", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnmineralsDummy_Init () {
    gt_ReturnmineralsDummy = TriggerCreate("gt_ReturnmineralsDummy_Func");
    TriggerAddEventUnitAbility(gt_ReturnmineralsDummy, null, AbilityCommand("ReturnMineralsDummy", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scan Asteroids
//--------------------------------------------------------------------------------------------------
bool gt_ScanAsteroids_Func (bool testConds, bool runActions) {
    fixed auto10CFDFC4_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gf_navigatorToShip(EventUnit())), 10.0), UnitFilter((1 << c_targetFilterHover), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto10CFDFC4_val = UnitGetCustomValue(UnitGroupLoopCurrent(), 0);
        if (auto10CFDFC4_val == 1.0) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scanned4", EventUnit(), 1);
        }
        else if (auto10CFDFC4_val == 2.0) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scanned", EventUnit(), 1);
        }
        else if (auto10CFDFC4_val == 3.0) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scanned3", EventUnit(), 1);
        }
        else if (auto10CFDFC4_val == 4.0) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scanned2", EventUnit(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScanAsteroids_Init () {
    gt_ScanAsteroids = TriggerCreate("gt_ScanAsteroids_Func");
    TriggerAddEventUnitAbility(gt_ScanAsteroids, null, AbilityCommand("ScannerSweep2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dock Cargo Drone
//--------------------------------------------------------------------------------------------------
bool gt_DockCargoDrone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_charges;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), 0, 0, PointWithOffsetPolar(gv_mineraldropoff[gf_GetPlayerTeam(EventPlayer())], RandomFixed(0.0, 1.5), libNtve_gf_RandomAngle()));
        lv_charges = lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent());
        if ((lv_charges == 100.0)) {
            lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
            lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
        }
        else {
            lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()));
        }
    }
    UnitGroupLoopEnd();
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DockCargoDrone_Init () {
    gt_DockCargoDrone = TriggerCreate("gt_DockCargoDrone_Func");
    TriggerAddEventUnitAbility(gt_DockCargoDrone, null, AbilityCommand("CargoDroneDock", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mining block
//--------------------------------------------------------------------------------------------------
bool gt_Miningblock_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gf_navigatorToShip(EventUnit()), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Miningblock_Init () {
    gt_Miningblock = TriggerCreate("gt_Miningblock_Func");
    TriggerAddEventUnitAbility(gt_Miningblock, null, AbilityCommand("MineAstroidDummy", 0), c_unitAbilStageQueue, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Stations
//--------------------------------------------------------------------------------------------------
bool gt_InitStations_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_power_Stations[0].lv_name = "Engines";
    gv_power_Stations[0].lv_x = 450;
    gv_power_Stations[0].lv_y = 500;
    gv_power_Stations[1].lv_name = "Right Laser";
    gv_power_Stations[1].lv_x = 800;
    gv_power_Stations[1].lv_y = 180;
    gv_power_Stations[2].lv_name = "Left Laser";
    gv_power_Stations[2].lv_x = 400;
    gv_power_Stations[2].lv_y = 180;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitStations_Init () {
    gt_InitStations = TriggerCreate("gt_InitStations_Func");
    TriggerAddEventMapInit(gt_InitStations);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter
//--------------------------------------------------------------------------------------------------
bool gt_Enter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_power_MainDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Enter_Init () {
    gt_Enter = TriggerCreate("gt_Enter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leave
//--------------------------------------------------------------------------------------------------
bool gt_Leave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_power_MainDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Leave_Init () {
    gt_Leave = TriggerCreate("gt_Leave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy
//--------------------------------------------------------------------------------------------------
bool gt_Energy_Func (bool testConds, bool runActions) {
    int auto6EAD8565_ae;
    int auto6EAD8565_ai;
    string auto830BC1B1_val;
    int auto413F8C42_ae;
    int auto413F8C42_ai;
    string autoB1F5F009_val;

    // Variable Declarations
    fixed lv_shieldHP;
    bool lv_protected;
    fixed lv_drain;
    int lv_i;
    unit lv_ship;
    unit lv_console;
    unit lv_console2;
    unit lv_console3;
    unit lv_console4;
    unit lv_console5;
    fixed lv_shieldPower;
    fixed lv_extra_reg;
    fixed lv_core_extra;
    fixed lv_core_reg;
    fixed lv_connected_ships;
    int lv_n;
    int lv_team;
    text lv_rep;
    fixed lv_emergency_energizer;
    string lv_u;

    // Variable Initialization
    lv_emergency_energizer = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    CameraLockInput(13, false);
    CameraLockInput(14, false);
    CameraFollowUnitGroup(13, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
    CameraFollowUnitGroup(14, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
    auto6EAD8565_ae = 23;
    auto6EAD8565_ai = 1;
    lv_i = 0;
    for ( ; ( (auto6EAD8565_ai >= 0 && lv_i <= auto6EAD8565_ae) || (auto6EAD8565_ai <= 0 && lv_i >= auto6EAD8565_ae) ) ; lv_i += auto6EAD8565_ai ) {
        lv_protected = false;
        lv_ship = gv_nav_ships[lv_i];
        if ((lv_ship != null)) {
            auto830BC1B1_val = UnitGetType(lv_ship);
            if (auto830BC1B1_val == "Battlecruiser") {
                lv_connected_ships = 0.0;
                lv_team = gf_GetPlayerTeam(UnitGetOwner(lv_ship));
                auto413F8C42_ae = 20;
                auto413F8C42_ai = 1;
                lv_n = 0;
                for ( ; ( (auto413F8C42_ai >= 0 && lv_n <= auto413F8C42_ae) || (auto413F8C42_ai <= 0 && lv_n >= auto413F8C42_ae) ) ; lv_n += auto413F8C42_ai ) {
                    if ((gv_shipList[lv_team][lv_n].lv_status == 0) && (gv_shipList[lv_team][lv_n].lv_shipType != 20)) {
                        lv_u = gv_shiptypes[gv_shipList[lv_team][lv_n].lv_shipType].lv_unittype;
                        if ((lv_u != null)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_u, c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), Point(0.0, 0.0));
                            lv_connected_ships += UnitGetPropertyFixed(UnitLastCreated(), c_unitPropEnergyRegen, c_unitPropCurrent);
                            UnitRemove(UnitLastCreated());
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                if ((lv_team == 1)) {
                    lv_console = UnitFromId(4110);
                    lv_console2 = UnitFromId(2378);
                    lv_console3 = UnitFromId(3081);
                    lv_console4 = UnitFromId(2226);
                    lv_console5 = UnitFromId(107);
                }
                else {
                    lv_console = UnitFromId(4107);
                    lv_console2 = UnitFromId(2239);
                    lv_console3 = UnitFromId(4106);
                    lv_console4 = UnitFromId(2228);
                    lv_console5 = UnitFromId(226);
                }
                lv_shieldPower = IntToFixed(gv_energy_shields[lv_i]);
                if ((UnitHasBehavior(lv_console2, "EmergencyShieldEnergizer") == true)) {
                    lv_emergency_energizer = TechTreeUpgradeCount(0, "BattlecruiserHardenedShielding", c_techCountCompleteOnly);
                }
                else {
                }
                //Manage drain and shield stuff
                lv_drain = gv_energy_engine[lv_i] + gv_energy_shields[lv_i] + gv_energy_weapons[lv_i];
                if( gv_energy_weapons_capacitor[lv_i] + gv_energy_weapons[lv_i] < 0){
                  gv_energy_weapons[lv_i] = 0;
                  UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) + IntToFixed(gv_energy_weapons_capacitor[lv_i]));
                  gv_energy_weapons_capacitor[lv_i] = 0;
                }else{
                  gv_energy_weapons_capacitor[lv_i] = MinI(gv_energy_weapons_capacitor[lv_i] + gv_energy_weapons[lv_i], 100000);
                }
                if ((UnitHasBehavior(lv_ship, "ShieldOverwhelmed") == false) || (UnitHasBehavior(lv_ship, "ShieldBoost") == true)) {
                    if((UnitHasBehavior(lv_ship, "ShieldBoost") == true)) {
                        UnitSetPropertyFixed(lv_ship, c_unitPropShieldsRegen, lv_shieldPower * 0.25 + 30 * (1 + TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserHardenedShielding", c_techCountCompleteOnly)));
                    } else {
                        UnitSetPropertyFixed(lv_ship, c_unitPropShieldsRegen, lv_shieldPower * 0.25);
                    }
                } else {
                    UnitSetPropertyFixed(lv_ship, c_unitPropShieldsRegen, 0);
                }
                //lv_shieldHP = UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent);
                //UnitSetPropertyFixed(lv_ship, c_unitPropShieldsMax, lv_shieldPower * 5.0);
                //lv_shieldHP -= UnitGetPropertyFixed(lv_ship, c_unitPropShieldsMax, c_unitPropCurrent);
                //if( lv_shieldHP > 0 ){
                //  UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) + lv_shieldHP);
                //}
                //UnitSetPropertyFixed(lv_ship, c_unitPropShields, lv_shieldHP + UnitGetPropertyFixed(lv_ship, c_unitPropShieldsMax, c_unitPropCurrent));
                //Set extra core output
                lv_core_extra = (IntToFixed(gv_energy_core_output[lv_i]) - 100.0) / 100.0 * UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropCurrent);
                UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) + (lv_core_extra + lv_connected_ships)));
                UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) - lv_drain));
                UnitSetPropertyFixed(lv_console, c_unitPropEnergy, IntToFixed(gv_energy_weapons_capacitor[lv_i]));
                UnitSetPropertyFixed(lv_console2, c_unitPropEnergy, UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent));
                UnitSetPropertyFixed(lv_console3, c_unitPropEnergy, UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent));
                UnitSetPropertyFixed(lv_console4, c_unitPropEnergy, UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent));
                UnitSetPropertyFixed(lv_console5, c_unitPropEnergy, UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent));
                //Manage Core regeneration
                lv_core_reg = (105.0 - IntToFixed(gv_energy_core_output[lv_i])) / 100.0; 
                // To get a faster core destruction, I make it exponential but keep the sign.
                if(lv_core_reg > 0){ 
                    lv_core_reg = lv_core_reg*lv_core_reg;
                    //lv_core_reg /= 2;
                } else if(lv_core_reg < 0){
                    lv_core_reg = -(lv_core_reg*lv_core_reg);
                    lv_core_reg *= 2.4; // Need to make it even faster
                    
                }
                if ((TechTreeUpgradeCount(UnitGetOwner(lv_ship), "TierUtility3", c_techCountCompleteOnly) == 1) && (lv_core_reg < 0.0)) {
                    lv_core_reg *= 0.5;
                }
                else {
                }
                if ((UnitHasBehavior(lv_console2, "EmergencyShieldEnergizer") == true)) {
                    lv_core_reg -= 0.5;
                }
                else {
                }
                if ((lv_core_reg > 0.0) && (gv_energy_core_stability[lv_i] < 100.0)) {
                    gv_energy_core_stability[lv_i] += MinF((100.0 - gv_energy_core_stability[lv_i]), lv_core_reg);
                    if ((gv_energy_core_stability[lv_i] > 50.0) && (UnitHasBehavior(lv_console2, "Corestability50") == true)) {
                        UnitBehaviorRemove(lv_console2, "Corestability50", 1);
                    }
                    else {
                        if ((gv_energy_core_stability[lv_i] > 25.0) && (UnitHasBehavior(lv_console2, "Corestability25") == true)) {
                            UnitBehaviorRemove(lv_console2, "Corestability25", 1);
                        }
                        else {
                        }
                    }
                }
                else {
                    if ((lv_core_reg < 0.0)) {
                        if ((gv_energy_core_stability[lv_i] > 0.0)) {
                            gv_energy_core_stability[lv_i] -= MinF(gv_energy_core_stability[lv_i], (0.0 - lv_core_reg));
                            if ((gv_energy_core_stability[lv_i] < 50.0) && (UnitHasBehavior(lv_console2, "Corestability50") == false)) {
                                UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], c_messageAreaSubtitle, (TextWithColor(StringExternal("Param/Value/8CE4C12E"), Color(85.10, 0.00, 1.96))));
                                UnitBehaviorAdd(lv_console2, "Corestability50", lv_console2, 1);
                            }
                            else {
                                if ((gv_energy_core_stability[lv_i] < 25.0) && (UnitHasBehavior(lv_console2, "Corestability25") == false)) {
                                    UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], c_messageAreaSubtitle, (TextWithColor(StringExternal("Param/Value/664D97FC"), Color(71.76, 0.00, 0.00))));
                                    UnitBehaviorAdd(lv_console2, "Corestability25", lv_console2, 1);
                                }
                                else {
                                }
                            }
                        }
                        else {
                            TriggerEnable(gt_BCdies, false);
                            TriggerEnable(TriggerGetCurrent(), false);
                            gf_Endgame((3 - gf_GetPlayerTeam(UnitGetOwner(lv_ship))), 1);
                            break;
                        }
                    }
                    else {
                    }
                }
                //Random power surge
                if ((RandomFixed(1.0, 130.0) <= (100.0 - gv_energy_core_stability[lv_i]))) {
                    gf_RandomPowerSurge(gf_GetPlayerTeam(UnitGetOwner(lv_ship)));
                }
            }
            else {
                //Vessel drain
                //lv_drain = (gv_nav_speed[lv_i] * gv_energy_engine[lv_i]) + gv_shiptypes[gf_getShipID(UnitGetType(lv_ship))].lv_drain_normal;
                lv_drain = (gv_nav_speed[lv_i] * gv_energy_engine[lv_i]) / 3;
                if ((UnitHasBehavior(lv_ship, "ForcePrism") == true)) {
                    lv_drain = lv_drain + 50;
                }
                if ((UnitHasBehavior(lv_ship, "WraithCloak") == true)) {
                    lv_drain = lv_drain + 15;
                }
                if(UnitGetOwner(lv_ship) != 16){
                    lv_extra_reg = IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "SmallshipsVesselEnergyUpgrade", c_techCountCompleteOnly));
                    UnitSetPropertyFixed(lv_ship, c_unitPropEnergyRegen, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropNormal) + lv_extra_reg - lv_drain));
                //TriggerDebugOutput(1, FixedToText(UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropNormal),5)+StringToText(" + ")+FixedToText(lv_extra_reg,5)+StringToText(" - ") + FixedToText(lv_drain,5) + StringToText(" = ") +FixedToText(UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropNormal) + lv_extra_reg - lv_drain,5)+StringToText(" = ") + FixedToText(UnitGetPropertyFixed(lv_ship, c_unitPropEnergyRegen, c_unitPropCurrent),5), true);
                //lv_drain = 0.0;
                }
            }
            if ((UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) == 0.0) && (UnitBehaviorCount(lv_ship, "PowerLossBC") == 0) && (UnitBehaviorCount(lv_ship, "PowerLossSmall") == 0)) {
                autoB1F5F009_val = UnitGetType(lv_ship);
                if (autoB1F5F009_val == "Battlecruiser") {
                    if ((gv_energy_weapons_capacitor[lv_i] >= FixedToInt(lv_drain))) {
                        UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) + IntToFixed(gv_energy_weapons_capacitor[lv_i])));
                        gv_energy_weapons_capacitor[lv_i] = 0;
                        gv_energy_weapons[lv_i] = 0;
                        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(UnitGetOwner(lv_ship))), c_messageAreaError, StringExternal("Param/Value/A30F64C5"));
                        lv_protected = true;
                    }
                    else {
                        UnitSetPropertyFixed(lv_ship, c_unitPropShields, 0.0);
                        gv_energy_engine[lv_i] = 0;
                        gv_energy_shields[lv_i] = 0;
                        gv_energy_weapons[lv_i] = 0;
                        gv_energy_weapons_capacitor[lv_i] = 0;
                    }
                    if ((lv_protected == false)) {
                        UnitBehaviorAdd(lv_ship, "PowerLossBC", lv_ship, 1);
                        gf_Blackout(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], 15.0);
                        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(UnitGetOwner(lv_ship))), c_messageAreaError, StringExternal("Param/Value/49FEC47E"));
                    }
                    else {
                    }
                }
                else {
                    gv_nav_speed[gf_shipToIndex(lv_ship)] = 0.0;
                    if ((lv_protected == false)) {
                        UnitBehaviorAdd(lv_ship, "PowerLossSmall", lv_ship, 1);
                        UnitBehaviorRemove(lv_ship, "ForcePrism", 1);
                        UnitBehaviorRemove(gf_shipToNavigator(lv_ship), "ForcePrismDummy", 1);
                        gf_Blackout(PlayerGroupSingle(UnitGetOwner(gf_shipToNavigator(lv_ship))), 5.0);
                        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gf_shipToNavigator(lv_ship))), c_messageAreaError, StringExternal("Param/Value/F8A3CE42"));
                    }
                    else {
                    }
                }
            }
            else {
                if ((UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) < 30.0) && (UnitGetType(lv_ship) != "Battlecruiser") && (UnitHasBehavior(lv_ship, "LowEnergyWarningCooldown") == false)) {
                    UnitBehaviorAdd(lv_ship, "LowEnergyWarningCooldown", lv_ship, 1);
                    UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(gf_shipToNavigator(lv_ship))), c_messageAreaError, StringExternal("Param/Value/4B64AAB1"));
                }
                else {
                }
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Energy_Init () {
    gt_Energy = TriggerCreate("gt_Energy_Func");
    TriggerEnable(gt_Energy, false);
    TriggerAddEventTimePeriodic(gt_Energy, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cut Engines
//--------------------------------------------------------------------------------------------------
bool gt_CutEngines_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_nav_speed[gf_navigatorToIndex(EventUnit())] = 0.0;
    if ((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true) && (gv_currentTutorialText[EventPlayer()] == 6)) {
        TriggerExecute(gt_NextIntroductiontext, false, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CutEngines_Init () {
    gt_CutEngines = TriggerCreate("gt_CutEngines_Func");
    TriggerAddEventUnitAbility(gt_CutEngines, null, AbilityCommand("CutEngines", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decoy Flares
//--------------------------------------------------------------------------------------------------
bool gt_DecoyFlares_Func (bool testConds, bool runActions) {
    int auto2EABB0A6_n;
    int auto2EABB0A6_i;

    // Variable Declarations
    unit lv_ship;
    fixed lv_angle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitInventoryItem()) == "ItemDecoyFlare"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) != "Marine")) {
        lv_ship = gf_navigatorToShip(EventUnit());
        UnitRemove(EventUnitInventoryItem());
        auto2EABB0A6_n = 25;
        for (auto2EABB0A6_i = 1; auto2EABB0A6_i <= auto2EABB0A6_n; auto2EABB0A6_i += 1) {
            lv_angle = ((UnitGetFacing(lv_ship) + 180.0) + RandomFixed(-20.0, 20.0));
            UnitCreate(1, "DecoyFlare", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), PointWithOffsetPolar(UnitGetPosition(lv_ship), 1.0, lv_angle), lv_angle);
            UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
            UnitSetCustomValue(UnitLastCreated(), 8, 1.0);
            gf_RegisterPhysics(UnitLastCreated());
            gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
            gf_PhysicsApplyForcePolar(UnitLastCreated(), 6.0, lv_angle);
            gf_TimedLife(UnitLastCreated(), 2.5);
            Wait(RandomFixed(0.01, 0.1), c_timeGame);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/3A020D27"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecoyFlares_Init () {
    gt_DecoyFlares = TriggerCreate("gt_DecoyFlares_Func");
    TriggerAddEventUnitInventoryChange(gt_DecoyFlares, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Missile (Small ship)
//--------------------------------------------------------------------------------------------------
bool gt_FireMissileSmallship_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    string lv_type;
    unit lv_missile;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "PiranhaLightMissileItem") || (UnitGetType(EventUnitInventoryItem()) == "ScorpionLightMissileItem") || (UnitGetType(EventUnitInventoryItem()) == "WaspLightMissileItem")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) != "Marine")) {
        if (((UnitGetType(EventUnit()) == "NavigatorWraith") || (UnitGetType(EventUnit()) == "NavigatorCorvette") || (UnitGetType(EventUnit()) == "NavigatorMinelayer") || (UnitGetType(EventUnit()) == "NavigatorDestroyer"))) {
            if ((TechTreeUpgradeCount(EventPlayer(), "TierOffensive2", c_techCountCompleteOnly) == 1)) {
                lv_ship = gf_navigatorToShip(EventUnit());
                UnitRemove(EventUnitInventoryItem());
                lv_type = gv_missiles[gf_GetMissileidItem(UnitGetType(EventUnitInventoryItem()))].lv_missileType;
                UnitCreate(1, lv_type, c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
                lv_missile = UnitLastCreated();
                UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
                UnitSetCustomValue(UnitLastCreated(), 8, gv_shipList[gf_GetPlayerTeam(EventPlayer())][FixedToInt(UnitGetCustomValue(lv_ship, 6))].lv_shipType);
                if ((UnitLastCreated() != null)) {
                    gf_RegisterPhysics(lv_missile);
                    gf_PhysicsApplyForcePolar(lv_missile, gv_missiles[gf_GetMissileidMissile(UnitGetType(lv_missile))].lv_speed, UnitGetFacing(lv_ship));
                    gf_PhysicsApplyForceCartesian(lv_missile, UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
                    gf_TimedLife(lv_missile, gv_missiles[gf_GetMissileidMissile(UnitGetType(lv_missile))].lv_duration);
                    libNtve_gf_AttachActorToUnit(lv_missile, "SoundMissileSmall", "Ref_Origin");
                }
                else {
                    TriggerDebugOutput(1, StringExternal("Param/Value/F77E4BE7"), true);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/E83DF555"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/EC4B0CFC"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/902562B5"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireMissileSmallship_Init () {
    gt_FireMissileSmallship = TriggerCreate("gt_FireMissileSmallship_Func");
    TriggerAddEventUnitInventoryChange(gt_FireMissileSmallship, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decoy Flares (Hotkey)
//--------------------------------------------------------------------------------------------------
bool gt_DecoyFlaresHotkey_Func (bool testConds, bool runActions) {
    int auto89B8EC46_n;
    int auto89B8EC46_i;

    // Variable Declarations
    unit lv_ship;
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ItemDecoyFlare")) {
            lv_ship = gf_navigatorToShip(EventUnit());
            UnitRemove(UnitGroupLoopCurrent());
            auto89B8EC46_n = 25;
            for (auto89B8EC46_i = 1; auto89B8EC46_i <= auto89B8EC46_n; auto89B8EC46_i += 1) {
                lv_angle = ((UnitGetFacing(lv_ship) + 180.0) + RandomFixed(-20.0, 20.0));
                UnitCreate(1, "DecoyFlare", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), PointWithOffsetPolar(UnitGetPosition(lv_ship), 1.0, lv_angle), lv_angle);
                UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
                UnitSetCustomValue(UnitLastCreated(), 8, 1.0);
                gf_RegisterPhysics(UnitLastCreated());
                gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
                gf_PhysicsApplyForcePolar(UnitLastCreated(), 6.0, lv_angle);
                gf_TimedLife(UnitLastCreated(), 2.5);
                Wait(RandomFixed(0.01, 0.1), c_timeGame);
            }
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_ship == null)) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/AD177B56"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecoyFlaresHotkey_Init () {
    gt_DecoyFlaresHotkey = TriggerCreate("gt_DecoyFlaresHotkey_Func");
    TriggerAddEventUnitAbility(gt_DecoyFlaresHotkey, null, AbilityCommand("FireDecoyFlares", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Laser
//--------------------------------------------------------------------------------------------------
bool gt_FireLaser_Func (bool testConds, bool runActions) {
    int autoCDDB5DD2_n;
    int autoCDDB5DD2_i;

    // Variable Declarations
    int lv_index;
    fixed lv_facing;
    unit lv_ship;
    point lv_offset;
    fixed lv_energy;
    fixed lv_tint;
    string lv_type;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    if ((gv_charges[gf_GetPlayerTeam(EventPlayer())] == 1)) {
        lv_energy = 100.0;
        lv_type = "SingleBurst";
    }
    else {
        if ((gv_charges[gf_GetPlayerTeam(EventPlayer())] == 3)) {
            lv_energy = 250.0;
            lv_type = "TripleBurst";
            if ((UnitHasBehavior(EventUnit(), "TripleBurstCharge") == true)) {
                CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0.5");
                if ((UnitBehaviorCount(EventUnit(), "TripleBurstCharge") == 1)) {
                    CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "1");
                    UnitBehaviorAdd(EventUnit(), "TripleBurstCooldown", EventUnit(), 1);
                }
                else {
                }
                UnitBehaviorRemove(EventUnit(), "TripleBurstCharge", 1);
            }
            else {
                UnitBehaviorAdd(EventUnit(), "TripleBurstCooldown", EventUnit(), 1);
                lv_energy = 500.0;
            }
            if ((UnitHasBehavior(EventUnit(), "TripleBurstCharge") == false) && (UnitHasBehavior(EventUnit(), "TripleBurstCooldown") == false)) {
                UnitBehaviorAdd(EventUnit(), "TripleBurstCharge", EventUnit(), 3);
                CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayer(), "250");
                CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0.5");
            }
            else {
            }
        }
        else {
            lv_energy = 800.0;
            lv_type = "PentaBurst";
        }
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "TierOffensive3", c_techCountCompleteOnly) == 1)) {
        lv_energy *= 0.8;
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayer(), FixedToString(lv_energy, c_fixedPrecisionAny));
    if ((gv_view[EventPlayer()] == 1)) {
        if ((gf_useWeaponEnergy(FixedToInt(lv_energy), gv_nav_ships[lv_index]) == true)) {
            lv_tint = (TechTreeUpgradeCount(EventPlayer(), "BattlecruiserLaserUpgrade", c_techCountCompleteOnly) * 10);
            lv_facing = AngleBetweenPoints(UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]), EventUnitTargetPoint());
            lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
            autoCDDB5DD2_n = gv_charges[gf_GetPlayerTeam(EventPlayer())];
            for (autoCDDB5DD2_i = 1; autoCDDB5DD2_i <= autoCDDB5DD2_n; autoCDDB5DD2_i += 1) {
                lv_offset = PointWithOffsetPolar(UnitGetPosition(lv_ship), 2.0, (UnitGetFacing(lv_ship) + 90.0));
                UnitCreate(1, lv_type, c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), lv_offset, lv_facing);
                UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
                UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundLaser", "Ref_Origin");
                gf_RegisterPhysics(UnitLastCreated());
                gf_PhysicsApplyForcePolar(UnitLastCreated(), 55.0, AngleBetweenPoints(lv_offset, EventUnitTargetPoint()));
                gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
                gf_TimedLife(UnitLastCreated(), 3.0);
                lv_offset = PointWithOffsetPolar(UnitGetPosition(lv_ship), 2.0, (UnitGetFacing(lv_ship) - 90.0));
                UnitCreate(1, lv_type, c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), lv_offset, lv_facing);
                UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
                UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundLaser", "Ref_Origin");
                gf_RegisterPhysics(UnitLastCreated());
                gf_PhysicsApplyForcePolar(UnitLastCreated(), 55.0, AngleBetweenPoints(lv_offset, EventUnitTargetPoint()));
                gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
                gf_TimedLife(UnitLastCreated(), 3.0);
                Wait(0.09, c_timeGame);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/667C955E"));
        }
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_energy));
        UnitAbilityReset(EventUnit(), AbilityCommand("LaserDummy", 0), c_spendLocationAll);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/71466AF6"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireLaser_Init () {
    gt_FireLaser = TriggerCreate("gt_FireLaser_Func");
    TriggerAddEventUnitAbility(gt_FireLaser, null, AbilityCommand("LaserDummy", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Triple Burst Charges
//--------------------------------------------------------------------------------------------------
bool gt_TripleBurstCharges_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_charges[gf_GetPlayerTeam(EventPlayer())] == 3)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayer(), "250");
        CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0.5");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TripleBurstCharges_Init () {
    gt_TripleBurstCharges = TriggerCreate("gt_TripleBurstCharges_Func");
    TriggerAddEventPlayerEffectUsed(gt_TripleBurstCharges, c_playerAny, "TripleBurstAddcharges");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Kinetic Weapon
//--------------------------------------------------------------------------------------------------
bool gt_FireKineticWeapon_Func (bool testConds, bool runActions) {
    int auto159DEC42_n;
    int auto159DEC42_i;

    // Variable Declarations
    int lv_index;
    fixed lv_facing;
    unit lv_ship;
    point lv_offset;
    fixed lv_energy;
    fixed lv_force;
    int lv_amount;
    fixed lv_angle;

    // Variable Initialization
    lv_energy = 200.0;
    lv_amount = 4;
    lv_angle = 5.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
    if ((TechTreeUpgradeCount(EventPlayer(), "TierOffensive3", c_techCountCompleteOnly) == 1)) {
        lv_energy *= 0.7;
    }
    else {
    }
    if ((gv_view[EventPlayer()] == 1)) {
        if ((gf_useWeaponEnergy(FixedToInt(lv_energy), gv_nav_ships[lv_index]) == true)) {
            lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
            if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserKineticMultibranchtier2", c_techCountCompleteOnly) == 1)) {
                lv_amount += 2;
            }
            else {
            }
            if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserKineticMultibranchtier3", c_techCountCompleteOnly) == 1)) {
                lv_amount += 1;
            }
            else {
            }
            if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserKineticSinglebranchtier3", c_techCountCompleteOnly) == 1)) {
                lv_angle = 0.0;
            }
            else {
            }
            auto159DEC42_n = lv_amount;
            for (auto159DEC42_i = 1; auto159DEC42_i <= auto159DEC42_n; auto159DEC42_i += 1) {
                lv_facing = (AngleBetweenPoints(UnitGetPosition(lv_ship), EventUnitTargetPoint()) + RandomFixed((0.0 - lv_angle), lv_angle));
                UnitCreate(1, "KineticWeapon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), lv_facing);
                UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
                UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
                if ((TechTreeUpgradeCount(EventPlayer(), "BattlecruiserKineticMultibranchtier3", c_techCountCompleteOnly) == 1)) {
                    UnitBehaviorAdd(UnitLastCreated(), "KineticProjectileHomingSupply", UnitLastCreated(), 1);
                }
                else {
                }
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundKinetic", "Ref_Origin");
                lv_force = (24.0 + UnitGetPropertyFixed(UnitLastCreated(), c_unitPropBountyVespene, c_unitPropCurrent));
                gf_RegisterPhysics(UnitLastCreated());
                gf_PhysicsApplyForcePolar(UnitLastCreated(), lv_force, lv_facing);
                gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
                gf_TimedLife(UnitLastCreated(), 7.5);
                Wait(0.08, c_timeGame);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/0E165B78"));
        }
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + lv_energy));
        UnitAbilityReset(EventUnit(), AbilityCommand("LaserDummy", 0), c_spendLocationAll);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/0054B0B2"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireKineticWeapon_Init () {
    gt_FireKineticWeapon = TriggerCreate("gt_FireKineticWeapon_Func");
    TriggerAddEventUnitAbility(gt_FireKineticWeapon, null, AbilityCommand("FireKineticWeapon", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Broadside
//--------------------------------------------------------------------------------------------------
bool gt_FireBroadside_Func (bool testConds, bool runActions) {
    int autoFAD3E900_ae;
    int autoFAD3E900_ai;

    // Variable Declarations
    int lv_index;
    int lv_i;
    unit lv_ship;
    fixed lv_angle;
    int lv_dir;
    fixed lv_energy;
    fixed lv_spread;

    // Variable Initialization
    lv_dir = 1;
    lv_energy = 800.0;
    lv_spread = -10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    if ((TechTreeUpgradeCount(EventPlayer(), "TierOffensive3", c_techCountCompleteOnly) == 1)) {
        lv_energy *= 0.7;
    }
    else {
    }
    if ((gf_useWeaponEnergy(FixedToInt(lv_energy), lv_ship) == true)) {
        if ((EventUnitAbility() == AbilityCommand("LaserBatteryRight", 0))) {
            lv_dir = -1;
            lv_spread = gf_Minus(lv_spread);
        }
        else {
        }
        libNtve_gf_AttachActorToUnit(gf_navigatorToShip(EventUnit()), "SoundBroadside", "Ref_Origin");
        autoFAD3E900_ae = 2;
        autoFAD3E900_ai = 1;
        lv_i = -2;
        for ( ; ( (autoFAD3E900_ai >= 0 && lv_i <= autoFAD3E900_ae) || (autoFAD3E900_ai <= 0 && lv_i >= autoFAD3E900_ae) ) ; lv_i += autoFAD3E900_ai ) {
            lv_angle = (UnitGetFacing(lv_ship) + ((lv_dir * 90.0) + (lv_i * lv_spread)));
            UnitCreate(1, "ATALaserBattery2", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(UnitGetPosition(lv_ship), (IntToFixed(lv_i) * 0.85), UnitGetFacing(lv_ship)), 0.2, (90.0 + (UnitGetFacing(lv_ship) * lv_dir))), 0.1, UnitGetFacing(lv_ship)), lv_angle);
            UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
            UnitSetCustomValue(UnitLastCreated(), 8, 20.0);
            gf_RegisterPhysics(UnitLastCreated());
            gf_PhysicsApplyForcePolar(UnitLastCreated(), 30.0, lv_angle);
            gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
            gf_TimedLife(UnitLastCreated(), 2.5);
            Wait(0.32, c_timeGame);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CC17F6A8"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireBroadside_Init () {
    gt_FireBroadside = TriggerCreate("gt_FireBroadside_Func");
    TriggerAddEventUnitAbility(gt_FireBroadside, null, AbilityCommand("LaserBatteryLeft", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_FireBroadside, null, AbilityCommand("LaserBatteryRight", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scorpion Light Missile split
//--------------------------------------------------------------------------------------------------
bool gt_ScorpionLightMissilesplit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SplitScorpionLightMissile(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScorpionLightMissilesplit_Init () {
    gt_ScorpionLightMissilesplit = TriggerCreate("gt_ScorpionLightMissilesplit_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScorpionLightMissilesplit, c_playerAny, "ScorpionLightMissileSplit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inertial Nullifier Field
//--------------------------------------------------------------------------------------------------
bool gt_InertialNullifierField_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_navigatorToIndex(EventUnit());
    lv_ship = gv_nav_ships[lv_index];
    if ((gf_useEnergy(1000.0, lv_ship) == true)) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "InertialNullifierField", EventUnit(), 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/B70BF1CF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InertialNullifierField_Init () {
    gt_InertialNullifierField = TriggerCreate("gt_InertialNullifierField_Func");
    TriggerAddEventUnitAbility(gt_InertialNullifierField, null, AbilityCommand("InertialNullifierField", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Radar ping
//--------------------------------------------------------------------------------------------------
bool gt_Radarping_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent())) == -1) && ((gf_shipToIndex(UnitGroupLoopCurrent()) != -1) || ((UnitGetType(UnitGroupLoopCurrent()) == "PointDefenseDrone") && (PlayerGroupHasPlayer(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), UnitGetOwner(UnitGroupLoopCurrent())) == false)))) {
            if ((gf_GetPlayerTeam(EventPlayer()) == gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())))) {
                MinimapPing(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), UnitGetPosition(UnitGroupLoopCurrent()), 2.0, Color(0.00, 100.00, 0.00));
            }
            else {
                if ((lib1_gf_InventoryHasItemOfType(gf_shipToNavigator(UnitGroupLoopCurrent()), "FrequencyNullifier") == false) && (UnitGetType(UnitGroupLoopCurrent()) != "HelsAngelFighter")) {
                    MinimapPing(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), UnitGetPosition(UnitGroupLoopCurrent()), 2.0, Color(100.00, 0.00, 0.00));
                }
                else {
                }
            }
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Radarping_Init () {
    gt_Radarping = TriggerCreate("gt_Radarping_Func");
    TriggerAddEventUnitAbility(gt_Radarping, null, AbilityCommand("Radarping", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Boost
//--------------------------------------------------------------------------------------------------
bool gt_ShieldBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    fixed lv_boost;
    fixed lv_upglevel;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_upglevel = TechTreeUpgradeCount(EventPlayer(), "BattlecruiserHardenedShielding", c_techCountCompleteOnly);
    gv_energy_core_stability[(gf_GetPlayerTeam(EventPlayer()) - 1)] = MaxF((gv_energy_core_stability[(gf_GetPlayerTeam(EventPlayer()) - 1)] - (6.0 - TechTreeUpgradeCount(EventPlayer(), "BattlecruiserHardenedShielding", c_techCountCompleteOnly))), 0.0);
    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    UnitBehaviorRemove(lv_ship, "ShieldOverwhelmed", 1);
    UnitBehaviorRemove(UnitGroupRandomUnit(UnitGroup("EnergyConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(EventPlayer())], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "ShieldOverwhelmed", 1);
    if ((gf_useEnergy(4000.0, lv_ship) == true)) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "ShieldBoost", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
        libNtve_gf_AttachActorToUnit(EventUnit(), "SoundShieldBoost", "Ref_Origin");
        libNtve_gf_AttachActorToUnit(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "SoundShieldBoost", "Ref_Origin");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/ED90C7E0"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldBoost_Init () {
    gt_ShieldBoost = TriggerCreate("gt_ShieldBoost_Func");
    TriggerAddEventUnitAbility(gt_ShieldBoost, null, AbilityCommand("ShieldBoost", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Iron Curtain
//--------------------------------------------------------------------------------------------------
bool gt_IronCurtain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    fixed lv_boost;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())];
    if ((gf_useEnergy(2000.0, lv_ship) == true)) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "IronCurtain", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
        libNtve_gf_AttachActorToUnit(EventUnit(), "SoundIronCurtain", "Ref_Origin");
        libNtve_gf_AttachActorToUnit(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "SoundIronCurtain", "Ref_Origin");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/4AA271C2"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IronCurtain_Init () {
    gt_IronCurtain = TriggerCreate("gt_IronCurtain_Func");
    TriggerAddEventUnitAbility(gt_IronCurtain, null, AbilityCommand("IronCurtain", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Emergency Shield Energizer
//--------------------------------------------------------------------------------------------------
bool gt_EmergencyShieldEnergizer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    fixed lv_boost;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "ShieldOverwhelmed", 1);
    UnitBehaviorRemove(UnitGroupRandomUnit(UnitGroup("EnergyConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(EventPlayer())], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), "ShieldOverwhelmed", 1);
    UISetButtonHighlighted(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), AbilityCommand("EmergencyShieldEnergizerOff", 0), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmergencyShieldEnergizer_Init () {
    gt_EmergencyShieldEnergizer = TriggerCreate("gt_EmergencyShieldEnergizer_Func");
    TriggerAddEventUnitAbility(gt_EmergencyShieldEnergizer, null, AbilityCommand("EmergencyShieldEnergizer", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Emergency Shield Energizer Turn Off
//--------------------------------------------------------------------------------------------------
bool gt_EmergencyShieldEnergizerTurnOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    fixed lv_boost;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), AbilityCommand("EmergencyShieldEnergizer", 0), c_spendLocationAbility);
    UnitAbilitySpend(EventUnit(), AbilityCommand("EmergencyShieldEnergizer", 0), c_spendLocationAbility);
    UISetButtonHighlighted(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), AbilityCommand("EmergencyShieldEnergizerOff", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EmergencyShieldEnergizerTurnOff_Init () {
    gt_EmergencyShieldEnergizerTurnOff = TriggerCreate("gt_EmergencyShieldEnergizerTurnOff_Func");
    TriggerAddEventUnitAbility(gt_EmergencyShieldEnergizerTurnOff, null, AbilityCommand("EmergencyShieldEnergizerOff", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engine Boost
//--------------------------------------------------------------------------------------------------
bool gt_EngineBoost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_navigatorToIndex(EventUnit());
    lv_ship = gv_nav_ships[lv_index];
    if ((gf_useEnergy(1000.0, lv_ship) == true)) {
        UnitBehaviorAdd(lv_ship, "EngineBoost", lv_ship, 1);
        libNtve_gf_AttachActorToUnit(EventUnit(), "SoundEngineBoost", "Ref_Origin");
        libNtve_gf_AttachActorToUnit(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "SoundEngineBoost", "Ref_Origin");
        UnitBehaviorAdd(lv_ship, gf_getSpeedBuff(lv_ship), lv_ship, (gv_energy_engine[lv_index] / gf_getSpeedCost(lv_ship) - UnitBehaviorCount(lv_ship, gf_getSpeedBuff(lv_ship))));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/1F2DFE4F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineBoost_Init () {
    gt_EngineBoost = TriggerCreate("gt_EngineBoost_Func");
    TriggerAddEventUnitAbility(gt_EngineBoost, null, AbilityCommand("EngineBoost", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Burst
//--------------------------------------------------------------------------------------------------
bool gt_Burst_Func (bool testConds, bool runActions) {
    abilcmd auto4A6E3ABB_val;

    // Variable Declarations
    fixed lv_energy;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "1Burst", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "3Burst", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "5Burst", 0);
    }
    PlayerGroupLoopEnd();
    auto4A6E3ABB_val = EventUnitAbility();
    if (auto4A6E3ABB_val == AbilityCommand("SwitchtoSingleBurst", 0)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "1Burst", 1);
        }
        PlayerGroupLoopEnd();
        gv_charges[gf_GetPlayerTeam(EventPlayer())] = 1;
        lv_energy = 100.0;
    }
    else if (auto4A6E3ABB_val == AbilityCommand("SwitchtoTripleBurst", 0)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "3Burst", 1);
        }
        PlayerGroupLoopEnd();
        gv_charges[gf_GetPlayerTeam(EventPlayer())] = 3;
        if ((UnitHasBehavior(EventUnit(), "TripleBurstCharge") == true)) {
            lv_energy = 250.0;
            CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer(), "0.5");
        }
        else {
            lv_energy = 500.0;
        }
    }
    else if (auto4A6E3ABB_val == AbilityCommand("SwitchtoPentaBurst", 0)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "5Burst", 1);
        }
        PlayerGroupLoopEnd();
        gv_charges[gf_GetPlayerTeam(EventPlayer())] = 5;
        lv_energy = 800.0;
    }
    else {
    }
    if ((TechTreeUpgradeCount(EventPlayer(), "TierOffensive3", c_techCountCompleteOnly) == 1)) {
        lv_energy *= 0.7;
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogAbil, "LaserDummy", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayer(), FixedToString(lv_energy, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Burst_Init () {
    gt_Burst = TriggerCreate("gt_Burst_Func");
    TriggerAddEventUnitAbility(gt_Burst, null, AbilityCommand("SwitchtoSingleBurst", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Burst, null, AbilityCommand("SwitchtoTripleBurst", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Burst, null, AbilityCommand("SwitchtoPentaBurst", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Weaponry
//--------------------------------------------------------------------------------------------------
bool gt_ChangeWeaponry_Func (bool testConds, bool runActions) {
    abilcmd autoAB80FF2B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitBehaviorRemove(EventUnit(), "WeaponryKinetic", 1);
        UnitBehaviorRemove(EventUnit(), "WeaponryLaser", 1);
    }
    PlayerGroupLoopEnd();
    autoAB80FF2B_val = EventUnitAbility();
    if (autoAB80FF2B_val == AbilityCommand("ActivateKineticWeaponry", 0)) {
        UnitBehaviorAdd(EventUnit(), "WeaponryKinetic", EventUnit(), 1);
    }
    else if (autoAB80FF2B_val == AbilityCommand("ActivateLaserWeaponry", 0)) {
        UnitBehaviorAdd(EventUnit(), "WeaponryLaser", EventUnit(), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeWeaponry_Init () {
    gt_ChangeWeaponry = TriggerCreate("gt_ChangeWeaponry_Func");
    TriggerAddEventUnitAbility(gt_ChangeWeaponry, null, AbilityCommand("ActivateKineticWeaponry", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_ChangeWeaponry, null, AbilityCommand("ActivateLaserWeaponry", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plasma Cannon
//--------------------------------------------------------------------------------------------------
bool gt_PlasmaCannon_Func (bool testConds, bool runActions) {
    int auto2BDA6870_ae;
    int auto2BDA6870_ai;

    // Variable Declarations
    int lv_index;
    unit lv_ship;
    int lv_i;
    fixed lv_wraithwidth;

    // Variable Initialization
    lv_wraithwidth = 0.6;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "RecentlyFiredWeapon") == false)) {
        if ((gf_useEnergy(5.0, gf_navigatorToShip(EventUnit())) == true)) {
            UnitBehaviorAdd(EventUnit(), "RecentlyFiredWeapon", EventUnit(), 1);
            lv_index = gf_navigatorToIndex(EventUnit());
            lv_ship = gv_nav_ships[lv_index];
            UnitBehaviorRemove(lv_ship, "WraithCloak", 1);
            UnitBehaviorRemove(EventUnit(), "WraithCloak", 1);
            auto2BDA6870_ae = 90;
            auto2BDA6870_ai = 180;
            lv_i = -90;
            for ( ; ( (auto2BDA6870_ai >= 0 && lv_i <= auto2BDA6870_ae) || (auto2BDA6870_ai <= 0 && lv_i >= auto2BDA6870_ae) ) ; lv_i += auto2BDA6870_ai ) {
                UnitCreate(1, "PlasmaCannon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), PointWithOffsetPolar(UnitGetPosition(lv_ship), (lv_wraithwidth / 2.0), (UnitGetFacing(lv_ship) + lv_i)), UnitGetFacing(lv_ship));
                UnitBehaviorAdd(UnitLastCreated(), "Collisiondetection", UnitLastCreated(), 1);
                UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
                UnitSetCustomValue(UnitLastCreated(), 8, 1.0);
                gf_RegisterPhysics(UnitLastCreated());
                gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
                gf_PhysicsApplyForcePolar(UnitLastCreated(), 18.0, UnitGetFacing(lv_ship));
                gf_TimedLife(UnitLastCreated(), 5.0);
            }
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundPlasmaCannon", "Ref_Origin");
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CB83B8F6"));
        }
    }
    else {
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + 5.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlasmaCannon_Init () {
    gt_PlasmaCannon = TriggerCreate("gt_PlasmaCannon_Func");
    TriggerAddEventUnitAbility(gt_PlasmaCannon, null, AbilityCommand("PlasmaCannonDummy", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP
//--------------------------------------------------------------------------------------------------
bool gt_EMP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facing;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_useEnergy(10.0, gf_navigatorToShip(EventUnit())) == true)) {
        UnitBehaviorRemove(gf_navigatorToShip(EventUnit()), "WraithCloak", 1);
        UnitBehaviorRemove(EventUnit(), "WraithCloak", 1);
        UnitAbilitySpend(EventUnit(), AbilityCommand("EMP2", 0), c_spendLocationAll);
        lv_facing = AngleBetweenPoints(UnitGetPosition(gf_navigatorToShip(EventUnit())), EventUnitTargetPoint());
        UnitCreate(1, "EMP", c_unitCreateIgnorePlacement, UnitGetOwner(gf_navigatorToShip(EventUnit())), UnitGetPosition(gf_navigatorToShip(EventUnit())), lv_facing);
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
        UnitSetCustomValue(UnitLastCreated(), 8, 1.0);
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForcePolar(UnitLastCreated(), 50.0, lv_facing);
        gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(gf_navigatorToShip(EventUnit()), 1), UnitGetCustomValue(gf_navigatorToShip(EventUnit()), 2));
        gf_TimedLife(UnitLastCreated(), 5.0);
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundEMP", "Ref_Origin");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/8354FE1E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMP_Init () {
    gt_EMP = TriggerCreate("gt_EMP_Func");
    TriggerAddEventUnitAbility(gt_EMP, null, AbilityCommand("EMP2", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Miner Ping
//--------------------------------------------------------------------------------------------------
bool gt_MinerPing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_useEnergy(25.0, gf_navigatorToShip(EventUnit())) == true)) {
        UnitGroupLoopBegin(UnitGroup("Medivac", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((lib1_gf_InventoryHasItemOfType(gf_shipToNavigator(UnitGroupLoopCurrent()), "FrequencyNullifier") == false) && (gf_GetPlayerTeam(EventPlayer()) != gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())))) {
                MinimapPing(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), UnitGetPosition(UnitGroupLoopCurrent()), 2.0, Color(100.00, 0.00, 0.00));
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Chomper", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((lib1_gf_InventoryHasItemOfType(gf_shipToNavigator(UnitGroupLoopCurrent()), "FrequencyNullifier") == false) && (gf_GetPlayerTeam(EventPlayer()) != gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())))) {
                MinimapPing(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), UnitGetPosition(UnitGroupLoopCurrent()), 2.0, Color(100.00, 0.00, 0.00));
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("PointDefenseDrone", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((gf_GetPlayerTeam(EventPlayer()) != gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())))) {
                MinimapPing(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), UnitGetPosition(UnitGroupLoopCurrent()), 2.0, Color(100.00, 0.00, 0.00));
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/2253FAEB"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MinerPing_Init () {
    gt_MinerPing = TriggerCreate("gt_MinerPing_Func");
    TriggerAddEventUnitAbility(gt_MinerPing, null, AbilityCommand("MinerPing", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boost
//--------------------------------------------------------------------------------------------------
bool gt_Boost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_useEnergy(15.0, gf_navigatorToShip(EventUnit())) == true)) {
        libNtve_gf_AttachActorToUnit(gf_navigatorToShip(EventUnit()), "SoundSideBoosts", "Ref_Origin");
        UnitBehaviorRemove(gf_navigatorToShip(EventUnit()), "WraithCloak", 1);
        UnitBehaviorRemove(EventUnit(), "WraithCloak", 1);
    }
    else {
        UnitBehaviorRemove(EventUnit(), "Boostleft", 1);
        UnitBehaviorRemove(EventUnit(), "Boostright", 1);
        UnitBehaviorRemove(EventUnit(), "Rearboost", 1);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/D52C9965"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boost_Init () {
    gt_Boost = TriggerCreate("gt_Boost_Func");
    TriggerAddEventUnitAbility(gt_Boost, null, AbilityCommand("Boostleft", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Boost, null, AbilityCommand("Boostright", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Boost, null, AbilityCommand("Rearboost", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloaking Field (On)
//--------------------------------------------------------------------------------------------------
bool gt_CloakingFieldOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NavigatorWraith"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if ((gf_useEnergy(50.0, lv_ship) == true)) {
        libNtve_gf_AttachActorToUnit(lv_ship, "CloakOn", "Ref_Origin");
        UnitBehaviorAdd(lv_ship, "WraithCloak", lv_ship, 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/FC7E9868"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingFieldOn_Init () {
    gt_CloakingFieldOn = TriggerCreate("gt_CloakingFieldOn_Func");
    TriggerAddEventUnitAbility(gt_CloakingFieldOn, null, AbilityCommand("WraithCloak", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cloaking Field (Off)
//--------------------------------------------------------------------------------------------------
bool gt_CloakingFieldOff_Func (bool testConds, bool runActions) {
    int auto159FC79E_ae;
    int auto159FC79E_ai;

    // Variable Declarations
    unit lv_ship;
    int lv_tmp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NavigatorWraith"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto159FC79E_ae = 23;
    auto159FC79E_ai = 1;
    lv_tmp = 0;
    for ( ; ( (auto159FC79E_ai >= 0 && lv_tmp <= auto159FC79E_ae) || (auto159FC79E_ai <= 0 && lv_tmp >= auto159FC79E_ae) ) ; lv_tmp += auto159FC79E_ai ) {
        if ((gv_nav_navigators[lv_tmp] == EventUnit())) {
            lv_ship = gv_nav_ships[lv_tmp];
        }
        else {
        }
    }
    libNtve_gf_AttachActorToUnit(lv_ship, "CloakOff", "Ref_Origin");
    UnitBehaviorRemove(lv_ship, "WraithCloak", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloakingFieldOff_Init () {
    gt_CloakingFieldOff = TriggerCreate("gt_CloakingFieldOff_Func");
    TriggerAddEventUnitBehaviorChange(gt_CloakingFieldOff, null, "WraithCloak", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return cargo
//--------------------------------------------------------------------------------------------------
bool gt_Returncargo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bc;
    fixed lv_charges;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true) && (gv_currentTutorialText[EventPlayer()] == 8)) {
        TriggerExecute(gt_NextIntroductiontext, false, false);
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "WarpPrism", c_unitCreateIgnorePlacement, gf_GetPlayerTeamAI(EventPlayer()), UnitGetPosition(EventUnit()));
    gf_RegisterCollision(UnitLastCreated());
    UnitGroupLoopBegin(UnitInventoryGroup(gf_shipToNavigator(EventUnit())));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "VelditeOre") || (UnitGetType(UnitGroupLoopCurrent()) == "PyromaniteOre") || (UnitGetType(UnitGroupLoopCurrent()) == "ChalcoriumOre") || (UnitGetType(UnitGroupLoopCurrent()) == "KermiculiteOre"))) {
            UnitInventoryCreate(UnitLastCreated(), UnitGetType(UnitGroupLoopCurrent()));
            lv_charges = lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent());
            if ((lv_charges == 100.0)) {
                lib1_gf_ItemSetChargesRemaining(UnitInventoryLastCreated(), 99.0);
                lib1_gf_ItemAddCharges(UnitInventoryLastCreated(), 1.0);
            }
            else {
                lib1_gf_ItemSetChargesRemaining(UnitInventoryLastCreated(), lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()));
            }
            UnitInventoryRemove(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(EventUnit()))]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Returncargo_Init () {
    gt_Returncargo = TriggerCreate("gt_Returncargo_Func");
    TriggerAddEventUnitAbility(gt_Returncargo, null, AbilityCommand("ReturnMinerals", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Accelerate Mining Beam
//--------------------------------------------------------------------------------------------------
bool gt_AccelerateMiningBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_navigatorToIndex(EventUnit());
    lv_ship = gv_nav_ships[lv_index];
    if ((gf_useEnergy(150.0, lv_ship) == true)) {
        if ((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true) && (gv_currentTutorialText[EventPlayer()] == 9)) {
            TriggerExecute(gt_NextIntroductiontext, false, false);
        }
        else {
        }
        UnitBehaviorAdd(EventUnit(), "AccelerateMiningBeam", EventUnit(), 1);
        UnitBehaviorAdd(gf_navigatorToShip(EventUnit()), "AccelerateMiningBeam", EventUnit(), 1);
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundPlasmaCannon", "Ref_Origin");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/73BAEDDC"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AccelerateMiningBeam_Init () {
    gt_AccelerateMiningBeam = TriggerCreate("gt_AccelerateMiningBeam_Func");
    TriggerAddEventUnitAbility(gt_AccelerateMiningBeam, null, AbilityCommand("AccelerateMiningBeam", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turbo Jump
//--------------------------------------------------------------------------------------------------
bool gt_TurboJump_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;
    fixed lv_energy;

    // Variable Initialization
    lv_energy = 250.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "TierUtility1", c_techCountCompleteOnly) == 1)) {
        lv_energy = 125.0;
    }
    else {
    }
    lv_index = gf_navigatorToIndex(EventUnit());
    lv_ship = gv_nav_ships[lv_index];
    if ((gf_useEnergy(lv_energy, lv_ship) == true)) {
        libNtve_gf_AttachActorToUnit(lv_ship, "TurboJump", "Ref_Center");
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundTurboJumpCharge", "Ref_Origin");
        Wait(2.0, c_timeGame);
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundTurboJump", "Ref_Origin");
        if ((UnitHasBehavior(lv_ship, "EMPFornavigatedships") == false)) {
            UnitBehaviorAdd(lv_ship, "TurboJump", lv_ship, 1);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/D07D44C7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TurboJump_Init () {
    gt_TurboJump = TriggerCreate("gt_TurboJump_Func");
    TriggerAddEventUnitAbility(gt_TurboJump, null, AbilityCommand("TurboJump", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mineral Vent
//--------------------------------------------------------------------------------------------------
bool gt_MineralVent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pickedmineral;
    unit lv_ship;
    fixed lv_angle;
    const fixed lv_spread = 10.0;
    fixed lv_force;
    fixed lv_mineraltype;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_angle = (AngleBetweenPoints(UnitGetPosition(lv_ship), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) + RandomFixed(gf_Minus(lv_spread), lv_spread));
    lv_force = RandomFixed(750.0, 900.0);
    UnitGroupLoopBegin(UnitInventoryGroup(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()) >= 10.0) && ((UnitGetType(UnitGroupLoopCurrent()) == "VelditeOre") || (UnitGetType(UnitGroupLoopCurrent()) == "ChalcoriumOre") || (UnitGetType(UnitGroupLoopCurrent()) == "PyromaniteOre") || (UnitGetType(UnitGroupLoopCurrent()) == "KermiculiteOre"))) {
            lv_pickedmineral = UnitGroupLoopCurrent();
            if ((UnitGetType(UnitGroupLoopCurrent()) == "VelditeOre")) {
                lv_mineraltype = 1.0;
            }
            else {
                if ((UnitGetType(UnitGroupLoopCurrent()) == "ChalcoriumOre")) {
                    lv_mineraltype = 2;
                }
                else {
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "PyromaniteOre")) {
                        lv_mineraltype = 3;
                    }
                    else {
                        if ((UnitGetType(UnitGroupLoopCurrent()) == "KermiculiteOre")) {
                            lv_mineraltype = 4;
                        }
                        else {
                        }
                    }
                }
            }
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    if ((lv_pickedmineral != null)) {
        UnitCreate(1, "AsteroidMineralVent", c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_ship), 2.0, lv_angle), lv_angle);
        UnitBehaviorAdd(UnitLastCreated(), "Collisiondetection", UnitLastCreated(), 1);
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
        UnitSetCustomValue(UnitLastCreated(), 8, 0.0);
        UnitSetCustomValue(UnitLastCreated(), 0, lv_mineraltype);
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
        gf_PhysicsApplyForcePolar(UnitLastCreated(), lv_force, lv_angle);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (5.0 * MinF(lib1_gf_ItemGetChargesRemaining(lv_pickedmineral), 10.0)));
        if ((lib1_gf_ItemGetChargesRemaining(lv_pickedmineral) == 10.0)) {
            UnitRemove(lv_pickedmineral);
        }
        else {
            lib1_gf_ItemSetChargesRemaining(lv_pickedmineral, (lib1_gf_ItemGetChargesRemaining(lv_pickedmineral) - 10.0));
        }
        gf_PhysicsSetFriction(UnitLastCreated(), RandomFixed(0.9, 0.98));
    }
    else {
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MineralVentStop", EventPlayerEffectUsedUnit(c_effectUnitCaster));
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineralVent_Init () {
    gt_MineralVent = TriggerCreate("gt_MineralVent_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineralVent, c_playerAny, "MineralVentEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Photon Barrage
//--------------------------------------------------------------------------------------------------
bool gt_PhotonBarrage_Func (bool testConds, bool runActions) {
    int autoEDEE5125_ae;
    int autoEDEE5125_ai;

    // Variable Declarations
    int lv_index;
    unit lv_ship;
    int lv_i;
    const int lv_spread = 10;
    fixed lv_force;
    int lv_energy;

    // Variable Initialization
    lv_force = 12.0;
    lv_energy = 20;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "RecentlyFiredWeapon") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "RecentlyFiredWeapon", EventUnit(), 1);
    lv_index = gf_navigatorToIndex(EventUnit());
    lv_ship = gv_nav_ships[lv_index];
    if ((TechTreeUpgradeCount(EventPlayer(), "TierOffensive1", c_techCountCompleteOnly) >= 1)) {
        lv_energy -= 10;
    }
    else {
    }
    if ((gf_useEnergy(lv_energy, gf_navigatorToShip(EventUnit())) == true)) {
        if ((TechTreeUpgradeCount(EventPlayer(), "CorvettePhotonCondenser", c_techCountCompleteOnly) >= 1)) {
            lv_force = 21.0;
        }
        else {
        }
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundPhotonBarrage", "Ref_Origin");
        autoEDEE5125_ae = (2 * lv_spread);
        autoEDEE5125_ai = lv_spread;
        lv_i = (0 - (2 * lv_spread));
        for ( ; ( (autoEDEE5125_ai >= 0 && lv_i <= autoEDEE5125_ae) || (autoEDEE5125_ai <= 0 && lv_i >= autoEDEE5125_ae) ) ; lv_i += autoEDEE5125_ai ) {
            UnitCreate(1, "PhotonBarrage", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), (UnitGetFacing(lv_ship) + IntToFixed(lv_i)));
            UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
            UnitSetCustomValue(UnitLastCreated(), 8, 2.0);
            gf_RegisterPhysics(UnitLastCreated());
            gf_PhysicsApplyForcePolar(UnitLastCreated(), lv_force, (UnitGetFacing(lv_ship) + IntToFixed(lv_i)));
            gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
            gf_TimedLife(UnitLastCreated(), 5.0);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/86564808"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhotonBarrage_Init () {
    gt_PhotonBarrage = TriggerCreate("gt_PhotonBarrage_Func");
    TriggerAddEventUnitAbility(gt_PhotonBarrage, null, AbilityCommand("PhotonBarrage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reflective Shield
//--------------------------------------------------------------------------------------------------
bool gt_ReflectiveShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if (true) {
        UnitBehaviorAdd(lv_ship, "ReflectiveShield", lv_ship, 1);
        UnitAbilitySpend(EventUnit(), AbilityCommand("ReflectiveShield", 0), c_spendLocationAll);
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundShieldBoost", "Ref_Origin");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/A6760094"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReflectiveShield_Init () {
    gt_ReflectiveShield = TriggerCreate("gt_ReflectiveShield_Func");
    TriggerAddEventUnitAbility(gt_ReflectiveShield, null, AbilityCommand("ReflectiveShield", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Photon Rush
//--------------------------------------------------------------------------------------------------
bool gt_PhotonRush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    fixed lv_facing;
    fixed lv_energy;

    // Variable Initialization
    lv_energy = 150.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if ((TechTreeUpgradeCount(EventPlayer(), "CorvettePhotonRush", c_techCountCompleteOnly) == 1)) {
        lv_energy *= 0.5;
    }
    else {
    }
    if ((gf_useEnergy(lv_energy, lv_ship) == true)) {
        UnitBehaviorAdd(lv_ship, "PhotonRush", lv_ship, 1);
        UnitBehaviorAdd(lv_ship, "IgnoreCollision", lv_ship, 1);
        UnitAbilitySpend(EventUnit(), AbilityCommand("PhotonRush", 0), c_spendLocationAll);
        lv_facing = AngleBetweenPoints(UnitGetPosition(lv_ship), EventUnitTargetPoint());
        gv_nav_angles[gf_navigatorToIndex(EventUnit())] = lv_facing;
        gv_nav_targets[gf_navigatorToIndex(EventUnit())] = lv_facing;
        libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
        Wait(0.3, c_timeGame);
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundShieldBoost", "Ref_Origin");
        gf_Rushtowardspoint(lv_ship, EventUnit(), PointWithOffsetPolar(UnitGetPosition(lv_ship), MinF(DistanceBetweenPoints(UnitGetPosition(lv_ship), EventUnitTargetPoint()), 10.0), lv_facing));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/36666E7B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhotonRush_Init () {
    gt_PhotonRush = TriggerCreate("gt_PhotonRush_Func");
    TriggerAddEventUnitAbility(gt_PhotonRush, null, AbilityCommand("PhotonRush", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quantum Bombardment
//--------------------------------------------------------------------------------------------------
bool gt_QuantumBombardment_Func (bool testConds, bool runActions) {
    int autoB002D8C8_ae;
    int autoB002D8C8_ai;

    // Variable Declarations
    unit lv_ship;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if ((gf_useEnergy(100.0, lv_ship) == true)) {
        UnitAbilitySpend(EventUnit(), AbilityCommand("QuantumBombardment", 0), c_spendLocationAll);
        autoB002D8C8_ae = 5;
        autoB002D8C8_ai = 1;
        lv_i = 1;
        for ( ; ( (autoB002D8C8_ai >= 0 && lv_i <= autoB002D8C8_ae) || (autoB002D8C8_ai <= 0 && lv_i >= autoB002D8C8_ae) ) ; lv_i += autoB002D8C8_ai ) {
            UnitCreate(1, "QuantumBombardment", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
            if ((UnitHasBehavior(EventUnit(), "ChronitonTorpedoes") == true)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor {250,79,5 2.000000}");
                UnitBehaviorAdd(UnitLastCreated(), "ChronitonTorpedoes", lv_ship, 1);
            }
            else {
            }
            UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
            UnitSetCustomValue(UnitLastCreated(), 8, 3.0);
            gf_RegisterPhysics(UnitLastCreated());
            gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
            gf_PhysicsApplyForcePolar(UnitLastCreated(), 5.0, UnitGetFacing(lv_ship));
            gf_TimedLife(UnitLastCreated(), 10.0);
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundQuantumBombardment", "Ref_Origin");
            if ((TechTreeUpgradeCount(EventPlayer(), "DestroyerQuantumLeech", c_techCountCompleteOnly) >= 1)) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 0,255,255");
            }
            else {
            }
            Wait(0.3, c_timeGame);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/3C8D161D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuantumBombardment_Init () {
    gt_QuantumBombardment = TriggerCreate("gt_QuantumBombardment_Func");
    TriggerAddEventUnitAbility(gt_QuantumBombardment, null, AbilityCommand("QuantumBombardment", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chroniton Torpedoes
//--------------------------------------------------------------------------------------------------
bool gt_ChronitonTorpedoes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if ((UnitHasBehavior(EventUnit(), "ChronitonTorpedoes") == true)) {
        UnitBehaviorRemove(EventUnit(), "ChronitonTorpedoes", 1);
        UnitBehaviorRemove(lv_ship, "ChronitonTorpedoes", 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "ChronitonTorpedoes", EventUnit(), 1);
        UnitBehaviorAdd(lv_ship, "ChronitonTorpedoes", lv_ship, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChronitonTorpedoes_Init () {
    gt_ChronitonTorpedoes = TriggerCreate("gt_ChronitonTorpedoes_Func");
    TriggerAddEventUnitAbility(gt_ChronitonTorpedoes, null, AbilityCommand("ChronitonTorpedoesOn", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_ChronitonTorpedoes, null, AbilityCommand("ChronitonTorpedoesOff", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Opposer Proximity Mine
//--------------------------------------------------------------------------------------------------
bool gt_OpposerProximityMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    unitgroup lv_mines;

    // Variable Initialization
    lv_mines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mines = UnitGroupFilterAlliance(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterBiological) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMassive), 0), 0), EventPlayer(), c_unitAllianceAlly, 0);
    if ((UnitGroupCount(lv_mines, c_unitCountAlive) > 75)) {
        UnitRemove(UnitGroupRandomUnit(lv_mines, c_unitCountAlive));
    }
    else {
    }
    lv_ship = gf_navigatorToShip(EventUnit());
    UnitCreate(1, "OpposerProximityMine", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
    UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
    UnitSetCustomValue(UnitLastCreated(), 8, 4.0);
    if ((gf_GetPlayerTeam(EventPlayer()) == 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "DestroyerRedTeam", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(UnitLastCreated(), "DestroyerBlueTeam", EventUnit(), 1);
    }
    libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundMineDrop", "Ref_Origin");
    gf_RegisterCollision(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpposerProximityMine_Init () {
    gt_OpposerProximityMine = TriggerCreate("gt_OpposerProximityMine_Func");
    TriggerAddEventUnitAbility(gt_OpposerProximityMine, null, AbilityCommand("LayOpposerProximityMine", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EMP Mine
//--------------------------------------------------------------------------------------------------
bool gt_EMPMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    unitgroup lv_mines;

    // Variable Initialization
    lv_mines = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mines = UnitGroupFilterAlliance(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterBiological) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMassive), 0), 0), EventPlayer(), c_unitAllianceAlly, 0);
    if ((UnitGroupCount(lv_mines, c_unitCountAlive) > 75)) {
        UnitRemove(UnitGroupRandomUnit(lv_mines, c_unitCountAlive));
    }
    else {
    }
    lv_ship = gf_navigatorToShip(EventUnit());
    UnitCreate(1, "EMPMine2", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
    UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
    UnitSetCustomValue(UnitLastCreated(), 8, 4.0);
    if ((gf_GetPlayerTeam(EventPlayer()) == 1)) {
        UnitBehaviorAdd(UnitLastCreated(), "DestroyerRedTeam", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(UnitLastCreated(), "DestroyerBlueTeam", EventUnit(), 1);
    }
    libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundMineDrop", "Ref_Origin");
    gf_RegisterCollision(UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EMPMine_Init () {
    gt_EMPMine = TriggerCreate("gt_EMPMine_Func");
    TriggerAddEventUnitAbility(gt_EMPMine, null, AbilityCommand("LayEMPMine", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Distress Beacon
//--------------------------------------------------------------------------------------------------
bool gt_DistressBeacon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterAlliance(UnitGroup("PointDefenseDrone", c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), c_unitAllianceAlly, 0), c_unitCountAlive) < 5)) {
        lv_ship = gf_navigatorToShip(EventUnit());
        UnitCreate(1, "PointDefenseDrone", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), UnitGetPosition(lv_ship), UnitGetFacing(lv_ship));
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
        UnitSetCustomValue(UnitLastCreated(), 8, 4.0);
        gf_RegisterCollision(UnitLastCreated());
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "SoundMineDrop", "Ref_Origin");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/A0C18D31"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DistressBeacon_Init () {
    gt_DistressBeacon = TriggerCreate("gt_DistressBeacon_Func");
    TriggerAddEventUnitAbility(gt_DistressBeacon, null, AbilityCommand("LayDistressBecon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Target
//--------------------------------------------------------------------------------------------------
bool gt_MineTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ChasingTarget") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ChasingTarget", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitGroupAdd(gv_collisiongroup_mines, EventPlayerEffectUsedUnit(c_effectUnitTarget));
    gf_RegisterPhysics(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    gf_RegisterCollision(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineTarget_Init () {
    gt_MineTarget = TriggerCreate("gt_MineTarget_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineTarget, c_playerAny, "MineTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Target Collision
//--------------------------------------------------------------------------------------------------
bool gt_MineTargetCollision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GuassRifle2", EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_missiles[gf_GetMissileidMissile(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)))].lv_hull_Damage);
    libNtve_gf_CreateActorAtPoint("LaserBatteryImpact", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)));
    UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineTargetCollision_Init () {
    gt_MineTargetCollision = TriggerCreate("gt_MineTargetCollision_Func");
    TriggerAddEventPlayerEffectUsed(gt_MineTargetCollision, c_playerAny, "MineTargetCollision");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nano-Hull Spray
//--------------------------------------------------------------------------------------------------
bool gt_NanoHullSpray_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_useEnergy(10.0, gf_navigatorToShip(EventUnit())) == true)) {
        lv_index = gf_navigatorToIndex(EventUnit());
        lv_ship = gv_nav_ships[lv_index];
        lv_angle = (UnitGetFacing(lv_ship) + RandomFixed(-10.0, 10.0));
        UnitCreate(1, "NanoHullSpray", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), PointWithOffsetPolar(UnitGetPosition(lv_ship), 1.0, UnitGetFacing(lv_ship)), lv_angle);
        UnitBehaviorAdd(UnitLastCreated(), "Collisiondetection", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "SprayKeepAlive", UnitLastCreated(), 1);
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
        UnitSetCustomValue(UnitLastCreated(), 8, 1.0);
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundMineLayerSprays", "Ref_Origin");
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
        gf_PhysicsApplyForcePolar(UnitLastCreated(), 10.0, lv_angle);
        gf_TimedLife(UnitLastCreated(), 3.0);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/C5501EE3"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NanoHullSpray_Init () {
    gt_NanoHullSpray = TriggerCreate("gt_NanoHullSpray_Func");
    TriggerAddEventUnitAbility(gt_NanoHullSpray, null, AbilityCommand("NanoHullSpray", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield Recharger
//--------------------------------------------------------------------------------------------------
bool gt_ShieldRecharger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_ship;
    fixed lv_angle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_useEnergy(10.0, gf_navigatorToShip(EventUnit())) == true)) {
        lv_index = gf_navigatorToIndex(EventUnit());
        lv_ship = gv_nav_ships[lv_index];
        lv_angle = (UnitGetFacing(lv_ship) + RandomFixed(-20.0, 20.0));
        UnitCreate(1, "ShieldRecharger", c_unitCreateIgnorePlacement, UnitGetOwner(lv_ship), PointWithOffsetPolar(UnitGetPosition(lv_ship), 1.0, UnitGetFacing(lv_ship)), lv_angle);
        UnitBehaviorAdd(UnitLastCreated(), "Collisiondetection", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "SprayKeepAlive", UnitLastCreated(), 1);
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(EventPlayer()));
        UnitSetCustomValue(UnitLastCreated(), 8, 1.0);
        libNtve_gf_AttachActorToUnit(lv_ship, "SoundMineLayerSprays", "Ref_Origin");
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForceCartesian(UnitLastCreated(), UnitGetCustomValue(lv_ship, 1), UnitGetCustomValue(lv_ship, 2));
        gf_PhysicsApplyForcePolar(UnitLastCreated(), 10.0, lv_angle);
        gf_TimedLife(UnitLastCreated(), 1.5);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/47D8AA52"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldRecharger_Init () {
    gt_ShieldRecharger = TriggerCreate("gt_ShieldRecharger_Func");
    TriggerAddEventUnitAbility(gt_ShieldRecharger, null, AbilityCommand("ShieldRecharger", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magnetic Pull
//--------------------------------------------------------------------------------------------------
bool gt_MagneticPull_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_radius;
    fixed lv_power;

    // Variable Initialization
    lv_radius = 6.0;
    lv_power = 210.0;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_useEnergy(100.0, gf_navigatorToShip(EventUnit())) == true)) {
        UnitAbilitySpend(EventUnit(), AbilityCommand("MagneticPull", 0), c_spendLocationAll);
        libNtve_gf_CreateActorAtPoint("MagneticPull", UnitGetPosition(gf_navigatorToShip(EventUnit())));
        libNtve_gf_AttachActorToUnit(gf_navigatorToShip(EventUnit()), "SoundMagneticPull", "Ref_Origin");
        if ((TechTreeUpgradeCount(EventPlayer(), "ChomperGraviticPulse", c_techCountCompleteOnly) > 0)) {
            lv_radius = 9.0;
            lv_power = 262.5;
        }
        else {
        }
        UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gf_navigatorToShip(EventUnit())), lv_radius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 5) != 0.0) && (UnitGroupLoopCurrent() != gf_navigatorToShip(EventUnit()))) {
                gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), lv_power, AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gf_navigatorToShip(EventUnit()))));
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/11D2BF81"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MagneticPull_Init () {
    gt_MagneticPull = TriggerCreate("gt_MagneticPull_Func");
    TriggerAddEventUnitAbility(gt_MagneticPull, null, AbilityCommand("MagneticPull", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phase Shift
//--------------------------------------------------------------------------------------------------
bool gt_PhaseShift_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(gf_navigatorToShip(EventUnit()), "PhaseShift", EventPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhaseShift_Init () {
    gt_PhaseShift = TriggerCreate("gt_PhaseShift_Func");
    TriggerAddEventUnitAbility(gt_PhaseShift, null, AbilityCommand("PhaseShiftInfiltrator", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Quantum Surge
//--------------------------------------------------------------------------------------------------
bool gt_QuantumSurge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    libNtve_gf_AttachActorToUnit(lv_ship, "QuantumSurge", "Ref_Origin");
    UnitCreateEffectUnit(lv_ship, "QuantumSurgeSearch", lv_ship);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QuantumSurge_Init () {
    gt_QuantumSurge = TriggerCreate("gt_QuantumSurge_Func");
    TriggerAddEventUnitAbility(gt_QuantumSurge, null, AbilityCommand("QuantumSurge", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Prism
//--------------------------------------------------------------------------------------------------
bool gt_ForcePrism_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if ((gf_useEnergy(50.0, lv_ship) == true)) {
        UnitBehaviorAdd(lv_ship, "ForcePrism", lv_ship, 1);
        UnitBehaviorAdd(EventUnit(), "ForcePrismDummy", EventUnit(), 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcePrism_Init () {
    gt_ForcePrism = TriggerCreate("gt_ForcePrism_Func");
    TriggerAddEventUnitAbility(gt_ForcePrism, null, AbilityCommand("ForcePrism", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Prism (Off)
//--------------------------------------------------------------------------------------------------
bool gt_ForcePrismOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    UnitBehaviorRemove(lv_ship, "ForcePrism", 1);
    UnitBehaviorRemove(EventUnit(), "ForcePrismDummy", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForcePrismOff_Init () {
    gt_ForcePrismOff = TriggerCreate("gt_ForcePrismOff_Func");
    TriggerAddEventUnitAbility(gt_ForcePrismOff, null, AbilityCommand("ForcePrismOff", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plasma Automaton
//--------------------------------------------------------------------------------------------------
bool gt_PlasmaAutomaton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ship = gf_navigatorToShip(EventUnit());
    if ((DistanceBetweenPoints(UnitGetPosition(lv_ship), EventUnitTargetPoint()) <= 8.0)) {
        if ((gf_useEnergy(300.0, lv_ship) == true)) {
            UnitCreateEffectPoint(lv_ship, "PointDefenseDroneReleaseCreateUnit", EventUnitTargetPoint());
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/6200F1B1"));
        }
    }
    else {
        UnitAbilityReset(EventUnit(), AbilityCommand("PlasmaAutomaton", 0), c_spendLocationAll);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/50506C84"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlasmaAutomaton_Init () {
    gt_PlasmaAutomaton = TriggerCreate("gt_PlasmaAutomaton_Func");
    TriggerAddEventUnitAbility(gt_PlasmaAutomaton, null, AbilityCommand("PlasmaAutomaton", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plasma Automaton (Firing)
//--------------------------------------------------------------------------------------------------
bool gt_PlasmaAutomatonFiring_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent) >= 5.0)) {
        UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent) - 5.0));
        UnitCreate(1, "AutomatonProjectile", c_unitCreateIgnorePlacement, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))));
        UnitBehaviorAdd(UnitLastCreated(), "Collisiondetection", UnitLastCreated(), 1);
        UnitSetCustomValue(UnitLastCreated(), 7, IntToFixed(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
        UnitSetCustomValue(UnitLastCreated(), 8, 7.0);
        gf_RegisterPhysics(UnitLastCreated());
        gf_PhysicsApplyForcePolar(UnitLastCreated(), 18.0, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))));
        gf_TimedLife(UnitLastCreated(), 3.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlasmaAutomatonFiring_Init () {
    gt_PlasmaAutomatonFiring = TriggerCreate("gt_PlasmaAutomatonFiring_Func");
    TriggerAddEventPlayerEffectUsed(gt_PlasmaAutomatonFiring, c_playerAny, "PlasmaAutomatonTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plasma Automaton (Register Collision)
//--------------------------------------------------------------------------------------------------
bool gt_PlasmaAutomatonRegisterCollision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "PlasmaAutomaton"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RegisterCollision(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlasmaAutomatonRegisterCollision_Init () {
    gt_PlasmaAutomatonRegisterCollision = TriggerCreate("gt_PlasmaAutomatonRegisterCollision_Func");
    TriggerAddEventUnitCreated(gt_PlasmaAutomatonRegisterCollision, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Collision Detection
//--------------------------------------------------------------------------------------------------
bool gt_CollisionDetection_Func (bool testConds, bool runActions) {
    unitgroup auto0B6D4953_g;
    int auto0B6D4953_u;
    string auto503637CE_val;
    string auto54437BE6_val;
    playergroup auto9A8C149A_g;
    int auto9A8C149A_p;
    int auto4C269BFD_n;
    int auto4C269BFD_i;
    string auto5727D222_val;
    string auto88500D40_val;
    unitgroup auto1E6326DA_g;
    int auto1E6326DA_u;
    unitgroup auto5F80CFE9_g;
    int auto5F80CFE9_u;

    // Variable Declarations
    int lv_a;
    int lv_i;
    fixed lv_dmg;
    fixed lv_angle;
    unit lv_ship;
    unit lv_explosion_target;
    int lv_side;
    fixed lv_debris_chance;
    fixed lv_fire_chance;
    point lv_rpoint;
    int lv_random_floor;
    unitgroup lv_temp_group;
    fixed lv_green;
    fixed lv_red;
    fixed lv_facing;
    bool lv_dontkill;
    int lv_index;
    fixed lv_shield_reduction;
    fixed lv_shield_ratio;
    fixed lv_shield_damage;
    fixed lv_hull_damage;
    unit lv_closestConsole;
    unit lv_target;
    int lv_count;
    unit lv_energy_console;
    bool lv_pierce;
    fixed lv_energy;
    const fixed lv_forceprismrange = 5.5;
    fixed lv_bleedthroughstart;
    fixed lv_bleedthroughdamage;

    // Variable Initialization
    lv_dmg = 1.0;
    lv_debris_chance = 0.1;
    lv_fire_chance = 0.1;
    lv_temp_group = UnitGroupEmpty();
    lv_energy = 150.0;
    lv_bleedthroughstart = 30.0;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_count += 1;
        gv_lastCollisionDetection = GameGetMissionTime();
        UIDisplayMessage(gv_debugplayers, c_messageAreaError, StringExternal("Param/Value/8BEEB429"));
        if ((gv_debug == true)) {
        }
        else {
        }
        Wait(0.0, c_timeGame);
        lv_temp_group = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMassive), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        gv_lastCollisionDetection = GameGetMissionTime();
        UnitGroupAddUnitGroup(lv_temp_group, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_temp_group, gv_collisiongroup_mines);
        UnitGroupLoopBegin(lv_temp_group);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_dmg = 1.0;
            auto0B6D4953_g = gv_collisiongroup;
            auto0B6D4953_u = 1;
            for ( ; auto0B6D4953_u <= UnitGroupCount(auto0B6D4953_g, c_unitCountAll) ; auto0B6D4953_u += BoolToInt(lv_ship == UnitGroupUnit(auto0B6D4953_g, auto0B6D4953_u)) ) {
                lv_ship = UnitGroupUnit(auto0B6D4953_g, auto0B6D4953_u);
                lv_dontkill = false;
                lv_pierce = false;
                if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_ship)) < (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(lv_ship, c_unitPropRadius, c_unitPropCurrent))) && (UnitHasBehavior(lv_ship, "PhaseShift") == false) && (UnitHasBehavior(lv_ship, "IgnoreCollision") == false)) {
                    auto503637CE_val = UnitGetType(UnitGroupLoopCurrent());
                    if (auto503637CE_val == "PowerTransfer") {
                        if ((UnitGetType(lv_ship) != "Battlecruiser")) {
                            lv_energy = 150.0;
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserIonicTransfer", c_techCountCompleteOnly) == 1)) {
                                UnitBehaviorAdd(lv_ship, "IonicTransfer", UnitGroupLoopCurrent(), 1);
                            }
                            else {
                                if ((TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserNaniteTransfer", c_techCountCompleteOnly) == 1)) {
                                    lv_energy = 250.0;
                                    UnitBehaviorAdd(lv_ship, "NaniteTransfer", UnitGroupLoopCurrent(), 1);
                                }
                                else {
                                    if ((TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserPlasmaTransfer", c_techCountCompleteOnly) == 1)) {
                                        lv_energy = 350.0;
                                        UnitBehaviorAddPlayer(lv_ship, "PlasmaTransfer", UnitGetOwner(UnitGroupLoopCurrent()), 1);
                                    }
                                    else {
                                    }
                                }
                            }
                            if ((TechTreeUpgradeCount(UnitGetOwner(lv_ship), "TierOffensive2", c_techCountCompleteOnly) == 1)) {
                                lv_energy *= 2.0;
                            }
                            else {
                            }
                            UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) + lv_energy));
                            libNtve_gf_AttachActorToUnit(lv_ship, "SoundPowerTransfer", "Ref_Origin");
                            UnitKill(UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    else if (auto503637CE_val == "NanoHullSpray") {
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "SprayKeepAlive") == false)) {
                            UnitSetPropertyFixed(lv_ship, c_unitPropLife, (UnitGetPropertyFixed(lv_ship, c_unitPropLife, c_unitPropCurrent) + 10.0));
                            libNtve_gf_AttachActorToUnit(lv_ship, "SoundHullRepairs", "Ref_Origin");
                            UnitKill(UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    else if (auto503637CE_val == "ShieldRecharger") {
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "SprayKeepAlive") == false)) {
                            UnitSetPropertyFixed(lv_ship, c_unitPropShields, (UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent) + 15.0));
                            libNtve_gf_AttachActorToUnit(lv_ship, "SoundShieldRechargerImpact", "Ref_Origin");
                            UnitKill(UnitGroupLoopCurrent());
                        }
                        else {
                        }
                    }
                    else {
                        if ((gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())) != gf_GetPlayerTeam(UnitGetOwner(lv_ship)))) {
                            if ((UnitHasBehavior(lv_ship, "ReflectiveShield") == true) && ((UnitGetType(UnitGroupLoopCurrent()) != "PiranhaLightMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "ScorpionLightMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "WaspLightMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "PredatorHeavyMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "SabretoothHeavyMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "HellfireHeavyMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "MerculiteHeavyMissile") && (UnitGetType(UnitGroupLoopCurrent()) != "Yamato"))) {
                                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "RecentlyBounced") == false)) {
                                    lv_red = AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_ship));
                                    lv_green = UnitGetFacing(UnitGroupLoopCurrent());
                                    lv_facing = ((2.0 * lv_red) - (lv_green + 180.0));
                                    UnitSetFacing(UnitGroupLoopCurrent(), lv_facing, 0.0);
                                    UnitSetCustomValue(UnitGroupLoopCurrent(), 1, 0.0);
                                    UnitSetCustomValue(UnitGroupLoopCurrent(), 2, 0.0);
                                    gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), 20.0, lv_facing);
                                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "RecentlyBounced", UnitGroupLoopCurrent(), 1);
                                }
                                else {
                                }
                            }
                            else {
                                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "ScorpionLightMissileSplit") == true)) {
                                    gf_SplitScorpionLightMissile(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()));
                                }
                                else {
                                }
                                if ((UnitGetType(UnitGroupLoopCurrent()) == "SingleBurst") && ((UnitBehaviorCount(lv_ship, "PlasmaCharge") < 20) || (TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "TierOffensive2", c_techCountCompleteOnly) == 1))) {
                                    UnitBehaviorAdd(lv_ship, "PlasmaCharge", UnitGroupLoopCurrent(), 1);
                                }
                                else {
                                }
                                lv_angle = AngleBetweenPoints(UnitGetPosition(lv_ship), UnitGetPosition(UnitGroupLoopCurrent())) - UnitGetFacing(lv_ship);
                                if( lv_angle > 180.0){lv_angle -= 360.0;}
                                if( lv_angle < -180.0 ){lv_angle += 360.0;}
                                if( lv_angle > -45 && lv_angle < 45 ){
                                //Front 90
                                  //TriggerDebugOutput(1, StringToText("Front"), true);
                                  lv_side = 0;
                                }else if( lv_angle > 45 && lv_angle < 160 ){
                                //Left 115
                                  //TriggerDebugOutput(1, StringToText("Left"), true);
                                  lv_side = 1;
                                }else if( lv_angle > -160 && lv_angle < -45 ){
                                //Right 115
                                  //TriggerDebugOutput(1, StringToText("Right"), true);
                                  lv_side = 2;
                                }else if( lv_angle > 160 || lv_angle < -160 ){
                                //Behind 40
                                  //TriggerDebugOutput(1, StringToText("Behind"), true);
                                  lv_side = 3;
                                }
                                auto54437BE6_val = UnitGetType(UnitGroupLoopCurrent());
                                if (auto54437BE6_val == "ScorpionLightMissile") {
                                    if ((UnitGetType(lv_ship) != "Battlecruiser")) {
                                        if ((gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent())) != -1)) {
                                            if ((gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_shield_Damage == -1.0)) {
                                                lv_shield_damage = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                                lv_shield_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                            }
                                            else {
                                                lv_shield_damage = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_shield_Damage;
                                                if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsRegen, c_unitPropCurrent) != -1.0)) {
                                                    lv_shield_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsRegen, c_unitPropCurrent);
                                                }
                                                else {
                                                }
                                            }
                                            if ((UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent) >= (lv_shield_damage * (1.0 - (0.08 * IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserHardenedShielding", c_techCountCompleteOnly))))))) {
                                                if(UnitGetType(lv_ship) == "Battlecruiser"){
                                                    lv_shield_reduction = 0.08*IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserHardenedShielding", c_techCountCompleteOnly));
                                                }
                                                lv_dmg = lv_shield_damage * (1.0 - lv_shield_reduction);
                                            }
                                            else {
                                                lv_hull_damage = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                                lv_hull_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                                if(UnitGetType(lv_ship) == "Battlecruiser"){
                                                    lv_shield_reduction = 0.08*IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "HardenedShielding", c_techCountCompleteOnly));
                                                }
                                                lv_shield_ratio = UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent) / (lv_shield_damage * (1.0 - lv_shield_reduction));
                                                lv_dmg = (1.0 - lv_shield_ratio) * lv_hull_damage + lv_shield_damage*lv_shield_ratio;
                                            }
                                        }
                                        else {
                                            TriggerDebugOutput(1, (StringExternal("Param/Value/53AE7F47") + UnitTypeGetName(UnitGetType(UnitGroupLoopCurrent()))), true);
                                        }
                                    }
                                    else {
                                        lv_dontkill = true;
                                    }
                                }
                                else if (auto54437BE6_val == "EMP") {
                                    if ((UnitGetType(lv_ship) != "Battlecruiser")) {
                                        lv_dmg = 0.0;
                                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "TierOffensive1", c_techCountCompleteOnly) == 1)) {
                                            lv_dmg = 30.0;
                                        }
                                        else {
                                        }
                                        if ((gf_shipToIndex(lv_ship) == -1)) {
                                            UnitBehaviorAdd(lv_ship, "EMPFornonnavigatedships", UnitGroupLoopCurrent(), 1);
                                        }
                                        else {
                                            if ((TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "TierOffensive1", c_techCountCompleteOnly) == 1)) {
                                                gv_nav_speed[gf_shipToIndex(lv_ship)] = MaxF((gv_nav_speed[gf_shipToIndex(lv_ship)] - 0.7), 0.0);
                                            }
                                            else {
                                                gv_nav_speed[gf_shipToIndex(lv_ship)] = MaxF((gv_nav_speed[gf_shipToIndex(lv_ship)] - 0.4), 0.0);
                                            }
                                            UnitBehaviorAdd(gf_shipToNavigator(lv_ship), "EMPFornavigatedships", UnitGroupLoopCurrent(), 1);
                                            if ((UnitGetType(lv_ship) == "Wraith")) {
                                                UnitBehaviorAdd(gf_shipToNavigator(lv_ship), "Sideboostblock", UnitGroupLoopCurrent(), 1);
                                            }
                                            else {
                                                if ((UnitGetType(lv_ship) == "HelsAngelFighter")) {
                                                    UnitBehaviorAdd(gf_shipToNavigator(lv_ship), "Sideboostblock", UnitGroupLoopCurrent(), 1);
                                                }
                                                else {
                                                }
                                            }
                                        }
                                        UnitCreateEffectUnit(lv_ship, "EMPEffect", lv_ship);
                                    }
                                    else {
                                        lv_dontkill = true;
                                    }
                                }
                                else if (auto54437BE6_val == "QuantumBombardment") {
                                    lv_dmg = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                    lv_dmg += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                    if ((UnitGetType(lv_ship) == "Battlecruiser")) {
                                        auto9A8C149A_g = gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))]; 
                                        auto9A8C149A_p = 1;
                                        for ( ; auto9A8C149A_p <= PlayerGroupCount(auto9A8C149A_g) ; auto9A8C149A_p += BoolToInt(lv_a == PlayerGroupPlayer(auto9A8C149A_g, auto9A8C149A_p)) ) {
                                            lv_a = PlayerGroupPlayer(auto9A8C149A_g, auto9A8C149A_p);
                                            if ((libNtve_gf_UnitIsHidden(gv_pilots[lv_a]) == false)) {
                                                UnitBehaviorAddPlayer(gv_pilots[lv_a], "SeismicDisturbance", UnitGetOwner(UnitGroupLoopCurrent()), 1);
                                                CameraShakeStart(lv_a, c_cameraPositionEye, c_cameraDirectionXYZ, 2.5, 2.0, 100.0, 2.0);
                                            }
                                            else {
                                            }
                                        }
                                        if ((TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "DestroyerQuantumLeech", c_techCountCompleteOnly) == 1)) {
                                            UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) - (200.0 + (TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "DestroyerQuantumBombardment", c_techCountCompleteOnly) * 150))));
                                        }
                                        else {
                                        }
                                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "ChronitonTorpedoes") == true)) {
                                            lv_pierce = true;
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                    }
                                }
                                else if (auto54437BE6_val == "PlasmaCannon") {
                                    lv_dmg = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                    lv_dmg += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                    if ((TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "WraithPlasmaLeech", c_techCountCompleteOnly) == 1)) {
                                        UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) - 10.0));
                                    }
                                    else {
                                    }
                                }
                                else if (auto54437BE6_val == "EMPMine2") {
                                    lv_dmg = gv_missiles[15].lv_hull_Damage;
                                    lv_hull_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                    if ((UnitGetType(lv_ship) != "Battlecruiser")) {
                                        if ((gf_shipToIndex(lv_ship) == -1)) {
                                            UnitBehaviorAdd(lv_ship, "EMPFornonnavigatedships", UnitGroupLoopCurrent(), 1);
                                        }
                                        else {
                                            gv_nav_speed[gf_shipToIndex(lv_ship)] = 0.0;
                                        }
                                        UnitCreateEffectUnit(lv_ship, "EMPEffect", lv_ship);
                                    }
                                    else {
                                        gv_nav_speed[gf_shipToIndex(lv_ship)] = (gv_nav_speed[gf_shipToIndex(lv_ship)] / 2.0);
                                    }
                                }
                                else if (auto54437BE6_val == "CounterMissile") {
                                    lv_dontkill = true;
                                }
                                else if (auto54437BE6_val == "ShapeApple") {
                                    lv_closestConsole = gf_shipToNavigator(gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))]);
                                    gf_DisplayDirectiveMessage(StringExternal("Param/Value/668DA608"), gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], 3.0);
                                    if ((UnitGetType(lv_ship) == "Battlecruiser")) {
                                        gf_DisplayDirectiveMessage(StringExternal("Param/Value/F0AC69B2"), gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], 3.0);
                                    }
                                    else {
                                        gf_DisplayDirectiveMessage(StringExternal("Param/Value/5E6D37D2"), PlayerGroupSingle(UnitGetOwner(gf_shipToNavigator(lv_ship))), 3.0);
                                    }
                                    UnitBehaviorRemove(lv_closestConsole, "UsingTractorBeam", 1);
                                    UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], "TractorBeamDestroyBeam", gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], 1);
                                    UnitBehaviorAdd(lv_closestConsole, "TractorBeamLock", gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], 1);
                                    UnitBehaviorRemove(lv_closestConsole, "TractorbeamPull", 15);
                                    UnitBehaviorAdd(lv_closestConsole, "TractorbeamPull", gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], 2);
                                    UnitCreateEffectUnit(gv_battlecruisers[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))], "TractorBeamLocked", lv_ship);
                                    gv_tractor_locks[gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent()))] = lv_ship;
                                }
                                else if (auto54437BE6_val == "PredatorHeavyMissile") {
                                    lv_dmg = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                    lv_dmg += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                    lv_random_floor = RandomInt(0, 1);
                                    while (true) {
                                        lv_rpoint = RegionRandomPoint(gv_bCareas[gf_GetPlayerTeam(UnitGetOwner(lv_ship))][lv_random_floor][lv_side]);
                                        if (((WorldHeight(c_heightMapGround, lv_rpoint) >= 1.6) && (WorldHeight(c_heightMapGround, lv_rpoint) <= 2.1)) && (RegionContainsPoint(RegionFromId(62), lv_rpoint) == false) && (RegionContainsPoint(RegionFromId(3), lv_rpoint) == false)) {
                                            break;
                                        }
                                        else {
                                        }
                                    }
                                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TrackingBeacon", 0, gf_GetPlayerTeamAI(UnitGetOwner(UnitGroupLoopCurrent())), lv_rpoint);
                                    libNtve_gf_ShareVisionofUnit(gv_battlecruisers[(3 - gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())))], true, gf_GetPlayerTeamAI(UnitGetOwner(UnitGroupLoopCurrent())));
                                    UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], c_messageAreaDebug, StringExternal("Param/Value/78126B32"));
                                }
                                else if (auto54437BE6_val == "HellfireHeavyMissile") {
                                    lv_dmg = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                    lv_dmg += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                    lv_random_floor = RandomInt(0, 1);
                                    auto4C269BFD_n = 3;
                                    for (auto4C269BFD_i = 1; auto4C269BFD_i <= auto4C269BFD_n; auto4C269BFD_i += 1) {
                                        while (true) {
                                            lv_rpoint = RegionRandomPoint(gv_bCareas[gf_GetPlayerTeam(UnitGetOwner(lv_ship))][lv_random_floor][lv_side]);
                                            if (((WorldHeight(c_heightMapGround, lv_rpoint) >= 1.6) && (WorldHeight(c_heightMapGround, lv_rpoint) <= 2.1)) && (RegionContainsPoint(RegionFromId(62), lv_rpoint) == false) && (RegionContainsPoint(RegionFromId(3), lv_rpoint) == false)) {
                                                break;
                                            }
                                            else {
                                            }
                                        }
                                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HullFire", 0, gf_GetPlayerTeamAI(UnitGetOwner(UnitGroupLoopCurrent())), lv_rpoint);
                                    }
                                }
                                else {
                                    if ((gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent())) != -1)) {
                                        if ((gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_shield_Damage == -1.0)) {
                                            lv_shield_damage = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                            lv_shield_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                        }
                                        else {
                                            lv_shield_damage = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_shield_Damage;
                                            if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsRegen, c_unitPropCurrent) != -1.0)) {
                                                lv_shield_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsRegen, c_unitPropCurrent);
                                            }
                                            else {
                                            }
                                        }
                                        if ((UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent) >= (lv_shield_damage * (1.0 - (0.08 * IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserHardenedShielding", c_techCountCompleteOnly))))))) {
                                            if(UnitGetType(lv_ship) == "Battlecruiser"){
                                                lv_shield_reduction = 0.08*IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "BattlecruiserHardenedShielding", c_techCountCompleteOnly));
                                            }
                                            lv_dmg = lv_shield_damage * (1.0 - lv_shield_reduction);
                                        }
                                        else {
                                            lv_hull_damage = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_hull_Damage;
                                            lv_hull_damage += UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergy, c_unitPropCurrent);
                                            if(UnitGetType(lv_ship) == "Battlecruiser"){
                                                lv_shield_reduction = 0.08*IntToFixed(TechTreeUpgradeCount(UnitGetOwner(lv_ship), "HardenedShielding", c_techCountCompleteOnly));
                                            }
                                            lv_shield_ratio = UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent) / (lv_shield_damage * (1.0 - lv_shield_reduction));
                                            lv_dmg = (1.0 - lv_shield_ratio) * lv_hull_damage + lv_shield_damage*lv_shield_ratio;
                                        }
                                    }
                                    else {
                                        TriggerDebugOutput(1, (StringExternal("Param/Value/2753C082") + UnitTypeGetName(UnitGetType(UnitGroupLoopCurrent()))), true);
                                    }
                                }
                                if ((lv_dontkill == false)) {
                                    lv_dmg *= (1.0 + (0.01 * UnitBehaviorCount(lv_ship, "PlasmaCharge")));
                                    if ((UnitGetType(UnitGroupLoopCurrent()) == "PentaBurst") && (UnitBehaviorCount(lv_ship, "PlasmaCharge") > 0)) {
                                        UnitBehaviorRemove(lv_ship, "PlasmaCharge", 1);
                                        lv_dmg *= 1.25;
                                    }
                                    else {
                                    }
                                    if ((gv_debug == true)) {
                                        TriggerDebugOutput(1, StringExternal("Param/Value/8D84871F"), true);
                                    }
                                    else {
                                    }
                                    if ((UnitHasBehavior(lv_ship, "IronCurtain") == true)) {
                                        lv_dmg *= 0.1;
                                        UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) + (lv_dmg * 50.0)));
                                    }
                                    else {
                                    }
                                    if ((lv_pierce == true)) {
                                        lv_bleedthroughdamage = lv_dmg;
                                    }
                                    else {
                                        lv_bleedthroughdamage = (lv_dmg * (libNtve_gf_ArithmeticRealClamp((((-100.0 / lv_bleedthroughstart) * UnitGetPropertyFixed(lv_ship, c_unitPropShieldsPercent, c_unitPropCurrent)) + 100.0), 0.0, 100.0) / 100.0));
                                    }
                                    UnitDamage(UnitGroupLoopCurrent(), "DummyAttack2", lv_ship, (lv_dmg - lv_bleedthroughdamage));
                                    UnitSetPropertyFixed(lv_ship, c_unitPropLife, (UnitGetPropertyFixed(lv_ship, c_unitPropLife, c_unitPropCurrent) - lv_bleedthroughdamage));
                                    UnitKill(UnitGroupLoopCurrent());
                                    UnitGroupRemove(gv_collisiongroup_mines, UnitGroupLoopCurrent());
                                    if ((UnitGetType(lv_ship) == "Battlecruiser")) {
                                        lv_index = gf_shipToIndex(lv_ship);
                                        auto5727D222_val = UnitGetType(UnitGroupLoopCurrent());
                                        if (auto5727D222_val == "SabretoothHeavyMissile") {
                                            UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], c_messageAreaDebug, StringExternal("Param/Value/381D75DB"));
                                            UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) - 1000.0));
                                            gv_energy_core_stability[lv_index] = (gv_energy_core_stability[lv_index] * 0.98);
                                        }
                                        else if (auto5727D222_val == "Yamato") {
                                            gv_energy_core_stability[lv_index] = (gv_energy_core_stability[lv_index] * 0.85);
                                        }
                                        else if (auto5727D222_val == "WaspLightMissile") {
                                            UnitSetPropertyFixed(lv_ship, c_unitPropEnergy, (UnitGetPropertyFixed(lv_ship, c_unitPropEnergy, c_unitPropCurrent) - 200.0));
                                            gv_energy_engine[lv_index] += RandomInt(1,5)*(20*RandomInt(1,2)-30);
                                            gv_energy_shields[lv_index] += RandomInt(1,5)*(20*RandomInt(1,2)-30);
                                            gv_energy_weapons[lv_index] += RandomInt(1,5)*(20*RandomInt(1,2)-30);
                                            if(gv_energy_engine[lv_index] < 0){
                                                gv_energy_engine[lv_index] = 0;
                                            }
                                            if(gv_energy_shields[lv_index] < 0){
                                                gv_energy_shields[lv_index] = 0;
                                            }
                                            if(gv_energy_weapons[lv_index] < -20){
                                                gv_energy_weapons[lv_index] = -20;
                                            }
                                            UIDisplayMessage(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], c_messageAreaDebug, StringExternal("Param/Value/F105F29D"));
                                        }
                                        else {
                                        }
                                    }
                                    else {
                                    }
                                    libNtve_gf_CreateActorAtPoint("SoundExplosion", UnitGetPosition(lv_ship));
                                    auto88500D40_val = UnitGetType(UnitGroupLoopCurrent());
                                    if (auto88500D40_val == "ATALaserBatteryLMWeapon") {
                                        libNtve_gf_CreateActorAtPoint("LaserBatteryImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                                    }
                                    else if (auto88500D40_val == "Yamato") {
                                        libNtve_gf_CreateActorAtPoint("YamatoImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                                    }
                                    else {
                                        if (((UnitGetType(UnitGroupLoopCurrent()) == "PiranhaLightMissile") || (UnitGetType(UnitGroupLoopCurrent()) == "ScorpionLightMissile") || (UnitGetType(UnitGroupLoopCurrent()) == "WaspLightMissile"))) {
                                            libNtve_gf_CreateActorAtPoint("LightMissileImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                                        }
                                        else {
                                            if (((UnitGetType(UnitGroupLoopCurrent()) == "PredatorHeavyMissile") || (UnitGetType(UnitGroupLoopCurrent()) == "SabretoothHeavyMissile") || (UnitGetType(UnitGroupLoopCurrent()) == "HellfireHeavyMissile") || (UnitGetType(UnitGroupLoopCurrent()) == "MerculiteHeavyMissile"))) {
                                                libNtve_gf_CreateActorAtPoint("HeavyMissileImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                                            }
                                            else {
                                                libNtve_gf_CreateActorAtPoint("LaserBatteryImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                                            }
                                        }
                                    }
                                    if ((UnitGetPropertyFixed(lv_ship, c_unitPropShields, c_unitPropCurrent) > 0.0)) {
                                    }
                                    else {
                                        if ((UnitGetType(lv_ship) == "Battlecruiser")) {
                                            lv_energy_console = UnitGroupRandomUnit(UnitGroup("EnergyConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                                            if ((UnitHasBehavior(lv_energy_console, "ShieldBoost") == false)) {
                                                UnitBehaviorAdd(lv_ship, "ShieldOverwhelmed", UnitGroupLoopCurrent(), 1);
                                                UnitBehaviorAdd(UnitGroupRandomUnit(UnitGroup("EnergyConsole", c_playerAny, gv_battlecruiserArea[gf_GetPlayerTeam(UnitGetOwner(lv_ship))], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll), "ShieldOverwhelmed", UnitGroupLoopCurrent(), 1);
                                                if ((UnitHasBehavior(lv_ship, "ShieldOverwhelmed") == false)) {
                                                    libNtve_gf_AttachActorToUnit(lv_ship, "SoundShieldBoost2", "Ref_Origin");
                                                }
                                                else {
                                                }
                                            }
                                            else {
                                            }
                                            lv_debris_chance = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_debris_chance;
                                            lv_debris_chance += (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyMinerals, c_unitPropCurrent) / 100.0);
                                            lv_fire_chance = gv_missiles[gf_GetMissileidMissile(UnitGetType(UnitGroupLoopCurrent()))].lv_fire_chance;
                                            lv_fire_chance += (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropBountyMinerals, c_unitPropCurrent) / 200.0);
                                            if (((RandomInt(1, 100) >= 1) && (RandomInt(1, 100) <= (100.0 * lv_debris_chance)))) {
                                                PlayerGroupLoopBegin(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))]);
                                                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                                    if ((RandomInt(1, 2) == 1)) {
                                                        CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionXYZ, (lv_dmg / 1000.0), 1.0, 100.0, 0.7);
                                                    }
                                                    else {
                                                    }
                                                }
                                                PlayerGroupLoopEnd();
                                                lv_random_floor = RandomInt(0, 1);
                                                while (true) {
                                                    lv_rpoint = RegionRandomPoint(gv_bCareas[gf_GetPlayerTeam(UnitGetOwner(lv_ship))][lv_random_floor][lv_side]);
                                                    if (((WorldHeight(c_heightMapGround, lv_rpoint) >= 1.6) && (WorldHeight(c_heightMapGround, lv_rpoint) <= 2.1))) {
                                                        break;
                                                    }
                                                    else {
                                                    }
                                                }
                                                libNtve_gf_CreateExplosionAtPoint(0, 0, lv_rpoint);
                                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScrapHuge", c_unitCreateIgnorePlacement, 0, lv_rpoint);
                                                auto1E6326DA_g = UnitGroup(null, c_playerAny, RegionCircle(lv_rpoint, 3.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                                auto1E6326DA_u = 1;
                                                for ( ; auto1E6326DA_u <= UnitGroupCount(auto1E6326DA_g, c_unitCountAll) ; auto1E6326DA_u += BoolToInt(lv_explosion_target == UnitGroupUnit(auto1E6326DA_g, auto1E6326DA_u)) ) {
                                                    lv_explosion_target = UnitGroupUnit(auto1E6326DA_g, auto1E6326DA_u);
                                                    UnitCreateEffectUnit(lv_explosion_target, "ShipExplosionSwitch", lv_explosion_target);
                                                }
                                            }
                                            else {
                                            }
                                            if (((RandomInt(1, 100) >= 1) && (RandomInt(1, 100) <= (100.0 * lv_fire_chance)))) {
                                                PlayerGroupLoopBegin(gv_players_inside[gf_GetPlayerTeam(UnitGetOwner(lv_ship))]);
                                                for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                                                    if ((RandomInt(1, 2) == 1)) {
                                                        CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionXYZ, (lv_dmg / 1000.0), 1.0, 100.0, 0.7);
                                                    }
                                                    else {
                                                    }
                                                }
                                                PlayerGroupLoopEnd();
                                                lv_random_floor = RandomInt(0, 1);
                                                while (true) {
                                                    lv_rpoint = RegionRandomPoint(gv_bCareas[gf_GetPlayerTeam(UnitGetOwner(lv_ship))][lv_random_floor][lv_side]);
                                                    if (((WorldHeight(c_heightMapGround, lv_rpoint) >= 1.6) && (WorldHeight(c_heightMapGround, lv_rpoint) <= 2.1))) {
                                                        break;
                                                    }
                                                    else {
                                                    }
                                                }
                                                libNtve_gf_CreateExplosionAtPoint(0, 0, lv_rpoint);
                                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HullFire", c_unitCreateIgnorePlacement, 0, lv_rpoint);
                                                auto5F80CFE9_g = UnitGroup(null, c_playerAny, RegionCircle(lv_rpoint, 3.0), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                                                auto5F80CFE9_u = 1;
                                                for ( ; auto5F80CFE9_u <= UnitGroupCount(auto5F80CFE9_g, c_unitCountAll) ; auto5F80CFE9_u += BoolToInt(lv_explosion_target == UnitGroupUnit(auto5F80CFE9_g, auto5F80CFE9_u)) ) {
                                                    lv_explosion_target = UnitGroupUnit(auto5F80CFE9_g, auto5F80CFE9_u);
                                                    UnitCreateEffectUnit(lv_explosion_target, "ShipExplosionSwitch", lv_explosion_target);
                                                }
                                            }
                                            else {
                                            }
                                        }
                                        else {
                                        }
                                    }
                                    UnitRemove(UnitGroupLoopCurrent());
                                }
                                else {
                                    if ((gv_debug == true)) {
                                        TriggerDebugOutput(1, StringExternal("Param/Value/C51CEEB9"), true);
                                    }
                                    else {
                                    }
                                }
                            }
                            break;
                        }
                        else {
                        }
                    }
                }
                else {
                    if ((UnitHasBehavior(lv_ship, "ForcePrism") == true) && (UnitGetType(lv_ship) == "Subjugator") && (gf_GetPlayerTeam(UnitGetOwner(UnitGroupLoopCurrent())) != gf_GetPlayerTeam(UnitGetOwner(lv_ship))) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_ship)) <= lv_forceprismrange) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_ship)) > (lv_forceprismrange - 1.0))) {
                        UnitKill(UnitGroupLoopCurrent());
                    }
                    else {
                    }
                }
            }
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CollisionDetection_Init () {
    gt_CollisionDetection = TriggerCreate("gt_CollisionDetection_Func");
    TriggerAddEventTimeElapsed(gt_CollisionDetection, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Asteroid collision
//--------------------------------------------------------------------------------------------------
bool gt_Asteroidcollision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gf_GetMissileidMissile(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster))) != -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PhysicsApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitTarget), gv_missiles[gf_GetMissileidMissile(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)))].lv_hull_Damage, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget))));
    UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DummyAttack2", EventPlayerEffectUsedUnit(c_effectUnitTarget), (gv_missiles[gf_GetMissileidMissile(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)))].lv_hull_Damage / 2.0));
    libNtve_gf_CreateActorAtPoint("LaserBatteryImpact", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Asteroidcollision_Init () {
    gt_Asteroidcollision = TriggerCreate("gt_Asteroidcollision_Func");
    TriggerAddEventPlayerEffectUsed(gt_Asteroidcollision, c_playerAny, "CollisiondetectionDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decoy Flare collision
//--------------------------------------------------------------------------------------------------
bool gt_DecoyFlarecollision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DecoyFlarecollision_Init () {
    gt_DecoyFlarecollision = TriggerCreate("gt_DecoyFlarecollision_Func");
    TriggerAddEventPlayerEffectUsed(gt_DecoyFlarecollision, c_playerAny, "DecoyFlareMark");
}

//--------------------------------------------------------------------------------------------------
// Trigger: check col group
//--------------------------------------------------------------------------------------------------
bool gt_checkcolgroup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_temp_group;

    // Variable Initialization
    lv_temp_group = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, IntToText(UnitGroupCount(gv_collisiongroup, c_unitCountAll)), true);
    lv_temp_group = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, (1 << c_targetFilterBiological), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_temp_group, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_temp_group, gv_collisiongroup_mines);
    TriggerDebugOutput(1, IntToText(UnitGroupCount(lv_temp_group, c_unitCountAll)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_checkcolgroup_Init () {
    gt_checkcolgroup = TriggerCreate("gt_checkcolgroup_Func");
    TriggerAddEventChatMessage(gt_checkcolgroup, c_playerAny, "numcol", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: startRotate
//--------------------------------------------------------------------------------------------------
bool gt_startRotate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gf_shipToNavigator(gv_battlecruisers[1]), OrderTargetingPoint(AbilityCommand("moveNav", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
    UnitIssueOrder(gf_shipToNavigator(gv_battlecruisers[2]), OrderTargetingPoint(AbilityCommand("moveNav", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startRotate_Init () {
    gt_startRotate = TriggerCreate("gt_startRotate_Func");
    TriggerAddEventTimeElapsed(gt_startRotate, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Space Loop Disable
//--------------------------------------------------------------------------------------------------
bool gt_SpaceLoopDisable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplayDirectiveMessage(StringExternal("Param/Value/60D07AFE"), PlayerGroupAll(), 10.0);
    gv_loopturnedoff = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpaceLoopDisable_Init () {
    gt_SpaceLoopDisable = TriggerCreate("gt_SpaceLoopDisable_Func");
    TriggerAddEventTimer(gt_SpaceLoopDisable, gv_edgeDisableTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Space Loop Left
//--------------------------------------------------------------------------------------------------
bool gt_SpaceLoopLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "ShapePineapple"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonRush") == true)) {
        UnitBehaviorRemove(EventUnit(), "PhotonRush", 1);
    }
    else {
    }
    if (((gv_loopturnedoff == false) || (gf_shipToIndex(EventUnit()) == -1))) {
        UnitSetPosition(EventUnit(), Point(246.0, PointGetY(UnitGetPosition(EventUnit()))), false);
    }
    else {
        UnitSetPosition(EventUnit(), Point(8.2, PointGetY(UnitGetPosition(EventUnit()))), false);
    }
    if ((UnitGetOwner(EventUnit()) != 0) && (gf_shipToIndex(EventUnit()) != -1) && (gv_loopturnedoff == false)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), false, false);
        UnitSetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())], PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.75, 270.0), false);
        CameraPan(UnitGetOwner(gf_shipToNavigator(EventUnit())), UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), 0.0, -1, 0.0, false);
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), true, false);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "ShapeApple")) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamDestroyBeam", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
        UnitKill(EventUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpaceLoopLeft_Init () {
    gt_SpaceLoopLeft = TriggerCreate("gt_SpaceLoopLeft_Func");
    TriggerAddEventUnitRegion(gt_SpaceLoopLeft, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Space Loop Right
//--------------------------------------------------------------------------------------------------
bool gt_SpaceLoopRight_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "ShapePineapple"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonRush") == true)) {
        UnitBehaviorRemove(EventUnit(), "PhotonRush", 1);
    }
    else {
    }
    if (((gv_loopturnedoff == false) || (gf_shipToIndex(EventUnit()) == -1))) {
        UnitSetPosition(EventUnit(), Point(10.0, PointGetY(UnitGetPosition(EventUnit()))), false);
    }
    else {
        UnitSetPosition(EventUnit(), Point(247.8, PointGetY(UnitGetPosition(EventUnit()))), false);
    }
    if ((UnitGetOwner(EventUnit()) != 0) && (gf_shipToIndex(EventUnit()) != -1) && (gv_loopturnedoff == false)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), false, false);
        UnitSetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())], PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.75, 270.0), false);
        CameraPan(UnitGetOwner(gf_shipToNavigator(EventUnit())), UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), 0.0, -1, 0.0, false);
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), true, false);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "ShapeApple")) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamDestroyBeam", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
        UnitKill(EventUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpaceLoopRight_Init () {
    gt_SpaceLoopRight = TriggerCreate("gt_SpaceLoopRight_Func");
    TriggerAddEventUnitRegion(gt_SpaceLoopRight, null, RegionFromId(18), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Space Loop Up
//--------------------------------------------------------------------------------------------------
bool gt_SpaceLoopUp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "ShapePineapple"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonRush") == true)) {
        UnitBehaviorRemove(EventUnit(), "PhotonRush", 1);
    }
    else {
    }
    if (((gv_loopturnedoff == false) || (gf_shipToIndex(EventUnit()) == -1))) {
        UnitSetPosition(EventUnit(), Point(PointGetX(UnitGetPosition(EventUnit())), 142.0), false);
    }
    else {
        UnitSetPosition(EventUnit(), Point(PointGetX(UnitGetPosition(EventUnit())), 247.6), false);
    }
    if ((UnitGetOwner(EventUnit()) != 0) && (gf_shipToIndex(EventUnit()) != -1) && (gv_loopturnedoff == false)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), false, false);
        UnitSetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())], PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.75, 270.0), false);
        CameraPan(UnitGetOwner(gf_shipToNavigator(EventUnit())), UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), 0.0, -1, 0.0, false);
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), true, false);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "ShapeApple")) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamDestroyBeam", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
        UnitKill(EventUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpaceLoopUp_Init () {
    gt_SpaceLoopUp = TriggerCreate("gt_SpaceLoopUp_Func");
    TriggerAddEventUnitRegion(gt_SpaceLoopUp, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Space Loop Down
//--------------------------------------------------------------------------------------------------
bool gt_SpaceLoopDown_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "ShapePineapple"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "PhotonRush") == true)) {
        UnitBehaviorRemove(EventUnit(), "PhotonRush", 1);
    }
    else {
    }
    if (((gv_loopturnedoff == false) || (gf_shipToIndex(EventUnit()) == -1))) {
        UnitSetPosition(EventUnit(), Point(PointGetX(UnitGetPosition(EventUnit())), 246.0), false);
    }
    else {
        UnitSetPosition(EventUnit(), Point(PointGetX(UnitGetPosition(EventUnit())), 140.5), false);
    }
    if ((UnitGetOwner(EventUnit()) != 0) && (gf_shipToIndex(EventUnit()) != -1) && (gv_loopturnedoff == false)) {
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), false, false);
        UnitSetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())], PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.75, 270.0), false);
        CameraPan(UnitGetOwner(gf_shipToNavigator(EventUnit())), UnitGetPosition(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), 0.0, -1, 0.0, false);
        CameraFollowUnitGroup(EventPlayer(), libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(EventUnit())]), true, false);
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "ShapeApple")) {
        UnitBehaviorAdd(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], "TractorBeamDestroyBeam", gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())], 1);
        UnitKill(EventUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpaceLoopDown_Init () {
    gt_SpaceLoopDown = TriggerCreate("gt_SpaceLoopDown_Func");
    TriggerAddEventUnitRegion(gt_SpaceLoopDown, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Movement
//--------------------------------------------------------------------------------------------------
bool gt_Movement_Func (bool testConds, bool runActions) {
    int auto7B525A85_ae;
    int auto7B525A85_ai;

    // Variable Declarations
    fixed lv_rate;
    fixed lv_tmp1;
    fixed lv_tmp2;
    int lv_i;
    fixed lv_facing;
    fixed lv_turningrate;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.3, c_timeGame);
        auto7B525A85_ae = 23;
        auto7B525A85_ai = 1;
        lv_i = 0;
        for ( ; ( (auto7B525A85_ai >= 0 && lv_i <= auto7B525A85_ae) || (auto7B525A85_ai <= 0 && lv_i >= auto7B525A85_ae) ) ; lv_i += auto7B525A85_ai ) {
            if ((gv_nav_ships[lv_i] != null)) {
                if (((UnitHasBehavior(gv_nav_ships[lv_i], "InertialNullifierField") == true) || (UnitHasBehavior(gv_nav_ships[lv_i], "PhotonRush") == true))) {
                    lv_turningrate = 9999.0;
                }
                else {
                    if ((UnitGetType(gv_nav_ships[lv_i]) == "Battlecruiser")) {
                        lv_turningrate = (UnitGetPropertyFixed(gv_nav_ships[lv_i], c_unitPropTurnRate, c_unitPropCurrent) * Pow(1.1, IntToFixed(TechTreeUpgradeCount(UnitGetOwner(gv_nav_ships[lv_i]), "BattlecruiserEnhancedStabilisers", c_techCountQueuedOrBetter))));
                    }
                    else {
                        lv_turningrate = (UnitGetPropertyFixed(gv_nav_ships[lv_i], c_unitPropTurnRate, c_unitPropCurrent) * 1.0);
                    }
                }
                lv_facing = UnitGetFacing(gv_nav_ships[lv_i]);
                lv_tmp1 = lv_facing - gv_nav_targets[lv_i];
                if( lv_tmp1 < 0.0 ){lv_tmp1 += 360.0;}
                lv_tmp2 = gv_nav_targets[lv_i] - lv_facing;
                if( lv_tmp2 < 0.0 ){lv_tmp2 += 360.0;}
                lv_rate = lv_turningrate;
                if( lv_tmp1 < lv_tmp2 ){
                  gv_nav_angles[lv_i] = lv_facing - MaxF(MinF((lv_tmp1), lv_rate), -lv_rate);
                }else{
                  gv_nav_angles[lv_i] = lv_facing + MaxF(MinF((lv_tmp2), lv_rate), -lv_rate);
                }
                UnitSetFacing(gv_nav_ships[lv_i], gv_nav_angles[lv_i], 0.4);
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Movement_Init () {
    gt_Movement = TriggerCreate("gt_Movement_Func");
    TriggerAddEventTimeElapsed(gt_Movement, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed
//--------------------------------------------------------------------------------------------------
bool gt_Speed_Func (bool testConds, bool runActions) {
    int auto7F527A51_ae;
    int auto7F527A51_ai;

    // Variable Declarations
    fixed lv_diff;
    int lv_i;
    string lv_buff;
    int lv_cost;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        auto7F527A51_ae = 23;
        auto7F527A51_ai = 1;
        lv_i = 0;
        for ( ; ( (auto7F527A51_ai >= 0 && lv_i <= auto7F527A51_ae) || (auto7F527A51_ai <= 0 && lv_i >= auto7F527A51_ae) ) ; lv_i += auto7F527A51_ai ) {
            if ((gv_nav_ships[lv_i] != null)) {
                if ((UnitHasBehavior(gv_nav_ships[lv_i], "Mining") == true) && (TechTreeUpgradeCount(UnitGetOwner(gv_nav_ships[lv_i]), "TierEconomy2", c_techCountCompleteOnly) == 0) && (gv_nav_speed[lv_i] > 0.0)) {
                    UnitBehaviorRemove(gv_nav_ships[lv_i], "Mining", 1);
                }
                else {
                }
                lv_buff = gf_getSpeedBuff(gv_nav_ships[lv_i]);
                lv_cost = gf_getSpeedCost(gv_nav_ships[lv_i]);
                lv_diff = IntToFixed(UnitBehaviorCount(gv_nav_ships[lv_i], lv_buff)) - gv_nav_speed[lv_i] * IntToFixed(gv_energy_engine[lv_i] / lv_cost);
                if( lv_diff < -0.5 ){
                  UnitBehaviorAdd(gv_nav_ships[lv_i], lv_buff, gv_nav_ships[lv_i], libNtve_gf_ArithmeticIntClamp(-FixedToInt(lv_diff), 1, 1*gv_nav_acceleration[lv_i]));
                }else if( lv_diff > 0.5 ){
                  UnitBehaviorRemove(gv_nav_ships[lv_i], lv_buff, libNtve_gf_ArithmeticIntClamp(FixedToInt(lv_diff), 1, 3*gv_nav_acceleration[lv_i] + FixedToInt(0.03*IntToFixed(UnitBehaviorCount(gv_nav_ships[lv_i], lv_buff))) ));
                  //UnitBehaviorRemove(gv_nav_ships[lv_i], lv_buff, FixedToInt(libNtve_gf_ArithmeticRealClamp(0.20 * IntToFixed(gv_energy_engine[lv_i] / lv_cost), 1.0, MaxF(1.0, 0.50*IntToFixed(UnitBehaviorCount(gv_nav_ships[lv_i], lv_buff))))));
                  //UnitBehaviorRemove(gv_nav_ships[lv_i], lv_buff, FixedToInt(libNtve_gf_ArithmeticRealClamp(0.3 * IntToFixed(gv_nav_acceleration[lv_i] * UnitBehaviorCount(gv_nav_ships[lv_i], lv_buff)), 1.0, lv_diff)));
                  if( UnitBehaviorCount(gv_nav_ships[lv_i], "Brake") < 1){
                    UnitBehaviorAdd(gv_nav_ships[lv_i], "Brake", gv_nav_ships[lv_i], 1);
                  }
                }
                if( lv_diff <= 0.0 && UnitBehaviorCount(gv_nav_ships[lv_i], "Brake") > 0){
                  UnitBehaviorRemove(gv_nav_ships[lv_i], "Brake", 1);
                }
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Speed_Init () {
    gt_Speed = TriggerCreate("gt_Speed_Func");
    TriggerAddEventTimeElapsed(gt_Speed, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Go to
//--------------------------------------------------------------------------------------------------
bool gt_Goto_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_navigatorToIndex(EventUnit());
    gv_nav_targets[lv_index] = AngleBetweenPoints(UnitGetPosition(gv_nav_ships[lv_index]), EventUnitTargetPoint());
    if ((UnitHasBehavior(gv_nav_ships[lv_index], "Mining") == true) && (TechTreeUpgradeCount(UnitGetOwner(gv_nav_ships[lv_index]), "TierEconomy2", c_techCountCompleteOnly) == 0)) {
        UnitBehaviorRemove(gv_nav_ships[lv_index], "Mining", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Goto_Init () {
    gt_Goto = TriggerCreate("gt_Goto_Func");
    TriggerAddEventUnitAbility(gt_Goto, null, AbilityCommand("moveNav", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acceleration
//--------------------------------------------------------------------------------------------------
bool gt_Acceleration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_navigatorToIndex(EventUnit());
    if ((UnitHasBehavior(EventUnit(), "Mining") == true) && (TechTreeUpgradeCount(UnitGetOwner(gv_nav_ships[lv_index]), "TierEconomy2", c_techCountCompleteOnly) == 0)) {
        UnitBehaviorRemove(EventUnit(), "Mining", 1);
    }
    else {
    }
    gv_nav_speed[lv_index] = MinF((gv_nav_speed[lv_index] + 0.1), 1.0);
    if ((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true) && (gv_currentTutorialText[EventPlayer()] == 7)) {
        TriggerExecute(gt_NextIntroductiontext, false, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Acceleration_Init () {
    gt_Acceleration = TriggerCreate("gt_Acceleration_Func");
    TriggerAddEventUnitAbility(gt_Acceleration, null, AbilityCommand("Accelerate", 255), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deceleration
//--------------------------------------------------------------------------------------------------
bool gt_Deceleration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ship;
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = gf_navigatorToIndex(EventUnit());
    lv_ship = gv_nav_ships[lv_index];
    if( gv_nav_speed[lv_index] > 0){
      gv_nav_speed[lv_index] -= 0.1;
    }else{
      //TriggerDebugOutput(1, StringToText("Minimum speed reached - drifting."), true);
      //UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, StringExternal("Engine power at 0."));
    }
    if(gv_nav_speed[lv_index] < 0.0){
      gv_nav_speed[lv_index] = 0.0;
    }
    if ((PlayerGroupHasPlayer(gv_newplayers, EventPlayer()) == true) && (gv_currentTutorialText[EventPlayer()] == 7)) {
        TriggerExecute(gt_NextIntroductiontext, false, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Deceleration_Init () {
    gt_Deceleration = TriggerCreate("gt_Deceleration_Func");
    TriggerAddEventUnitAbility(gt_Deceleration, null, AbilityCommand("Decelerate", 255), c_unitAbilStageComplete, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open inventory (Marine)
//--------------------------------------------------------------------------------------------------
bool gt_OpeninventoryMarine_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeninventoryMarine_Init () {
    gt_OpeninventoryMarine = TriggerCreate("gt_OpeninventoryMarine_Func");
    TriggerAddEventUnitSelected(gt_OpeninventoryMarine, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open inventory (Ship)
//--------------------------------------------------------------------------------------------------
bool gt_OpeninventoryShip_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventUnit(), EventPlayer(), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NavigatorChomper"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "NavigatorWraith"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(61)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeninventoryShip_Init () {
    gt_OpeninventoryShip = TriggerCreate("gt_OpeninventoryShip_Func");
    TriggerAddEventUnitSelected(gt_OpeninventoryShip, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open inventory (Chomper)
//--------------------------------------------------------------------------------------------------
bool gt_OpeninventoryChomper_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NavigatorChomper"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(61)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeninventoryChomper_Init () {
    gt_OpeninventoryChomper = TriggerCreate("gt_OpeninventoryChomper_Func");
    TriggerAddEventUnitSelected(gt_OpeninventoryChomper, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open inventory (Wraith)
//--------------------------------------------------------------------------------------------------
bool gt_OpeninventoryWraith_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NavigatorWraith"))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(61)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpeninventoryWraith_Init () {
    gt_OpeninventoryWraith = TriggerCreate("gt_OpeninventoryWraith_Func");
    TriggerAddEventUnitSelected(gt_OpeninventoryWraith, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frequency Nullifier Equip Fix
//--------------------------------------------------------------------------------------------------
bool gt_FrequencyNullifierEquipFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstEmpty;
    unit lv_freqnull;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "Allowfreqnullequip") == false)) {
        IntLoopBegin(1, 8);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((UnitInventoryItem(EventUnit(), IntLoopCurrent()) == null) && (lv_firstEmpty == 0) && (IntLoopCurrent() > 2)) {
                lv_firstEmpty = IntLoopCurrent();
            }
            else {
                if ((UnitGetType(UnitInventoryItem(EventUnit(), IntLoopCurrent())) == "FrequencyNullifier") && (UnitInventorySlot(UnitInventoryItem(EventUnit(), IntLoopCurrent())) <= 2) && (lv_freqnull == null)) {
                    lv_freqnull = UnitInventoryItem(EventUnit(), IntLoopCurrent());
                }
                else {
                }
            }
        }
        IntLoopEnd();
        if ((lv_freqnull != null) && (lv_firstEmpty != 0)) {
            UnitInventoryMove(lv_freqnull, 1, lv_firstEmpty);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrequencyNullifierEquipFix_Init () {
    gt_FrequencyNullifierEquipFix = TriggerCreate("gt_FrequencyNullifierEquipFix_Func");
    TriggerAddEventUnitBehaviorChange(gt_FrequencyNullifierEquipFix, null, "FrequencyNullifier", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frequency Nullifier Equip Fix 2
//--------------------------------------------------------------------------------------------------
bool gt_FrequencyNullifierEquipFix2_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "Allowfreqnullequip", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FrequencyNullifierEquipFix2_Init () {
    gt_FrequencyNullifierEquipFix2 = TriggerCreate("gt_FrequencyNullifierEquipFix2_Func");
    TriggerAddEventUnitInventoryChange(gt_FrequencyNullifierEquipFix2, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Hole
//--------------------------------------------------------------------------------------------------
bool gt_BlackHole_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "ShapePineapple"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PhysicsApplyForcePolar(EventPlayerEffectUsedUnit(c_effectUnitTarget), 1000.0, AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), EventPlayerEffectUsedPoint(c_effectLocationCasterPoint)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackHole_Init () {
    gt_BlackHole = TriggerCreate("gt_BlackHole_Func");
    TriggerAddEventPlayerEffectUsed(gt_BlackHole, c_playerAny, "BlackHoleForce");
}

//--------------------------------------------------------------------------------------------------
// Trigger: -music
//--------------------------------------------------------------------------------------------------
bool gt_music_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_soundOn[EventPlayer()] = !(gv_soundOn[EventPlayer()]);
    if ((gv_soundOn[EventPlayer()] == false)) {
        SoundtrackStop(PlayerGroupSingle(EventPlayer()), c_soundtrackCategoryAmbience, true);
        BankValueSetFromFlag(gv_playerBanks[EventPlayer()], "Stuff", "music", false);
    }
    else {
        SoundtrackPlay(PlayerGroupSingle(EventPlayer()), c_soundtrackCategoryAmbience, "Mainsoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        BankValueSetFromFlag(gv_playerBanks[EventPlayer()], "Stuff", "music", true);
    }
    BankSave(gv_playerBanks[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_music_Init () {
    gt_music = TriggerCreate("gt_music_Func");
    TriggerAddEventChatMessage(gt_music, c_playerAny, "-music", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive
//--------------------------------------------------------------------------------------------------
bool gt_Revive_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)), c_messageAreaSubtitle, StringExternal("Param/Value/7C2FE11E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revive_Init () {
    gt_Revive = TriggerCreate("gt_Revive_Func");
    TriggerAddEventPlayerEffectUsed(gt_Revive, c_playerAny, "ReviveRemovedebuff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Revive (final)
//--------------------------------------------------------------------------------------------------
bool gt_Revivefinal_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Receivesweeper") == true)) {
        UnitInventoryCreate(EventPlayerEffectUsedUnit(c_effectUnitTarget), "HA11Sweeper");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Revivefinal_Init () {
    gt_Revivefinal = TriggerCreate("gt_Revivefinal_Func");
    TriggerAddEventPlayerEffectUsed(gt_Revivefinal, c_playerAny, "ReviveHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faint
//--------------------------------------------------------------------------------------------------
bool gt_Faint_Func (bool testConds, bool runActions) {
    playergroup auto8356AF24_g;
    int auto8356AF24_p;
    playergroup auto2B67A2E9_g;
    int auto2B67A2E9_p;

    // Variable Declarations
    unit lv_closestConsole;
    int lv_p;
    int lv_player;
    int lv_p2;
    unit lv_u;
    bool lv_addSweeper;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropLife, 1.0);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if (((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == 13) || (UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == 14))) {
        lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    else {
        lv_player = gf_GetPilotOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    }
    gf_LeaveConsole(lv_player, EventPlayerEffectUsedUnit(c_effectUnitCaster));
    Wait(0.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_u, "SetRotation {-0.000000,-0.000000,1.000000 -0.230063,0.973176,0.000000}");
    if ((libNtve_gf_UnitInRegion(lv_u, gv_battlecruiserArea[gf_GetPlayerTeam(lv_player)]) == false)) {
        gf_destroyShip(gf_GetPlayerTeam(UnitGetOwner(lv_u)), gf_findShip(gf_GetPlayerTeam(UnitGetOwner(lv_u)), "HelsAngelFighter"));
        UnitGroupLoopBegin(UnitInventoryGroup(lv_u));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGetType(UnitGroupLoopCurrent()) != "HA11Sweeper") || (UnitInventorySlot(UnitGroupLoopCurrent()) != 1))) {
                if ((UnitGetType(UnitGroupLoopCurrent()) != "HA11Sweeper")) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(lv_u), RandomFixed(0.0, 0.8), libNtve_gf_RandomAngle()));
                    if ((gf_getItemStackable(UnitGetType(UnitGroupLoopCurrent())) == true)) {
                        if ((lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()) == 100.0)) {
                            lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
                            lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
                        }
                        else {
                            lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()));
                        }
                    }
                    else {
                    }
                }
                else {
                }
                if ((UnitInventorySlot(UnitGroupLoopCurrent()) == 1)) {
                    lv_addSweeper = true;
                    UnitBehaviorAdd(lv_u, "Receivesweeper", lv_u, 1);
                }
                else {
                }
                UnitRemove(UnitGroupLoopCurrent());
            }
            else {
            }
        }
        UnitGroupLoopEnd();
        UnitBehaviorRemove(gv_pilots[lv_player], "Boarding", 1);
        VisExploreArea(lv_player, RegionEntireMap(), false, false);
        VisRevealerEnable(gv_playerVisibilityRevealer[0][lv_player], true);
        VisRevealerEnable(gv_playerVisibilityRevealer[1][lv_player], true);
        auto8356AF24_g = GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_player)); 
        auto8356AF24_p = 1;
        for ( ; auto8356AF24_p <= PlayerGroupCount(auto8356AF24_g) ; auto8356AF24_p += BoolToInt(lv_p == PlayerGroupPlayer(auto8356AF24_g, auto8356AF24_p)) ) {
            lv_p = PlayerGroupPlayer(auto8356AF24_g, auto8356AF24_p);
            if ((lv_p != lv_player)) {
                libNtve_gf_SetAlliance(lv_p, lv_player, 1);
            }
            else {
            }
        }
        auto2B67A2E9_g = GameAttributePlayersForTeam((3 - gf_GetPlayerTeam(lv_player))); 
        auto2B67A2E9_p = 1;
        for ( ; auto2B67A2E9_p <= PlayerGroupCount(auto2B67A2E9_g) ; auto2B67A2E9_p += BoolToInt(lv_p == PlayerGroupPlayer(auto2B67A2E9_g, auto2B67A2E9_p)) ) {
            lv_p = PlayerGroupPlayer(auto2B67A2E9_g, auto2B67A2E9_p);
            if ((lv_p != lv_player)) {
                PlayerSetAlliance(lv_p, c_allianceIdChat, lv_player, false);
            }
            else {
            }
        }
        libNtve_gf_SetAlliance(gf_GetPlayerTeamAI(lv_player), lv_player, 1);
        PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, true);
        PlayerGroupRemove(gv_players_inside[(3 - gf_GetPlayerTeam(lv_player))], lv_player);
        libNtve_gf_SetAlliance(lv_player, gf_GetPlayerTeamAI(lv_player), 1);
        PlayerSetAlliance(gf_GetPlayerTeamAI(lv_player), c_allianceIdVision, lv_player, true);
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/B85CEA00"), Color(97.65, 0.00, 0.00)));
        UnitSetPosition(gv_pilots[lv_player], gv_startLocations[gf_GetPlayerTeam(lv_player)], false);
        libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "SetRotation {-0.000000,-0.000000,1.000000 -0.230063,0.973176,0.000000}");
        gf_SpaceView(lv_player, gv_battlecruisers[(3 - gf_GetPlayerTeam(lv_player))]);
        gf_Unexploreafterdelay(1.0, lv_player);
        Wait(1.5, c_timeGame);
        DialogControlSetVisible(gv_switchViewButton, PlayerGroupSingle(lv_player), true);
        DialogSetVisible(gv_openDirectionsdialog, PlayerGroupSingle(lv_player), true);
        CameraFollowUnitGroup(lv_player, libNtve_gf_ConvertUnitToUnitGroup(gv_nav_camera_offset[gf_shipToIndex(gv_battlecruisers[(3 - gf_GetPlayerTeam(lv_player))])]), false, false);
        CameraPan(lv_player, UnitGetPosition(gv_battlecruisers[gf_GetPlayerTeam(lv_player)]), 3.0, -1, 10.0, false);
        Wait(3.0, c_timeGame);
        gf_ShipView(lv_player, gv_battlecruisers[gf_GetPlayerTeam(lv_player)]);
        UIClearMessages(PlayerGroupSingle(lv_player), c_messageAreaDirective);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaSubtitle, StringExternal("Param/Value/44F29491"));
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(lv_player)), c_messageAreaChat, (TextWithColor(PlayerName(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))) + TextWithColor(StringExternal("Param/Value/9CCFB25E"), Color(100.00, 100.00, 0.00))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Faint_Init () {
    gt_Faint = TriggerCreate("gt_Faint_Func");
    TriggerAddEventPlayerEffectUsed(gt_Faint, c_playerAny, "Incapacitatecaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pick up items
//--------------------------------------------------------------------------------------------------
bool gt_Pickupitems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nearby_items;
    int lv_index;
    unit lv_closestU;
    int lv_trigplayer;

    // Variable Initialization
    lv_nearby_items = UnitGroupEmpty();
    lv_index = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(gf_ItemsNotEquipped(EventUnit()), c_unitCountAlive) > 0)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventorySlot(UnitGroupLoopCurrent()) > 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(UnitGroupLoopCurrent()), c_unitCreateIgnorePlacement, 0, PointWithOffsetPolar(UnitGetPosition(EventUnit()), RandomFixed(0.0, 0.8), libNtve_gf_RandomAngle()));
                if ((gf_getItemStackable(UnitGetType(UnitGroupLoopCurrent())) == true)) {
                    if ((lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()) == 100.0)) {
                        lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), 99.0);
                        lib1_gf_ItemAddCharges(UnitLastCreated(), 1.0);
                    }
                    else {
                        lib1_gf_ItemSetChargesRemaining(UnitLastCreated(), lib1_gf_ItemGetChargesRemaining(UnitGroupLoopCurrent()));
                    }
                }
                else {
                }
                UnitRemove(UnitGroupLoopCurrent());
                if (((libNtve_gf_UnitInRegion(UnitLastCreated(), RegionFromId(36)) == true) || (libNtve_gf_UnitInRegion(UnitLastCreated(), RegionFromId(37)) == true))) {
                    libNtve_gf_CreateActorAtPoint("DepositEffect", UnitGetPosition(UnitLastCreated()));
                    SoundPlayOnUnit(SoundLink("Sentry_GuardianShieldDeath", -1), PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.5);
                    lv_closestU = UnitGroupClosestToPoint(UnitGroup("Marine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(UnitLastCreated()));
                    lv_trigplayer = UnitGetOwner(lv_closestU);
                    IntLoopBegin(0, gv_itemArraySize);
                    for ( ; !IntLoopDone() ; IntLoopStep() ) {
                        if ((gv_items[IntLoopCurrent()].lv_type == UnitGetType(UnitLastCreated()))) {
                            lv_index = IntLoopCurrent();
                            break;
                        }
                        else {
                        }
                    }
                    IntLoopEnd();
                    IntLoopBegin(0, gv_itemStorageArraySize);
                    for ( ; !IntLoopDone() ; IntLoopStep() ) {
                        if ((gv_itemStorage[gf_GetPlayerTeam(lv_trigplayer)][IntLoopCurrent()].lv_itemid == lv_index)) {
                            gv_itemStorage[gf_GetPlayerTeam(lv_trigplayer)][IntLoopCurrent()].lv_amount += 1;
                            break;
                        }
                        else {
                            if ((gv_itemStorage[gf_GetPlayerTeam(lv_trigplayer)][IntLoopCurrent()].lv_itemid == 0)) {
                                gv_itemStorage[gf_GetPlayerTeam(lv_trigplayer)][IntLoopCurrent()].lv_itemid = lv_index;
                                gv_itemStorage[gf_GetPlayerTeam(lv_trigplayer)][IntLoopCurrent()].lv_amount = 1;
                                break;
                            }
                            else {
                            }
                        }
                    }
                    IntLoopEnd();
                    gf_UpdateStorageList(lv_trigplayer);
                    UnitRemove(UnitLastCreated());
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
        lv_nearby_items = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupLoopBegin(lv_nearby_items);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(null, UnitGroupLoopCurrent()), c_orderQueueAddToEnd);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pickupitems_Init () {
    gt_Pickupitems = TriggerCreate("gt_Pickupitems_Func");
    TriggerAddEventUnitAbility(gt_Pickupitems, null, AbilityCommand("Pickupitems", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Vision
//--------------------------------------------------------------------------------------------------
bool gt_MapVision_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(EventPlayer(), RegionEntireMap());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapVision_Init () {
    gt_MapVision = TriggerCreate("gt_MapVision_Func");
    TriggerAddEventChatMessage(gt_MapVision, c_playerAny, "vision", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infinite missiles
//--------------------------------------------------------------------------------------------------
bool gt_Infinitemissiles_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_infmis = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Infinitemissiles_Init () {
    gt_Infinitemissiles = TriggerCreate("gt_Infinitemissiles_Func");
    TriggerEnable(gt_Infinitemissiles, false);
    TriggerAddEventChatMessage(gt_Infinitemissiles, c_playerAny, "infmis", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: resources
//--------------------------------------------------------------------------------------------------
bool gt_resources_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 500);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperAdd, 500);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperAdd, 500);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperAdd, 500);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resources_Init () {
    gt_resources = TriggerCreate("gt_resources_Func");
    TriggerEnable(gt_resources, false);
    TriggerAddEventChatMessage(gt_resources, c_playerAny, "moneymoney", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;
    int lv_players;
    int lv_minerals;
    int lv_vespene;
    int lv_custom;
    int lv_terrazine;
    unit lv_ship;
    int lv_inventoryID;
    int lv_player;
    int lv_loopX;
    int lv_loopY;
    fixed lv_charges;
    string lv_itemremove;
    bool lv_additemsuccess;
    int lv_playerindex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_disconnectedplayers, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_id = gf_getNewDroneID(gf_GetPlayerTeam(EventPlayer()));
    PlayerGroupAdd(gv_disconnectedplayers, EventPlayer());
    gf_LeaveConsole(EventPlayer(), gv_pilots[EventPlayer()]);
    lv_playerindex = gf_PlayerToIndex(EventPlayer(), true);
    if ((lv_playerindex != -1)) {
        UnitSetOwner(gv_nav_navigators[lv_playerindex], gf_GetPlayerTeamAI(EventPlayer()), true);
        UnitSetOwner(gv_nav_ships[lv_playerindex], gf_GetPlayerTeamAI(EventPlayer()), true);
        gv_drones[gf_GetPlayerTeam(EventPlayer())][lv_id].lv_ship = gv_nav_ships[lv_playerindex];
        gv_drones[gf_GetPlayerTeam(EventPlayer())][lv_id].lv_status = -1;
        gv_drones[gf_GetPlayerTeam(EventPlayer())][lv_id].lv_currentOrder = 20;
        gv_drones[gf_GetPlayerTeam(EventPlayer())][lv_id].lv_targetspace = 1;
    }
    else {
    }
    TriggerEnable(gt_Evenoutminerals, false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropCustom, c_playerPropOperSetTo, 0);
    TriggerEnable(gt_Evenoutminerals, true);
    gv_drones[gf_GetPlayerTeam(EventPlayer())][lv_id].lv_name = PlayerName(EventPlayer());
    gv_drones[gf_GetPlayerTeam(EventPlayer())][lv_id].lv_avatar = gv_pilots[EventPlayer()];
    DialogControlRemoveItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), lv_id);
    DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), PlayerName(EventPlayer()));
    DialogControlAddItem(gv_droneDropdown, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), StringExternal("Param/Value/F443195E"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/F4F2ADD7")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/C60C767F")));
    UnitSetOwner(gv_pilots[EventPlayer()], gf_GetPlayerTeamAI(EventPlayer()), true);
    TextTagSetColor(gv_pilottexttags[EventPlayer()], c_textTagColorText, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(gf_GetPlayerTeamAI(EventPlayer()), false)));
    gv_aItexttags[gf_GetPlayerTeam(EventPlayer())][lv_id] = gv_pilottexttags[EventPlayer()];
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
    TriggerAddEventChatMessage(gt_PlayerLeaves, c_playerAny, "ireallywanttoleave", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Even out minerals
//--------------------------------------------------------------------------------------------------
bool gt_Evenoutminerals_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerStatus(EventPlayer()) == c_playerStatusActive))) {
            return false;
        }

        if (!((PlayerStatus(EventPlayer()) != c_playerStatusLeft))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_disconnectedplayers, EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine));
            PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom));
        }
        else {
            if ((PlayerStatus(PlayerGroupLoopCurrent()) != c_playerStatusActive) && (PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusLeft)) {
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropMinerals, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, 0);
                PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, 0);
            }
            else {
            }
        }
    }
    PlayerGroupLoopEnd();
    PlayerModifyPropertyInt(gf_GetPlayerTeamAI(EventPlayer()), c_playerPropMinerals, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals));
    PlayerModifyPropertyInt(gf_GetPlayerTeamAI(EventPlayer()), c_playerPropVespene, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropVespene));
    PlayerModifyPropertyInt(gf_GetPlayerTeamAI(EventPlayer()), c_playerPropTerrazine, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropTerrazine));
    PlayerModifyPropertyInt(gf_GetPlayerTeamAI(EventPlayer()), c_playerPropCustom, c_playerPropOperSetTo, PlayerGetPropertyInt(EventPlayer(), c_playerPropCustom));
    Wait(0.0, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Evenoutminerals_Init () {
    gt_Evenoutminerals = TriggerCreate("gt_Evenoutminerals_Func");
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 1, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 1, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 1, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 1, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 2, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 2, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 2, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 2, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 3, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 3, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 3, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 3, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 4, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 4, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 4, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 4, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 5, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 5, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 5, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 5, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 6, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 6, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 6, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 6, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 7, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 7, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 7, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 7, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 8, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 8, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 8, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 8, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 9, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 9, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 9, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 9, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 10, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 10, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 10, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 10, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 11, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 11, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 11, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 11, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 12, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 12, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 12, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 12, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 13, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 13, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 13, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 13, c_playerPropCustom);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 14, c_playerPropMinerals);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 14, c_playerPropVespene);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 14, c_playerPropTerrazine);
    TriggerAddEventPlayerPropChange(gt_Evenoutminerals, 14, c_playerPropCustom);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -reset
//--------------------------------------------------------------------------------------------------
bool gt_reset_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-3755922") || (PlayerHandle(EventPlayer()) == "2-S2-1-223737") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraFollowUnitGroup(EventPlayer(), UnitGroup(null, c_playerAny, RegionFromId(1), UnitFilter(0, 0, (1 << c_targetFilterHover) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
    CameraSetBounds(PlayerGroupSingle(EventPlayer()), RegionPlayableMap(), true);
    if ((gf_GetPlayerTeam(EventPlayer()) == 1)) {
        CameraPan(EventPlayer(), PointFromId(21), 0.0, -1, 10, false);
    }
    else {
        CameraPan(EventPlayer(), PointFromId(283), 0.0, -1, 10, false);
    }
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 56.0, 0.0, -1, 10);
    CameraLockInput(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_reset_Init () {
    gt_reset = TriggerCreate("gt_reset_Func");
    TriggerAddEventChatMessage(gt_reset, c_playerAny, "-reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -unstuck
//--------------------------------------------------------------------------------------------------
bool gt_unstuck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_players_inside[gf_GetPlayerTeam(EventPlayer())], EventPlayer()) == true)) {
        UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        }
        UnitGroupLoopEnd();
        gf_LeaveConsole(EventPlayer(), gv_pilots[EventPlayer()]);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/CDF47A56"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unstuck_Init () {
    gt_unstuck = TriggerCreate("gt_unstuck_Func");
    TriggerAddEventChatMessage(gt_unstuck, c_playerAny, "-unstuck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check systems
//--------------------------------------------------------------------------------------------------
bool gt_Checksystems_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((GameGetMissionTime() - gv_lastCollisionDetection) >= 2.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E7D559D4"), true);
        TriggerStop(gt_CollisionDetection);
        TriggerExecute(gt_CollisionDetection, true, false);
    }
    else {
    }
    if (((GameGetMissionTime() - gv_lastPhysics) >= 2.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E3E30B68"), true);
        TriggerStop(gt_Physics);
        TriggerExecute(gt_Physics, true, false);
    }
    else {
    }
    if (((GameGetMissionTime() - gv_lastDroneLoop) >= 2.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/E8141908"), true);
        TriggerStop(gt_DroneLoop);
        TriggerExecute(gt_DroneLoop, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Checksystems_Init () {
    gt_Checksystems = TriggerCreate("gt_Checksystems_Func");
    TriggerAddEventTimePeriodic(gt_Checksystems, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Offensive Tier (Create Wraith)
//--------------------------------------------------------------------------------------------------
bool gt_OffensiveTierCreateWraith_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetDialogItemText(gv_purchaseCost, (StringExternal("Param/Value/E8638B38") + (TextWithColor((StringExternal("Param/Value/987B9EAD") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 0))), libNtve_gf_ConvertPlayerColorToColor(5)) + (TextWithColor((StringExternal("Param/Value/0FDA5C6E") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 1))), libNtve_gf_ConvertPlayerColorToColor(3)) + (TextWithColor((StringExternal("Param/Value/DE76D8B9") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 2))), libNtve_gf_ConvertPlayerColorToColor(1)) + TextWithColor((StringExternal("Param/Value/85790987") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 3))), libNtve_gf_ConvertPlayerColorToColor(7)))))), PlayerGroupAll());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OffensiveTierCreateWraith_Init () {
    gt_OffensiveTierCreateWraith = TriggerCreate("gt_OffensiveTierCreateWraith_Func");
    TriggerAddEventUnitAbility(gt_OffensiveTierCreateWraith, null, AbilityCommand("Upgrade2", 13), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Economy Tier (Fix prices and reveal asteroids)
//--------------------------------------------------------------------------------------------------
bool gt_EconomyTierFixpricesandrevealasteroids_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetDialogItemText(gv_purchaseCost, (StringExternal("Param/Value/6F27E16A") + (TextWithColor((StringExternal("Param/Value/5AD01065") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 0))), libNtve_gf_ConvertPlayerColorToColor(5)) + (TextWithColor((StringExternal("Param/Value/A487B74E") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 1))), libNtve_gf_ConvertPlayerColorToColor(3)) + (TextWithColor((StringExternal("Param/Value/377E81E4") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 2))), libNtve_gf_ConvertPlayerColorToColor(1)) + TextWithColor((StringExternal("Param/Value/52128468") + IntToText(gf_GetShipPrice(EventPlayer(), gv_selectedShipPurchase[PlayerGroupLoopCurrent()], 3))), libNtve_gf_ConvertPlayerColorToColor(7)))))), PlayerGroupAll());
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionFromId(1));
        Wait(0.5, c_timeGame);
        VisRevealerDestroy(VisRevealerLastCreated());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EconomyTierFixpricesandrevealasteroids_Init () {
    gt_EconomyTierFixpricesandrevealasteroids = TriggerCreate("gt_EconomyTierFixpricesandrevealasteroids_Func");
    TriggerAddEventUnitAbility(gt_EconomyTierFixpricesandrevealasteroids, null, AbilityCommand("Upgrade2", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade tier 1
//--------------------------------------------------------------------------------------------------
bool gt_Upgradetier1_Func (bool testConds, bool runActions) {
    string auto497EBB64_val;

    // Variable Declarations
    text lv_name;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "TierEconomy1") || (libNtve_gf_TriggeringProgressUpgrade() == "TierOffensive1") || (libNtve_gf_TriggeringProgressUpgrade() == "TierUtility1")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Tier1", 1);
    }
    PlayerGroupLoopEnd();
    auto497EBB64_val = libNtve_gf_TriggeringProgressUpgrade();
    if (auto497EBB64_val == "TierEconomy1") {
        lv_name = TextWithColor(StringExternal("Param/Value/F23FAFDB"), Color(0.00, 100.00, 0.00));
    }
    else if (auto497EBB64_val == "TierOffensive1") {
        lv_name = TextWithColor(StringExternal("Param/Value/B28A7A56"), Color(100.00, 0.00, 0.00));
    }
    else if (auto497EBB64_val == "TierUtility1") {
        lv_name = TextWithColor(StringExternal("Param/Value/D032B70C"), Color(90.20, 90.20, 0.00));
    }
    else {
    }
    libNtve_gf_SetDialogItemText(gv_tier1_label, (StringExternal("Param/Value/685706DA") + lv_name + StringExternal("Param/Value/1F386626")), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgradetier1_Init () {
    gt_Upgradetier1 = TriggerCreate("gt_Upgradetier1_Func");
    TriggerAddEventUnitResearchProgress(gt_Upgradetier1, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade tier 2
//--------------------------------------------------------------------------------------------------
bool gt_Upgradetier2_Func (bool testConds, bool runActions) {
    string autoAFE67ABA_val;

    // Variable Declarations
    text lv_name;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "TierEconomy2") || (libNtve_gf_TriggeringProgressUpgrade() == "TierOffensive2") || (libNtve_gf_TriggeringProgressUpgrade() == "TierUtility2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Tier2", 1);
    }
    PlayerGroupLoopEnd();
    autoAFE67ABA_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoAFE67ABA_val == "TierEconomy2") {
        lv_name = TextWithColor(StringExternal("Param/Value/73E41682"), Color(0.00, 100.00, 0.00));
    }
    else if (autoAFE67ABA_val == "TierOffensive2") {
        lv_name = TextWithColor(StringExternal("Param/Value/3EAD508F"), Color(100.00, 0.00, 0.00));
    }
    else if (autoAFE67ABA_val == "TierUtility2") {
        lv_name = TextWithColor(StringExternal("Param/Value/A88CB3B5"), Color(90.20, 90.20, 0.00));
    }
    else {
    }
    libNtve_gf_SetDialogItemText(gv_tier2_label, (StringExternal("Param/Value/F3A5AEB9") + lv_name + StringExternal("Param/Value/CF700EBC")), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgradetier2_Init () {
    gt_Upgradetier2 = TriggerCreate("gt_Upgradetier2_Func");
    TriggerAddEventUnitResearchProgress(gt_Upgradetier2, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade tier 3
//--------------------------------------------------------------------------------------------------
bool gt_Upgradetier3_Func (bool testConds, bool runActions) {
    string autoDC837F72_val;

    // Variable Declarations
    text lv_name;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "TierEconomy3") || (libNtve_gf_TriggeringProgressUpgrade() == "TierOffensive3") || (libNtve_gf_TriggeringProgressUpgrade() == "TierUtility3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetUpgradeLevelForPlayer(PlayerGroupLoopCurrent(), "Tier3", 1);
    }
    PlayerGroupLoopEnd();
    autoDC837F72_val = libNtve_gf_TriggeringProgressUpgrade();
    if (autoDC837F72_val == "TierEconomy3") {
        lv_name = TextWithColor(StringExternal("Param/Value/83439FA6"), Color(0.00, 100.00, 0.00));
    }
    else if (autoDC837F72_val == "TierOffensive3") {
        lv_name = TextWithColor(StringExternal("Param/Value/9370A710"), Color(100.00, 0.00, 0.00));
    }
    else if (autoDC837F72_val == "TierUtility3") {
        lv_name = TextWithColor(StringExternal("Param/Value/F11003B2"), Color(90.20, 90.20, 0.00));
    }
    else {
    }
    libNtve_gf_SetDialogItemText(gv_tier3_label, (StringExternal("Param/Value/F3A066A7") + lv_name + StringExternal("Param/Value/0B21F8E6")), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgradetier3_Init () {
    gt_Upgradetier3 = TriggerCreate("gt_Upgradetier3_Func");
    TriggerAddEventUnitResearchProgress(gt_Upgradetier3, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Physics
//--------------------------------------------------------------------------------------------------
bool gt_Physics_Func (bool testConds, bool runActions) {
    unitgroup auto2188EA05_g;
    int auto2188EA05_u;
    string auto185CE5F7_val;

    // Variable Declarations
    unitgroup lv_units;
    unitgroup lv_collision;
    fixed lv_sum;
    int lv_index;
    unit lv_otherUnit;
    fixed lv_speed_multiplier;
    fixed lv_speed_bonus;
    unit lv_target;
    fixed lv_temp_angle;
    fixed lv_turn_rate;
    fixed lv_force;
    fixed lv_speed;
    string lv_speed_upgrade;
    fixed lv_currSpeed;

    // Variable Initialization
    lv_units = UnitGroupEmpty();
    lv_collision = UnitGroupEmpty();
    lv_speed_multiplier = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.0, c_timeGame);
        UIDisplayMessage(gv_debugplayers, c_messageAreaError, StringExternal("Param/Value/9F2BF4F0"));
        gv_lastPhysics = GameGetMissionTime();
        if ((gv_debug == true)) {
        }
        else {
        }
        libNtve_gf_AddUnitGroupToUnitGroup(gv_physicasteroids, lv_units);
        libNtve_gf_AddUnitGroupToUnitGroup(gv_physiccolliders, lv_units);
        libNtve_gf_AddUnitGroupToUnitGroup(gv_physiccolliders, lv_collision);
        UnitGroupLoopBegin(lv_units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupRemove(lv_collision, UnitGroupLoopCurrent());
            auto2188EA05_g = lv_collision;
            auto2188EA05_u = 1;
            for ( ; auto2188EA05_u <= UnitGroupCount(auto2188EA05_g, c_unitCountAll) ; auto2188EA05_u += BoolToInt(lv_otherUnit == UnitGroupUnit(auto2188EA05_g, auto2188EA05_u)) ) {
                lv_otherUnit = UnitGroupUnit(auto2188EA05_g, auto2188EA05_u);
                if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_otherUnit)) < (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropRadius, c_unitPropCurrent) + UnitGetPropertyFixed(lv_otherUnit, c_unitPropRadius, c_unitPropCurrent))) && (UnitGetType(lv_otherUnit) != "DecoyFlare") && (UnitGetType(UnitGroupLoopCurrent()) != "DecoyFlare")) {
                    gf_PhysicsCollision(UnitGroupLoopCurrent(), lv_otherUnit);
                }
                else {
                }
            }
        }
        UnitGroupLoopEnd();
        UnitGroupClear(lv_units);
        UnitGroupClear(lv_collision);
        UnitGroupLoopBegin(gv_physicgroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((gf_shipToIndex(UnitGroupLoopCurrent()) != -1)) {
                UnitSetPosition(gv_nav_camera_offset[gf_shipToIndex(UnitGroupLoopCurrent())], PointWithOffsetPolar(UnitGetPosition(UnitGroupLoopCurrent()), 1.75, 270.0), true);
            }
            else {
            }
            if ((UnitFilterMatch(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter((1 << c_targetFilterLight) | (1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropTurnRate, c_unitPropCurrent) > 0.0)) {
                auto185CE5F7_val = UnitGetType(UnitGroupLoopCurrent());
                if (auto185CE5F7_val == "CounterMissile") {
                    if ((UnitGroupHasUnit(gv_guidedMissiles, UnitGroupLoopCurrent()) == true)) {
                        lv_target = UnitGroupClosestToPoint(gf_getEnemyUnitsInUG(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent)), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetOwner(UnitGroupLoopCurrent())), UnitGetPosition(UnitGroupLoopCurrent()));
                        lv_turn_rate = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropTurnRate, c_unitPropCurrent);
                        lv_force = gf_PhysicsGetSpeed(UnitGroupLoopCurrent());
                        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)) <= 0.4)) {
                            libNtve_gf_CreateActorAtPoint("LaserBatteryImpact", UnitGetPosition(UnitGroupLoopCurrent()));
                            UnitKill(UnitGroupLoopCurrent());
                            UnitKill(lv_target);
                            TriggerDebugOutput(1, StringExternal("Param/Value/E2EA83F3"), true);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else if (auto185CE5F7_val == "OpposerProximityMine") {
                    lv_target = UnitGroupClosestToPoint(gf_getEnemyUnitsInUG(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent)), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetOwner(UnitGroupLoopCurrent())), UnitGetPosition(UnitGroupLoopCurrent()));
                    lv_turn_rate = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropTurnRate, c_unitPropCurrent);
                    if ((UnitGetType(lv_target) == "Minelayer")) {
                        lv_target = null;
                    }
                    else {
                    }
                    if ((lv_target == null)) {
                        lv_force = 0.0;
                        gf_UnregisterPhysics(UnitGroupLoopCurrent());
                        UnitGroupRemove(gv_collisiongroup_mines, UnitGroupLoopCurrent());
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ChasingTarget", 1);
                    }
                    else {
                        lv_force = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyRegen, c_unitPropCurrent);
                        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)) <= 0.4)) {
                        }
                        else {
                        }
                    }
                }
                else if (auto185CE5F7_val == "EMPMine2") {
                    lv_target = UnitGroupClosestToPoint(gf_getEnemyUnitsInUG(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent)), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetOwner(UnitGroupLoopCurrent())), UnitGetPosition(UnitGroupLoopCurrent()));
                    lv_turn_rate = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropTurnRate, c_unitPropCurrent);
                    if ((UnitGetType(lv_target) == "Minelayer")) {
                        lv_target = null;
                    }
                    else {
                    }
                    if ((lv_target == null)) {
                        lv_force = 0.0;
                        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimSetPausedAll");
                        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity 0.500000 2.500000");
                        gf_UnregisterPhysics(UnitGroupLoopCurrent());
                        UnitGroupRemove(gv_collisiongroup_mines, UnitGroupLoopCurrent());
                        UnitBehaviorRemove(UnitGroupLoopCurrent(), "ChasingTarget", 1);
                    }
                    else {
                        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimSetPausedAll 0");
                        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "SetOpacity 1.000000 2.500000");
                        lv_force = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyRegen, c_unitPropCurrent);
                        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)) <= 0.4)) {
                        }
                        else {
                        }
                    }
                }
                else {
                    lv_target = UnitGroupClosestToPoint(gf_getEnemyUnitsInUG(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropSuppliesUsed, c_unitPropCurrent)), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMassive), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetOwner(UnitGroupLoopCurrent())), UnitGetPosition(UnitGroupLoopCurrent()));
                    lv_turn_rate = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropTurnRate, c_unitPropCurrent);
                    lv_force = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyRegen, c_unitPropCurrent);
                }
                lv_speed = gf_PhysicsGetSpeed(UnitGroupLoopCurrent());
                if ((lv_target == null)) {
                    if ((UnitFilterMatch(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                    }
                    else {
                    }
                }
                else {
                    if ((lv_speed < 0.1) && (UnitHasBehavior(UnitGroupLoopCurrent(), "ChasingTarget") == false)) {
                        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), UnitGetPosition(lv_target), 0.0);
                    }
                    else {
                    }
                    lv_temp_angle = AbsF((UnitGetFacing(UnitGroupLoopCurrent()) - AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target))));
                    if ((lv_temp_angle <= lv_turn_rate)) {
                        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), UnitGetPosition(lv_target), 0.0);
                    }
                    else {
                        if ((lv_temp_angle <= 180.0)) {
                            if ((UnitGetFacing(UnitGroupLoopCurrent()) > AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)))) {
                                UnitSetFacing(UnitGroupLoopCurrent(), (UnitGetFacing(UnitGroupLoopCurrent()) - lv_turn_rate), 0.0);
                            }
                            else {
                                UnitSetFacing(UnitGroupLoopCurrent(), (UnitGetFacing(UnitGroupLoopCurrent()) + lv_turn_rate), 0.0);
                            }
                        }
                        else {
                            if ((UnitGetFacing(UnitGroupLoopCurrent()) > AngleBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_target)))) {
                                UnitSetFacing(UnitGroupLoopCurrent(), (UnitGetFacing(UnitGroupLoopCurrent()) + lv_turn_rate), 0.0);
                            }
                            else {
                                UnitSetFacing(UnitGroupLoopCurrent(), (UnitGetFacing(UnitGroupLoopCurrent()) - lv_turn_rate), 0.0);
                            }
                        }
                    }
                }
                gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), (lv_force / 1.0), UnitGetFacing(UnitGroupLoopCurrent()));
            }
            else {
                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "Immobilized") == true)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/F8B450F5") + FixedToText(UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropCurrent), c_fixedPrecisionAny) + StringExternal("Param/Value/C3B139A8")), true);
                }
                else {
                    lv_speed_bonus = 0.0;
                    lv_speed_multiplier = 1.0;
                    if ((UnitGetType(UnitGroupLoopCurrent()) != "Battlecruiser")) {
                        lv_speed_upgrade = "SmallshipsEnhancedThrusters";
                        lv_speed_multiplier = (1.0 + (0.08 * IntToFixed(TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "SmallshipsEnhancedThrusters", c_techCountCompleteOnly))));
                        lv_speed_multiplier = (lv_speed_multiplier + (0.15 * IntToFixed(TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), "TierUtility1", c_techCountCompleteOnly))));
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "IonicTransfer") == true)) {
                            lv_speed_multiplier *= 1.5;
                        }
                        else {
                        }
                        if ((UnitHasBehavior(UnitGroupLoopCurrent(), "QuantumSurged") == true)) {
                            lv_speed_multiplier *= 0.5;
                        }
                        else {
                        }
                    }
                    else {
                        lv_currSpeed = (10.0 * gf_PhysicsGetSpeed(UnitGroupLoopCurrent()));
                        lv_speed_upgrade = "BattlecruiserEnhancedStabilisers";
                        lv_speed_bonus = ((14.3902 * gv_nav_speed[gf_shipToIndex(UnitGroupLoopCurrent())]) * TechTreeUpgradeCount(UnitGetOwner(UnitGroupLoopCurrent()), lv_speed_upgrade, c_techCountCompleteOnly));
                    }
                    if ((gf_shipToIndex(UnitGroupLoopCurrent()) != -1)) {
                        if ((UnitHasBehavior(gf_shipToNavigator(UnitGroupLoopCurrent()), "Rearboost") == true)) {
                            gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), 50.0, (-180.0 + UnitGetFacing(UnitGroupLoopCurrent())));
                        }
                        else {
                            if ((UnitHasBehavior(gf_shipToNavigator(UnitGroupLoopCurrent()), "Boostleft") == true)) {
                                gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), 40.0, (90.0 + UnitGetFacing(UnitGroupLoopCurrent())));
                            }
                            else {
                                if ((UnitHasBehavior(gf_shipToNavigator(UnitGroupLoopCurrent()), "Boostright") == true)) {
                                    gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), 40.0, (-90.0 + UnitGetFacing(UnitGroupLoopCurrent())));
                                }
                                else {
                                    gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), (lv_speed_bonus + (lv_speed_multiplier * (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropCurrent) * 20.0))), UnitGetFacing(UnitGroupLoopCurrent()));
                                }
                            }
                        }
                    }
                    else {
                        gf_PhysicsApplyForcePolar(UnitGroupLoopCurrent(), (lv_speed_bonus + (lv_speed_multiplier * (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, c_unitPropCurrent) * 20.0))), UnitGetFacing(UnitGroupLoopCurrent()));
                    }
                }
            }
            UnitSetPosition(UnitGroupLoopCurrent(), PointWithOffset(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetCustomValue(UnitGroupLoopCurrent(), 1) / 100.0, UnitGetCustomValue(UnitGroupLoopCurrent(), 2) / 100.0), true);
            if ((UnitGetCustomValue(UnitGroupLoopCurrent(), 4) != 1.0)) {
                lv_sum = gf_PhysicsGetSpeed2(UnitGroupLoopCurrent());
                UnitSetCustomValue(UnitGroupLoopCurrent(), 1, (UnitGetCustomValue(UnitGroupLoopCurrent(), 1) * UnitGetCustomValue(UnitGroupLoopCurrent(), 4)));
                UnitSetCustomValue(UnitGroupLoopCurrent(), 2, (UnitGetCustomValue(UnitGroupLoopCurrent(), 2) * UnitGetCustomValue(UnitGroupLoopCurrent(), 4)));
                lv_index = gf_shipToIndex(null);
                if ((gf_PhysicsGetSpeed2(UnitGroupLoopCurrent()) <= 0.1) && (UnitTypeTestAttribute(UnitGetType(UnitGroupLoopCurrent()), c_unitAttributeHover) == true) && (UnitHasBehavior(UnitGroupLoopCurrent(), "Slowdowncheck") == false)) {
                    gf_PhysicsRemoveAsteroid(UnitGroupLoopCurrent());
                }
                else {
                }
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Physics_Init () {
    gt_Physics = TriggerCreate("gt_Physics_Func");
    TriggerAddEventTimeElapsed(gt_Physics, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Vote Kick
//--------------------------------------------------------------------------------------------------
bool gt_OpenVoteKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_voteKick_OpenButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_voteKickPick_Dialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_voteKickPick_Dialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_voteKickPick_Dialog, PlayerGroupSingle(EventPlayer()), true);
        IntLoopBegin(0, 4);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            DialogControlSetVisible(gv_voteKick_PlayerButtons[IntLoopCurrent()], PlayerGroupSingle(EventPlayer()), false);
        }
        IntLoopEnd();
        PlayerGroupLoopBegin(gf_getActivePlayersOnTeam(gf_GetPlayerTeam(EventPlayer())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGroupLoopCurrent() != EventPlayer()) && (PlayerGroupLoopCurrent() != 13) && (PlayerGroupLoopCurrent() != 14) && (PlayerType(PlayerGroupLoopCurrent()) != c_playerTypeComputer)) {
                DialogControlSetVisible(gv_voteKick_PlayerButtons[lv_count], PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemText(gv_voteKick_PlayerButtons[lv_count], TextWithColor(PlayerName(PlayerGroupLoopCurrent()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(PlayerGroupLoopCurrent(), false))), PlayerGroupSingle(EventPlayer()));
                gv_voteKick_Players[gf_GetPlayerTeam(EventPlayer())][lv_count][EventPlayer()] = PlayerGroupLoopCurrent();
                lv_count += 1;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenVoteKick_Init () {
    gt_OpenVoteKick = TriggerCreate("gt_OpenVoteKick_Func");
    TriggerAddEventDialogControl(gt_OpenVoteKick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Vote Kick
//--------------------------------------------------------------------------------------------------
bool gt_StartVoteKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    int lv_i;
    bool lv_wait;

    // Variable Initialization
    lv_wait = true;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_voteKick_PlayerButtons[0]) || (EventDialogControl() == gv_voteKick_PlayerButtons[1]) || (EventDialogControl() == gv_voteKick_PlayerButtons[2]) || (EventDialogControl() == gv_voteKick_PlayerButtons[3]) || (EventDialogControl() == gv_voteKick_PlayerButtons[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(0, 4);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((EventDialogControl() == gv_voteKick_PlayerButtons[IntLoopCurrent()])) {
            lv_p = gv_voteKick_Players[gf_GetPlayerTeam(EventPlayer())][IntLoopCurrent()][EventPlayer()];
        }
        else {
        }
    }
    IntLoopEnd();
    UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/0D851BA8") + TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false)))));
    DialogSetVisible(gv_voteKickPick_Dialog, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), false);
    DialogControlSetEnabled(gv_voteKick_OpenButton, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), false);
    if ((gv_energy_core_output[lv_i] >= 150) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("EnergyConsole", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(gv_pilots[lv_p]))), UnitGetPosition(gv_pilots[lv_p])) <= 8.0)) {
        lv_wait = false;
        lv_i = gf_shipToIndex(gv_battlecruisers[gf_GetPlayerTeam(EventPlayer())]);
        gv_energy_core_output[lv_i] = 100;
    }
    else {
    }
    if ((lv_wait == true)) {
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaSubtitle, (TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))) + StringExternal("Param/Value/419050E9")));
        Wait(15.0, c_timeReal);
    }
    else {
    }
    DialogSetVisible(gv_voteKick_VoteDialog, GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), true);
    DialogSetVisible(gv_voteKick_VoteDialog, PlayerGroupSingle(lv_p), false);
    TimerStart(gv_voteKick_Timeout[gf_GetPlayerTeam(EventPlayer())], 30.0, false, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_voteKick_VoteDialogText, (StringExternal("Param/Value/828BA66E") + TextWithColor(PlayerName(lv_p), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false))) + StringExternal("Param/Value/CD5A920B")), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    libNtve_gf_SetDialogItemTooltip(gv_voteKick_OpenButton, StringExternal("Param/Value/CE71288B"), GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())));
    gv_voteKick_KickPlayer[gf_GetPlayerTeam(EventPlayer())] = lv_p;
    gv_voteKick_InitiatingPlayer[gf_GetPlayerTeam(EventPlayer())] = EventPlayer();
    gv_voteKick_VotesInitiated[EventPlayer()] += 1;
    gv_voteKick_NoVotes[gf_GetPlayerTeam(EventPlayer())] = (PlayerGroupCount(gf_getActivePlayersOnTeam(gf_GetPlayerTeam(EventPlayer()))) - 2);
    if ((gv_voteKick_VotesInitiated[EventPlayer()] > 6)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F5D740BE"));
        gv_realReputation[EventPlayer()] -= 0.25;
        gf_BankSave(EventPlayer(), "reputation", "stuff", gf_encrypt(FixedToString(gv_realReputation[EventPlayer()], 1), " ", EventPlayer()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StartVoteKick_Init () {
    gt_StartVoteKick = TriggerCreate("gt_StartVoteKick_Func");
    TriggerAddEventDialogControl(gt_StartVoteKick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote
//--------------------------------------------------------------------------------------------------
bool gt_Vote_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_votekick_Block[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_voteKick_YesButton) || (EventDialogControl() == gv_voteKick_NoButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_votekick_Block[EventPlayer()] = true;
    DialogSetVisible(gv_voteKick_VoteDialog, PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_voteKick_NoButton)) {
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/82268AC5")));
    }
    else {
        gv_voteKick_YesVotes[gf_GetPlayerTeam(EventPlayer())] += 1;
        gv_voteKick_NoVotes[gf_GetPlayerTeam(EventPlayer())] -= 1;
        UIDisplayMessage(GameAttributePlayersForTeam(gf_GetPlayerTeam(EventPlayer())), c_messageAreaDebug, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/CF2D4BF8")));
    }
    gv_voteKick_TotalVotes[gf_GetPlayerTeam(EventPlayer())] += 1;
    if (((gv_voteKick_TotalVotes[gf_GetPlayerTeam(EventPlayer())] == (PlayerGroupCount(gf_getActivePlayersOnTeam(gf_GetPlayerTeam(EventPlayer()))) - 2)) || (gv_voteKick_YesVotes[gf_GetPlayerTeam(EventPlayer())] > gv_voteKick_NoVotes[gf_GetPlayerTeam(EventPlayer())]))) {
        gf_Finalizevotes(gf_GetPlayerTeam(EventPlayer()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vote_Init () {
    gt_Vote = TriggerCreate("gt_Vote_Func");
    TriggerAddEventDialogControl(gt_Vote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Voting timeout
//--------------------------------------------------------------------------------------------------
bool gt_Votingtimeout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == gv_voteKick_Timeout[1])) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    DialogSetVisible(gv_voteKick_VoteDialog, GameAttributePlayersForTeam(lv_team), false);
    UIDisplayMessage(GameAttributePlayersForTeam(lv_team), c_messageAreaSubtitle, (StringExternal("Param/Value/CD09DE49") + PlayerName(gv_voteKick_KickPlayer[lv_team])));
    Wait(1.0, c_timeGame);
    gf_Finalizevotes(lv_team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Votingtimeout_Init () {
    gt_Votingtimeout = TriggerCreate("gt_Votingtimeout_Func");
    TriggerAddEventTimer(gt_Votingtimeout, gv_voteKick_Timeout[1]);
    TriggerAddEventTimer(gt_Votingtimeout, gv_voteKick_Timeout[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Voting Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_VotingCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, 12);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_voteKick_Cooldown[IntLoopCurrent()] == EventTimer())) {
            lv_p = IntLoopCurrent();
        }
        else {
        }
    }
    IntLoopEnd();
    TimerWindowDestroy(gv_voteKick_CooldownWindow[lv_p]);
    DialogControlSetEnabled(gv_voteKick_OpenButton, PlayerGroupSingle(lv_p), true);
    libNtve_gf_SetDialogItemTooltip(gv_voteKick_OpenButton, StringExternal("Param/Value/A0BCAEF5"), PlayerGroupSingle(lv_p));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VotingCooldown_Init () {
    gt_VotingCooldown = TriggerCreate("gt_VotingCooldown_Func");
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[1]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[2]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[3]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[4]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[5]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[6]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[7]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[8]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[9]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[10]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[11]);
    TriggerAddEventTimer(gt_VotingCooldown, gv_voteKick_Cooldown[12]);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Texttags_Init();
    gt_Starttutorial_Init();
    gt_StartTutorialIntroduction_Init();
    gt_Disabletips_Init();
    gt_Enabletips_Init();
    gt_NextIntroductiontext_Init();
    gt_Disabletutorial_Init();
    gt_Disabletutorialconfirmation_Init();
    gt_Shiptakesalotofdamage_Init();
    gt_BCdies_Init();
    gt_BCtargetedDebug_Init();
    gt_Leavegame_Init();
    gt_UntitledTrigger016_Init();
    gt_UntitledTrigger017_Init();
    gt_UntitledTrigger027_Init();
    gt_CreateBlackHole2_Init();
    gt_setRep_Init();
    gt_setWins_Init();
    gt_setLosses_Init();
    gt_setKills_Init();
    gt_setDeaths_Init();
    gt_getPlayerName_Init();
    gt_Teaminfo_Init();
    gt_getHandle_Init();
    gt_physdebug_Init();
    gt_getCharges_Init();
    gt_showradius_Init();
    gt_changeowner_Init();
    gt_hide_Init();
    gt_changeowner2_Init();
    gt_killselectedunit_Init();
    gt_gettimeremaining_Init();
    gt_getNrAsteroids_Init();
    gt_Opentriggerdebug_Init();
    gt_Toggledebug_Init();
    gt_StartScreenReady_Init();
    gt_Mapinit_Init();
    gt_Start_Init();
    gt_DistributeConfiguration_Init();
    gt_DefaultConfiguration_Init();
    gt_Applyconfigurations_Init();
    gt_Mouseovermodel_Init();
    gt_ChangeRewardType_Init();
    gt_Direction_Init();
    gt_Cleardirection_Init();
    gt_Closedirection_Init();
    gt_Opendirection_Init();
    gt_ShipStatusupdate_Init();
    gt_ShipstatusMinimizeMaximize_Init();
    gt_Selectconsole_Init();
    gt_ShowSelectConsole_Init();
    gt_LeaveConsole_Init();
    gt_DisconnectConsole_Init();
    gt_Clearafk_Init();
    gt_LeaveConsoleMovement_Init();
    gt_Teleportlefttop_Init();
    gt_Teleportleftbottom_Init();
    gt_Teleportrighttop_Init();
    gt_Teleportrightbottom_Init();
    gt_Applyupgrades_Init();
    gt_SwitchView_Init();
    gt_ConveyorBelt_Init();
    gt_RepairkitRemoveitem_Init();
    gt_Hullrepairs_Init();
    gt_DroneLoop_Init();
    gt_IssueOrder_Init();
    gt_Returnhome_Init();
    gt_SwitchSelectedDrone_Init();
    gt_SwitchSelectedOrder_Init();
    gt_Changemineraltypes_Init();
    gt_Changeweaponprio_Init();
    gt_EnterDroneControl_Init();
    gt_PurchaseDrone_Init();
    gt_Showstatus_Init();
    gt_Orderdrones_Init();
    gt_VentQuestion_Init();
    gt_ChangeFloor_Init();
    gt_LockVent_Init();
    gt_LeaveDC_Init();
    gt_OpenEnergyControl_Init();
    gt_IncreaseCoreOutput_Init();
    gt_IncreaseEngine_Init();
    gt_IncreaseShields_Init();
    gt_IncreaseWeapons_Init();
    gt_DecreaseCoreOutput_Init();
    gt_DecreaseEngine_Init();
    gt_DecreaseShields_Init();
    gt_DecreaseWeapons_Init();
    gt_HackLeft_Init();
    gt_HackRight_Init();
    gt_HackDown_Init();
    gt_HackUp_Init();
    gt_HackHack_Init();
    gt_HackLeave_Init();
    gt_Enterhacking_Init();
    gt_Hackingactorvisual_Init();
    gt_fakelevel_Init();
    gt_Hack_Init();
    gt_LoadMissile_Init();
    gt_AutomaticMissileReloading_Init();
    gt_Firemissile_Init();
    gt_EnterMC_Init();
    gt_TrackingBeaconDestroyed_Init();
    gt_UnlockCamera_Init();
    gt_LockCamera_Init();
    gt_C4created_Init();
    gt_LeaveNavigation_Init();
    gt_OpenNavigation_Init();
    gt_EnterConstruction_Init();
    gt_EnterUpgrades_Init();
    gt_PurchaseItem_Init();
    gt_Preventupgradequeue_Init();
    gt_TrackLatestUpgrade_Init();
    gt_Processing_Init();
    gt_ChangeSelectedShip_Init();
    gt_CloseHangar_Init();
    gt_OpenHangar_Init();
    gt_ClosePurchaseShip_Init();
    gt_OpenPurchaseShip_Init();
    gt_PurchaseShip_Init();
    gt_DockShip_Init();
    gt_LaunchShip_Init();
    gt_DepositHangarItem_Init();
    gt_WithdrawAllHangaritems_Init();
    gt_Respawn_Init();
    gt_Withdrawhangaritem_Init();
    gt_SalvageshipOpenconfirm_Init();
    gt_SalvageshipOpenconfirm2_Init();
    gt_SalvageshipForreal_Init();
    gt_LaunchInfiltrator_Init();
    gt_LaunchInfiltratorFail_Init();
    gt_PurchaseMassReplicator_Init();
    gt_OpenMassReplicator_Init();
    gt_CreateVeldite_Init();
    gt_CreateChalcorium_Init();
    gt_CreatePyromanite_Init();
    gt_CreateKermiculite_Init();
    gt_OpenTractorBeamConsole_Init();
    gt_InitTractorBeam_Init();
    gt_CancelTractorBeam_Init();
    gt_BreakLock_Init();
    gt_TractorBeamEffect_Init();
    gt_Increasepull_Init();
    gt_Increasepush_Init();
    gt_FireYamatoCannon_Init();
    gt_LoadYamatoCannon_Init();
    gt_Yamatochangeanimation_Init();
    gt_OpenScience_Init();
    gt_PurgeCorePlasma_Init();
    gt_PowerTransfer_Init();
    gt_KermiculiteSpawn_Init();
    gt_MiningPeriodic_Init();
    gt_Startmining_Init();
    gt_MiningRemoveBehavior_Init();
    gt_ReturnmineralsDummy_Init();
    gt_ScanAsteroids_Init();
    gt_DockCargoDrone_Init();
    gt_Miningblock_Init();
    gt_InitStations_Init();
    gt_Enter_Init();
    gt_Leave_Init();
    gt_Energy_Init();
    gt_CutEngines_Init();
    gt_DecoyFlares_Init();
    gt_FireMissileSmallship_Init();
    gt_DecoyFlaresHotkey_Init();
    gt_FireLaser_Init();
    gt_TripleBurstCharges_Init();
    gt_FireKineticWeapon_Init();
    gt_FireBroadside_Init();
    gt_ScorpionLightMissilesplit_Init();
    gt_InertialNullifierField_Init();
    gt_Radarping_Init();
    gt_ShieldBoost_Init();
    gt_IronCurtain_Init();
    gt_EmergencyShieldEnergizer_Init();
    gt_EmergencyShieldEnergizerTurnOff_Init();
    gt_EngineBoost_Init();
    gt_Burst_Init();
    gt_ChangeWeaponry_Init();
    gt_PlasmaCannon_Init();
    gt_EMP_Init();
    gt_MinerPing_Init();
    gt_Boost_Init();
    gt_CloakingFieldOn_Init();
    gt_CloakingFieldOff_Init();
    gt_Returncargo_Init();
    gt_AccelerateMiningBeam_Init();
    gt_TurboJump_Init();
    gt_MineralVent_Init();
    gt_PhotonBarrage_Init();
    gt_ReflectiveShield_Init();
    gt_PhotonRush_Init();
    gt_QuantumBombardment_Init();
    gt_ChronitonTorpedoes_Init();
    gt_OpposerProximityMine_Init();
    gt_EMPMine_Init();
    gt_DistressBeacon_Init();
    gt_MineTarget_Init();
    gt_MineTargetCollision_Init();
    gt_NanoHullSpray_Init();
    gt_ShieldRecharger_Init();
    gt_MagneticPull_Init();
    gt_PhaseShift_Init();
    gt_QuantumSurge_Init();
    gt_ForcePrism_Init();
    gt_ForcePrismOff_Init();
    gt_PlasmaAutomaton_Init();
    gt_PlasmaAutomatonFiring_Init();
    gt_PlasmaAutomatonRegisterCollision_Init();
    gt_CollisionDetection_Init();
    gt_Asteroidcollision_Init();
    gt_DecoyFlarecollision_Init();
    gt_checkcolgroup_Init();
    gt_startRotate_Init();
    gt_SpaceLoopDisable_Init();
    gt_SpaceLoopLeft_Init();
    gt_SpaceLoopRight_Init();
    gt_SpaceLoopUp_Init();
    gt_SpaceLoopDown_Init();
    gt_Movement_Init();
    gt_Speed_Init();
    gt_Goto_Init();
    gt_Acceleration_Init();
    gt_Deceleration_Init();
    gt_OpeninventoryMarine_Init();
    gt_OpeninventoryShip_Init();
    gt_OpeninventoryChomper_Init();
    gt_OpeninventoryWraith_Init();
    gt_FrequencyNullifierEquipFix_Init();
    gt_FrequencyNullifierEquipFix2_Init();
    gt_BlackHole_Init();
    gt_music_Init();
    gt_Revive_Init();
    gt_Revivefinal_Init();
    gt_Faint_Init();
    gt_Pickupitems_Init();
    gt_MapVision_Init();
    gt_Infinitemissiles_Init();
    gt_resources_Init();
    gt_PlayerLeaves_Init();
    gt_Evenoutminerals_Init();
    gt_reset_Init();
    gt_unstuck_Init();
    gt_Checksystems_Init();
    gt_OffensiveTierCreateWraith_Init();
    gt_EconomyTierFixpricesandrevealasteroids_Init();
    gt_Upgradetier1_Init();
    gt_Upgradetier2_Init();
    gt_Upgradetier3_Init();
    gt_Physics_Init();
    gt_OpenVoteKick_Init();
    gt_StartVoteKick_Init();
    gt_Vote_Init();
    gt_Votingtimeout_Init();
    gt_VotingCooldown_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
